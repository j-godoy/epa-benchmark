/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 18 17:38:03 GMT 2018
 */

package com.example.signature;

import org.junit.Test;
import static org.junit.Assert.*;
import com.example.signature.MCaesarCipher;
import com.example.signature.MockPrivateKey;
import com.example.signature.MockPublicKey;
import com.example.signature.Signature;

public class Test_Find_Mutants_Def {

  @Test(timeout = 1300)
  public void test00()  throws Throwable  {
      Signature signature0 = new Signature("N^g?i**M2&NU");
      MCaesarCipher mCaesarCipher0 = new MCaesarCipher((byte)0);
      byte[] byteArray0 = new byte[7];
      MockPublicKey mockPublicKey0 = new MockPublicKey(mCaesarCipher0);
      signature0.initVerify(mockPublicKey0);
      signature0.update(byteArray0, (int) (byte)0, 0);
      assertEquals("N^g?i**M2&NU", signature0.getAlgorithm());
  }

  @Test(timeout = 1300)
  public void test01()  throws Throwable  {
      Signature signature0 = new Signature("com.example.signature.MockSignatureException");
      MCaesarCipher mCaesarCipher0 = new MCaesarCipher((byte)0);
      MockPublicKey mockPublicKey0 = new MockPublicKey(mCaesarCipher0);
      signature0.initVerify(mockPublicKey0);
      try {
        signature0.verify((byte[]) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test02()  throws Throwable  {
      Signature signature0 = new Signature((String) null);
      MCaesarCipher mCaesarCipher0 = new MCaesarCipher((byte)68);
      MockPublicKey mockPublicKey0 = new MockPublicKey(mCaesarCipher0);
      signature0.initVerify(mockPublicKey0);
      try {
        signature0.update((byte[]) null, (int) (byte)68, (int) (byte)68);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test03()  throws Throwable  {
      Signature signature0 = new Signature("the engine is not initialized properly");
      byte[] byteArray0 = new byte[4];
      MCaesarCipher mCaesarCipher0 = new MCaesarCipher((byte) (-23));
      MockPublicKey mockPublicKey0 = new MockPublicKey(mCaesarCipher0);
      signature0.initVerify(mockPublicKey0);
      try {
        signature0.update(byteArray0, 0, (-1529));
        fail("Expecting exception: NegativeArraySizeException");

      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test04()  throws Throwable  {
      Signature signature0 = new Signature("AD!q2t{R*f2YpQ@wHL");
      MCaesarCipher mCaesarCipher0 = new MCaesarCipher((byte)49);
      byte[] byteArray0 = new byte[7];
      MockPublicKey mockPublicKey0 = new MockPublicKey(mCaesarCipher0);
      signature0.initVerify(mockPublicKey0);
      try {
        signature0.update(byteArray0, (int) (byte)0, (int) (byte)49);
        fail("Expecting exception: IndexOutOfBoundsException");

      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test05()  throws Throwable  {
      Signature signature0 = new Signature("private key cannot be null");
      try {
        signature0.update((byte[]) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test06()  throws Throwable  {
      Signature signature0 = new Signature("");
      MockPublicKey mockPublicKey0 = new MockPublicKey((MCaesarCipher) null);
      try {
        signature0.initVerify(mockPublicKey0);
        fail("Expecting exception: Exception");

      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test07()  throws Throwable  {
      Signature signature0 = new Signature("");
      try {
        signature0.initVerify((MockPublicKey) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // public key cannot be null
         //
      }
  }

  @Test(timeout = 1300)
  public void test08()  throws Throwable  {
      Signature signature0 = new Signature("/D");
      try {
        signature0.initSign((MockPrivateKey) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // private key cannot be null
         //
      }
  }

  @Test(timeout = 1300)
  public void test09()  throws Throwable  {
      Signature signature0 = new Signature("N^g?i**M2&NU");
      MCaesarCipher mCaesarCipher0 = new MCaesarCipher((byte)0);
      byte[] byteArray0 = new byte[7];
      MockPublicKey mockPublicKey0 = new MockPublicKey(mCaesarCipher0);
      signature0.initVerify(mockPublicKey0);
      signature0.update(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 1300)
  public void test10()  throws Throwable  {
      Signature signature0 = new Signature("^8X'p}|_");
      byte[] byteArray0 = new byte[7];
      MCaesarCipher mCaesarCipher0 = new MCaesarCipher((byte) (-30));
      MockPrivateKey mockPrivateKey0 = new MockPrivateKey(mCaesarCipher0);
      signature0.initSign(mockPrivateKey0);
      signature0.update(byteArray0);
      assertEquals("^8X'p}|_", signature0.getAlgorithm());
  }

  @Test(timeout = 1300)
  public void test11()  throws Throwable  {
      Signature signature0 = new Signature("^8X'p}|_");
      MCaesarCipher mCaesarCipher0 = new MCaesarCipher((byte) (-30));
      MockPrivateKey mockPrivateKey0 = new MockPrivateKey(mCaesarCipher0);
      signature0.initSign(mockPrivateKey0);
      signature0.update((byte) (-30));
      assertEquals("^8X'p}|_", signature0.getAlgorithm());
  }

  @Test(timeout = 1300)
  public void test12()  throws Throwable  {
      Signature signature0 = new Signature("");
      MCaesarCipher mCaesarCipher0 = new MCaesarCipher((byte)28);
      MockPublicKey mockPublicKey0 = new MockPublicKey(mCaesarCipher0);
      signature0.initVerify(mockPublicKey0);
      byte[] byteArray0 = new byte[18];
      try {
        signature0.verify(byteArray0, (int) (byte)28, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // Bad arguments
         //
      }
  }

  @Test(timeout = 1300)
  public void test13()  throws Throwable  {
      Signature signature0 = new Signature("4tXkU");
      MCaesarCipher mCaesarCipher0 = new MCaesarCipher((byte)41);
      MockPublicKey mockPublicKey0 = new MockPublicKey(mCaesarCipher0);
      byte[] byteArray0 = new byte[6];
      signature0.initVerify(mockPublicKey0);
      boolean boolean0 = signature0.verify(byteArray0, 0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 1300)
  public void test14()  throws Throwable  {
      Signature signature0 = new Signature("^W0kv}#QfGj#E[d");
      byte[] byteArray0 = new byte[38];
      MCaesarCipher mCaesarCipher0 = new MCaesarCipher((byte) (-23));
      MockPublicKey mockPublicKey0 = new MockPublicKey(mCaesarCipher0);
      signature0.initVerify(mockPublicKey0);
      try {
        signature0.verify(byteArray0, 263, (int) (byte) (-23));
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // Bad arguments
         //
      }
  }

  @Test(timeout = 1300)
  public void test15()  throws Throwable  {
      Signature signature0 = new Signature("");
      byte[] byteArray0 = new byte[3];
      MCaesarCipher mCaesarCipher0 = new MCaesarCipher((byte) (-24));
      MockPublicKey mockPublicKey0 = new MockPublicKey(mCaesarCipher0);
      signature0.initVerify(mockPublicKey0);
      try {
        signature0.verify(byteArray0, (int) (byte) (-24), (int) (byte) (-24));
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // Bad arguments
         //
      }
  }

  @Test(timeout = 1300)
  public void test16()  throws Throwable  {
      Signature signature0 = new Signature("");
      MCaesarCipher mCaesarCipher0 = new MCaesarCipher((byte) (-89));
      MockPublicKey mockPublicKey0 = new MockPublicKey(mCaesarCipher0);
      signature0.initVerify(mockPublicKey0);
      try {
        signature0.verify((byte[]) null, (int) (byte) (-89), (int) (byte) (-89));
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // Bad arguments
         //
      }
  }

  @Test(timeout = 1300)
  public void test17()  throws Throwable  {
      Signature signature0 = new Signature((String) null);
      byte[] byteArray0 = new byte[5];
      MCaesarCipher mCaesarCipher0 = new MCaesarCipher((byte) (-22));
      MockPrivateKey mockPrivateKey0 = new MockPrivateKey(mCaesarCipher0);
      signature0.initSign(mockPrivateKey0);
      try {
        signature0.sign(byteArray0, (-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");

      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 1300)
  public void test18()  throws Throwable  {
      Signature signature0 = new Signature((String) null);
      byte[] byteArray0 = new byte[1];
      try {
        signature0.sign(byteArray0, (int) (byte)107, (int) (byte)107);
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // Output buffer too small for specified offset and length
         //
      }
  }

  @Test(timeout = 1300)
  public void test19()  throws Throwable  {
      Signature signature0 = new Signature("");
      try {
        signature0.sign((byte[]) null, 2647, 2647);
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // No output buffer given
         //
      }
  }

  @Test(timeout = 1300)
  public void test20()  throws Throwable  {
      Signature signature0 = new Signature("com.example.signature.Signature");
      MCaesarCipher mCaesarCipher0 = new MCaesarCipher((byte) (-73));
      MockPrivateKey mockPrivateKey0 = new MockPrivateKey(mCaesarCipher0);
      signature0.initSign(mockPrivateKey0);
      byte[] byteArray0 = signature0.sign();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 1300)
  public void test21()  throws Throwable  {
      Signature signature0 = new Signature("N^g?i**M2&NU");
      byte[] byteArray0 = new byte[7];
      try {
        signature0.sign(byteArray0, (-1684), (int) (byte)0);
        fail("Expecting exception: Exception");

      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test22()  throws Throwable  {
      Signature signature0 = new Signature("");
      try {
        signature0.verify((byte[]) null, (int) (byte) (-89), (int) (byte) (-89));
        fail("Expecting exception: Exception");

      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test23()  throws Throwable  {
      Signature signature0 = new Signature("N^g?i**M2&NU");
      try {
        signature0.update((byte)0);
        fail("Expecting exception: Exception");

      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test24()  throws Throwable  {
      Signature signature0 = new Signature("");
      try {
        signature0.sign();
        fail("Expecting exception: Exception");

      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test25()  throws Throwable  {
      Signature signature0 = new Signature("N^g?i**M2&NU");
      byte[] byteArray0 = new byte[7];
      try {
        signature0.update(byteArray0);
        fail("Expecting exception: Exception");

      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test26()  throws Throwable  {
      Signature signature0 = new Signature("N^g?i**M2&NU");
      byte[] byteArray0 = new byte[7];
      try {
        signature0.verify(byteArray0);
        fail("Expecting exception: Exception");

      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test27()  throws Throwable  {
      Signature signature0 = new Signature("N^g?i**M2&NU");
      byte[] byteArray0 = new byte[7];
      try {
        signature0.update(byteArray0, (int) (byte)0, 0);
        fail("Expecting exception: Exception");

      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test28()  throws Throwable  {
      Signature signature0 = new Signature((String) null);
      String string0 = signature0.getAlgorithm();
      assertNull(string0);
  }

  @Test(timeout = 1300)
  public void test29()  throws Throwable  {
      Signature signature0 = new Signature("N^g?i**M2&NU");
      MCaesarCipher mCaesarCipher0 = new MCaesarCipher((byte)0);
      MockPublicKey mockPublicKey0 = new MockPublicKey(mCaesarCipher0);
      signature0.initVerify(mockPublicKey0);
      signature0.update((byte)0);
      assertEquals("N^g?i**M2&NU", signature0.getAlgorithm());
  }

  @Test(timeout = 1300)
  public void test30()  throws Throwable  {
      Signature signature0 = new Signature("");
      MockPrivateKey mockPrivateKey0 = new MockPrivateKey((MCaesarCipher) null);
      try {
        signature0.initSign(mockPrivateKey0);
        fail("Expecting exception: Exception");

      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}