/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 04 00:52:17 GMT 2018
 */

package com.example.socket;

import org.junit.Test;
import static org.junit.Assert.*;
import com.example.socket.MockEnvironment;
import com.example.socket.MockInet4Address;
import com.example.socket.MockInet6Address;
import com.example.socket.MockInetAddress;
import com.example.socket.MockInetSocketAddress;
import com.example.socket.MockSocketAddress;
import com.example.socket.Pair;
import com.example.socket.Socket;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.SocketException;

public class Line_Branch_Epaexception_EpaAdjacentEdges_11 {

  @Test(timeout = 1500)
  public void test000()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("o0oQ", 0);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
      socket0.close();
      int int1 = socket0.close();
     //assertFalse(int1 == int0);
     //assertEquals(0, int1);
  }

  @Test(timeout = 1500)
  public void test001()  throws Throwable  {
      Socket socket0 = new Socket();
      socket0.close();
      socket0.close();
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test002()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("connect: timeout can't be negative", 1578);
      socket0.close();
      socket0.close();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test003()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("Socket is not connected", 0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
      socket0.shutdownOutput();
      socket0.shutdownInput();
      socket0.close();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test004()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", (-1));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownOutput();
      socket0.shutdownInput();
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket output is already shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test005()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet4Address mockInet4Address0 = new MockInet4Address("3/|'[l<l");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet4Address0, (-373));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 136);
      socket0.shutdownOutput();
      socket0.shutdownInput();
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket input is already shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test006()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet4Address mockInet4Address0 = new MockInet4Address("3/|'[l<l");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet4Address0, (-373));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 136);
      socket0.shutdownOutput();
      socket0.shutdownInput();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket output is shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test007()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1475);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1475);
      socket0.shutdownOutput();
      socket0.shutdownInput();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket input is shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test008()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet4Address mockInet4Address0 = new MockInet4Address("dw\"");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet4Address0, 1077);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownOutput();
      socket0.shutdownInput();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 1500)
  public void test009()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1475);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1475);
      socket0.shutdownOutput();
      Pair<Integer, InputStream> pair0 = socket0.getInputStream();
      Pair<Integer, InputStream> pair1 = socket0.getInputStream();
     //assertNotSame(pair1, pair0);
  }

  @Test(timeout = 1500)
  public void test010()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1448);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1448);
      int int1 = socket0.shutdownOutput();
     //assertEquals(0, int1);

      socket0.getInputStream();
      int int2 = socket0.close();
     //assertTrue(int2 == int0);
     //assertEquals(0, int2);
  }

  @Test(timeout = 1500)
  public void test011()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1475);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1475);
      socket0.shutdownOutput();
      socket0.getInputStream();
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket output is already shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test012()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1448);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1448);
      socket0.shutdownOutput();
      socket0.getInputStream();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket output is shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test013()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = new MockInet6Address("");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 2295);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2295);
      socket0.shutdownOutput();
      socket0.getInputStream();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test014()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1475);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1475);
      socket0.shutdownOutput();
      socket0.getInputStream();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 1500)
  public void test015()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 950);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 950);
      int int1 = socket0.shutdownOutput();
     //assertEquals(0, int1);

      socket0.close();
      int int2 = socket0.close();
     //assertTrue(int2 == int0);
     //assertEquals(0, int2);
  }

  @Test(timeout = 1500)
  public void test016()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("Tc*{3:4U k5[~S_@;(", (-471));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownOutput();
      socket0.close();
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test017()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1448);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1448);
      socket0.shutdownOutput();
      socket0.close();
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test018()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1448);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1448);
      socket0.shutdownOutput();
      socket0.close();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test019()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(">D^h,u", 1448);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 718);
      socket0.shutdownOutput();
      socket0.close();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test020()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2017);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(false);
      socket0.shutdownOutput();
      socket0.close();
      Pair<Integer, InputStream> pair0 = socket0.getInputStream();
     //assertNotNull(pair0);
  }

  @Test(timeout = 1500)
  public void test021()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1448);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1448);
      socket0.shutdownInput();
      socket0.shutdownOutput();
      socket0.close();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test022()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1448);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1448);
      socket0.shutdownInput();
      socket0.shutdownOutput();
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket output is already shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test023()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-2638));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownInput();
      socket0.shutdownOutput();
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket input is already shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test024()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-1136));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2486);
      socket0.shutdownInput();
      socket0.shutdownOutput();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket output is shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test025()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1448);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1448);
      socket0.shutdownInput();
      socket0.shutdownOutput();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket input is shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test026()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", (-1));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownInput();
      socket0.shutdownOutput();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 1500)
  public void test027()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      int int1 = socket0.shutdownInput();
     //assertTrue(int1 == int0);

      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      int int2 = socket0.shutdownOutput();
      int int3 = socket0.close();
     //assertTrue(int3 == int2);
     //assertEquals(1, int3);
  }

  @Test(timeout = 1500)
  public void test028()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-1136));
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2486);
      int int1 = socket0.shutdownInput();
     //assertEquals(0, int1);

      socket0.getOutputStream();
      int int2 = socket0.shutdownOutput();
     //assertTrue(int2 == int0);
     //assertEquals(0, int2);
  }

  @Test(timeout = 1500)
  public void test029()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1320);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownInput();
      Pair<Integer, OutputStream> pair0 = socket0.getOutputStream();
      Pair<Integer, OutputStream> pair1 = socket0.getOutputStream();
     //assertNotSame(pair1, pair0);
  }

  @Test(timeout = 1500)
  public void test030()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1320);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
     //assertEquals(0, int0);

      int int1 = socket0.shutdownInput();
      socket0.getOutputStream();
      int int2 = socket0.close();
     //assertTrue(int2 == int1);
     //assertEquals(0, int2);
  }

  @Test(timeout = 1500)
  public void test031()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
      socket0.shutdownInput();
      socket0.getOutputStream();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket input is shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test032()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
      socket0.shutdownInput();
      socket0.getOutputStream();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test033()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.anyLocalAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownInput();
      socket0.getOutputStream();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 1500)
  public void test034()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1320);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      int int1 = socket0.shutdownInput();
     //assertEquals(0, int1);

      socket0.close();
      int int2 = socket0.close();
     //assertTrue(int2 == int0);
     //assertEquals(0, int2);
  }

  @Test(timeout = 1500)
  public void test035()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("D!|ot;5R%n", (-295));
      Socket socket0 = new Socket();
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownInput();
      socket0.close();
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test036()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
      socket0.shutdownInput();
      socket0.close();
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test037()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1320);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownInput();
      socket0.close();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test038()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1320);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownInput();
      socket0.close();
      try {
        socket0.connect((MockSocketAddress) null);
        fail("Expecting exception: IllegalArgumentException");

      } catch(Exception e) {
         //
         // connect: The address can't be null
         //
      }
  }

  @Test(timeout = 1500)
  public void test039()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1320);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownInput();
      socket0.close();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test040()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      socket0.shutdownInput();
      mockEnvironment0.pushIOException(true);
      socket0.close();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket input is shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test041()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet4Address mockInet4Address0 = new MockInet4Address("3/|'[l<l");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet4Address0, (-373));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 136);
      socket0.shutdownOutput();
      socket0.shutdownInput();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, 51);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test042()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", (-1));
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
     //assertEquals(0, int0);

      int int1 = socket0.shutdownOutput();
      socket0.getInputStream();
      int int2 = socket0.shutdownInput();
     //assertTrue(int2 == int1);
     //assertEquals(0, int2);
  }

  @Test(timeout = 1500)
  public void test043()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2017);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(false);
      socket0.shutdownOutput();
      socket0.close();
      socket0.close();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test044()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 2486);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
      socket0.shutdownOutput();
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket output is already shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test045()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(7);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 7);
      socket0.shutdownOutput();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket output is shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test046()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2017);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(false);
      socket0.shutdownOutput();
      try {
        socket0.getInputStream();
        fail("Expecting exception: ClassCastException");

      } catch(Exception e) {
         //
         // com.example.socket.MockIOException cannot be cast to java.io.IOException
         //
      }
  }

  @Test(timeout = 1500)
  public void test047()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2045);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2841);
      socket0.shutdownOutput();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test048()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      socket0.bind(mockInetSocketAddress0);
      socket0.close();
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1);
      socket0.shutdownOutput();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 1500)
  public void test049()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      mockEnvironment0.pushIOException(true);
      int int1 = socket0.shutdownOutput();
     //assertEquals(1, int1);

      int int2 = socket0.shutdownOutput();
     //assertTrue(int2 == int0);
     //assertEquals(0, int2);
  }

  @Test(timeout = 1500)
  public void test050()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      mockEnvironment0.pushIOException(true);
      socket0.shutdownOutput();
      Pair<Integer, InputStream> pair0 = socket0.getInputStream();
     //assertNotNull(pair0);
  }

  @Test(timeout = 1500)
  public void test051()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 1578);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
     //assertEquals(0, int0);

      mockEnvironment0.pushIOException(true);
      int int1 = socket0.shutdownOutput();
      int int2 = socket0.close();
     //assertFalse(int2 == int1);
     //assertEquals(0, int2);
  }

  @Test(timeout = 1500)
  public void test052()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      socket0.shutdownOutput();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: ClassCastException");

      } catch(Exception e) {
         //
         // com.example.socket.MockIOException cannot be cast to java.io.IOException
         //
      }
  }

  @Test(timeout = 1500)
  public void test053()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      socket0.shutdownOutput();
      try {
        socket0.getInputStream();
        fail("Expecting exception: ClassCastException");

      } catch(Exception e) {
         //
         // com.example.socket.MockIOException cannot be cast to java.io.IOException
         //
      }
  }

  @Test(timeout = 1500)
  public void test054()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      mockEnvironment0.pushIOException(true);
      socket0.shutdownOutput();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, (-467));
        fail("Expecting exception: IllegalArgumentException");

      } catch(Exception e) {
         //
         // connect: timeout can't be negative
         //
      }
  }

  @Test(timeout = 1500)
  public void test055()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1448);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1448);
      socket0.shutdownInput();
      socket0.shutdownOutput();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test056()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1320);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownInput();
      socket0.getOutputStream();
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket input is already shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test057()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
      socket0.shutdownInput();
      socket0.close();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test058()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1320);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownInput();
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket input is already shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test059()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", (-518));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownInput();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket input is shutdown
         //
      }
  }

  @Test(timeout = 1500)
  public void test060()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1736);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1736);
      socket0.shutdownInput();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test061()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet4Address mockInet4Address0 = new MockInet4Address("dw\"");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet4Address0, 1077);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownInput();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 1500)
  public void test062()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("connect: timeout can't be negative", 1578);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      socket0.shutdownInput();
      Pair<Integer, OutputStream> pair0 = socket0.getOutputStream();
     //assertNotNull(pair0);
  }

  @Test(timeout = 1500)
  public void test063()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
     //assertEquals(0, int0);

      mockEnvironment0.pushIOException(true);
      int int1 = socket0.shutdownOutput();
      socket0.getOutputStream();
      int int2 = socket0.shutdownOutput();
     //assertFalse(int2 == int1);
     //assertEquals(0, int2);
  }

  @Test(timeout = 1500)
  public void test064()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      socket0.getOutputStream();
      mockEnvironment0.pushIOException(true);
      int int1 = socket0.shutdownOutput();
     //assertFalse(int1 == int0);
     //assertEquals(1, int1);
  }

  @Test(timeout = 1500)
  public void test065()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1320);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.getOutputStream();
      int int1 = socket0.shutdownInput();
     //assertTrue(int1 == int0);
     //assertEquals(0, int1);
  }

  @Test(timeout = 1500)
  public void test066()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("Timeout cannot be null", (-1319));
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.getOutputStream();
      int int1 = socket0.close();
     //assertTrue(int1 == int0);
     //assertEquals(0, int1);
  }

  @Test(timeout = 1500)
  public void test067()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-1994));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.getOutputStream();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test068()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 950);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.getOutputStream();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 1500)
  public void test069()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2017);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      socket0.getInputStream();
      int int1 = socket0.shutdownOutput();
     //assertTrue(int1 == int0);
     //assertEquals(0, int1);
  }

  @Test(timeout = 1500)
  public void test070()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      socket0.getInputStream();
      mockEnvironment0.pushIOException(true);
      int int1 = socket0.shutdownOutput();
     //assertFalse(int1 == int0);
     //assertEquals(1, int1);
  }

  @Test(timeout = 1500)
  public void test071()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      int int1 = socket0.shutdownOutput();
     //assertFalse(int1 == int0);

      int int2 = socket0.close();
      socket0.getInputStream();
      int int3 = socket0.shutdownInput();
     //assertFalse(int3 == int2);
     //assertEquals(0, int3);
  }

  @Test(timeout = 1500)
  public void test072()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("connect: timeout can't be negative", 1578);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.getInputStream();
      mockEnvironment0.pushIOException(true);
      int int1 = socket0.shutdownInput();
     //assertFalse(int1 == int0);
     //assertEquals(1, int1);
  }

  @Test(timeout = 1500)
  public void test073()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      socket0.getInputStream();
      Pair<Integer, OutputStream> pair0 = socket0.getOutputStream();
     //assertNotNull(pair0);
  }

  @Test(timeout = 1500)
  public void test074()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, (-16));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      Pair<Integer, InputStream> pair0 = socket0.getInputStream();
      Pair<Integer, InputStream> pair1 = socket0.getInputStream();
     //assertNotSame(pair1, pair0);
  }

  @Test(timeout = 1500)
  public void test075()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.getInputStream();
      int int1 = socket0.close();
     //assertTrue(int1 == int0);
     //assertEquals(0, int1);
  }

  @Test(timeout = 1500)
  public void test076()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      socket0.getInputStream();
      mockEnvironment0.pushIOException(true);
      int int1 = socket0.close();
     //assertFalse(int1 == int0);
     //assertEquals(1, int1);
  }

  @Test(timeout = 1500)
  public void test077()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, (-16));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.getInputStream();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test078()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.close();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test079()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("Timeout cannot be null", (-1319));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.close();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test080()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(725);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
      socket0.close();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test081()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(false);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("o0oQ", 22);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 22);
      socket0.close();
      socket0.shutdownOutput();
      socket0.close();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test082()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      socket0.shutdownOutput();
      socket0.close();
      socket0.getOutputStream();
      Pair<Integer, InputStream> pair0 = socket0.getInputStream();
     //assertNotNull(pair0);
  }

  @Test(timeout = 1500)
  public void test083()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      socket0.shutdownOutput();
      socket0.close();
      socket0.getInputStream();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 1500)
  public void test084()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(false);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 22);
      socket0.close();
      socket0.close();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test085()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      socket0.close();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: ClassCastException");

      } catch(Exception e) {
         //
         // com.example.socket.MockIOException cannot be cast to java.io.IOException
         //
      }
  }

  @Test(timeout = 1500)
  public void test086()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      socket0.close();
      try {
        socket0.getInputStream();
        fail("Expecting exception: ClassCastException");

      } catch(Exception e) {
         //
         // com.example.socket.MockIOException cannot be cast to java.io.IOException
         //
      }
  }

  @Test(timeout = 1500)
  public void test087()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      mockEnvironment0.pushIOException(true);
      socket0.close();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 1500)
  public void test088()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      int int0 = socket0.bind((MockSocketAddress) null);
     //assertEquals(0, int0);

      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("ubd", 725);
      int int1 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 31);
      int int2 = socket0.close();
     //assertFalse(int2 == int1);
     //assertEquals(0, int2);
  }

  @Test(timeout = 1500)
  public void test089()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 866);
      socket0.bind(mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test090()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("ubd", 725);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 31);
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test091()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(15);
      socket0.bind(mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2841);
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test092()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 866);
      socket0.bind(mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, (-1));
        fail("Expecting exception: IllegalArgumentException");

      } catch(Exception e) {
         //
         // connect: timeout can't be negative
         //
      }
  }

  @Test(timeout = 1500)
  public void test093()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-767));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 69);
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test094()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 1578);
      int int0 = socket0.bind(mockInetSocketAddress0);
      int int1 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
     //assertEquals(0, int1);

      mockEnvironment0.pushIOException(true);
      int int2 = socket0.shutdownOutput();
     //assertFalse(int2 == int0);
     //assertEquals(1, int2);
  }

  @Test(timeout = 1500)
  public void test095()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      int int0 = socket0.bind(mockInetSocketAddress0);
      int int1 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
     //assertEquals(0, int1);

      int int2 = socket0.shutdownInput();
     //assertTrue(int2 == int0);
     //assertEquals(0, int2);
  }

  @Test(timeout = 1500)
  public void test096()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("connect: timeout can't be negative", 1578);
      int int0 = socket0.bind(mockInetSocketAddress0);
     //assertEquals(0, int0);

      int int1 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      int int2 = socket0.shutdownInput();
     //assertFalse(int2 == int1);
     //assertEquals(1, int2);
  }

  @Test(timeout = 1500)
  public void test097()  throws Throwable  {
      Socket socket0 = new Socket();
      socket0.bind((MockSocketAddress) null);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1320);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      Pair<Integer, OutputStream> pair0 = socket0.getOutputStream();
     //assertNotNull(pair0);
  }

  @Test(timeout = 1500)
  public void test098()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("connect: timeout can't be negative", 1578);
      socket0.bind(mockInetSocketAddress0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      Pair<Integer, InputStream> pair0 = socket0.getInputStream();
     //assertNotNull(pair0);
  }

  @Test(timeout = 1500)
  public void test099()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      int int0 = socket0.bind(mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(false);
      int int1 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 22);
     //assertEquals(0, int1);

      int int2 = socket0.close();
     //assertFalse(int2 == int0);
     //assertEquals(1, int2);
  }

  @Test(timeout = 1500)
  public void test100()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.anyLocalAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 204);
      socket0.bind(mockInetSocketAddress0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 327);
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, 327);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test101()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      socket0.bind(mockInetSocketAddress0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 1500)
  public void test102()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) null);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((String) null, 725);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 22);
      socket0.close();
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test103()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      int int0 = socket0.bind((MockSocketAddress) null);
     //assertEquals(0, int0);

      mockEnvironment0.pushIOException(true);
      int int1 = socket0.connect((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      int int2 = socket0.close();
     //assertTrue(int2 == int1);
     //assertEquals(1, int2);
  }

  @Test(timeout = 1500)
  public void test104()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) null);
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test105()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) null);
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test106()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) null);
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test107()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) null);
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test108()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) null, 725);
      try {
        socket0.connect((MockSocketAddress) null);
        fail("Expecting exception: IllegalArgumentException");

      } catch(Exception e) {
         //
         // connect: The address can't be null
         //
      }
  }

  @Test(timeout = 1500)
  public void test109()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("ubd", 725);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, (-4518));
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 1500)
  public void test110()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(": invalid address type", 1424);
      int int0 = socket0.bind(mockInetSocketAddress0);
      socket0.close();
      int int1 = socket0.close();
     //assertTrue(int1 == int0);
     //assertEquals(0, int1);
  }

  @Test(timeout = 1500)
  public void test111()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2776);
      socket0.bind(mockInetSocketAddress0);
      socket0.close();
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test112()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      socket0.close();
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test113()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-770));
      socket0.connect((MockSocketAddress) null);
      socket0.close();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test114()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-767));
      socket0.close();
      socket0.close();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test115()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-767));
      socket0.close();
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1);
      socket0.close();
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test116()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      int int0 = socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      socket0.close();
      int int1 = socket0.close();
     //assertFalse(int1 == int0);
     //assertEquals(1, int1);
  }

  @Test(timeout = 1500)
  public void test117()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      socket0.close();
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test118()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      socket0.close();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test119()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      socket0.close();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test120()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-767));
      socket0.close();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 1500)
  public void test121()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("o0oQ", 0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
      socket0.close();
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test122()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 866);
      socket0.bind(mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test123()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInet6Address mockInet6Address0 = new MockInet6Address("X@$EJ 0bp)a:P{%%");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1730);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1730);
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test124()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, (-809));
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test125()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-661));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      socket0.shutdownOutput();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 1500)
  public void test126()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 443);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 443);
      mockEnvironment0.pushIOException(true);
      socket0.shutdownInput();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test127()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1320);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      Pair<Integer, OutputStream> pair0 = socket0.getOutputStream();
      Pair<Integer, OutputStream> pair1 = socket0.getOutputStream();
     //assertNotSame(pair1, pair0);
  }

  @Test(timeout = 1500)
  public void test128()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("connect: timeout can't be negative", 1578);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 590);
      socket0.close();
      int int1 = socket0.close();
     //assertTrue(int1 == int0);
     //assertEquals(0, int1);
  }

  @Test(timeout = 1500)
  public void test129()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(false);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("o0oQ", 22);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 22);
      socket0.close();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test130()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, (-16));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      try {
        socket0.getOutputStream();
        fail("Expecting exception: ClassCastException");

      } catch(Exception e) {
         //
         // com.example.socket.MockIOException cannot be cast to java.io.IOException
         //
      }
  }

  @Test(timeout = 1500)
  public void test131()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(5);
      Socket socket0 = new Socket();
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 1500)
  public void test132()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 866);
      int int0 = socket0.bind(mockInetSocketAddress0);
     //assertEquals(1, int0);

      mockEnvironment0.pushIOException(true);
      int int1 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, (-1));
      int int2 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
     //assertTrue(int2 == int1);
     //assertEquals(1, int2);
  }

  @Test//(timeout = 1500)
  public void test133()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 866);
      int int0 = socket0.bind(mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      int int1 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, (-1));
      int int2 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
     //assertFalse(int2 == int0);

      int int3 = socket0.shutdownInput();
     //assertFalse(int3 == int1);
     //assertEquals(0, int3);
  }

  @Test(timeout = 1500)
  public void test134()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 866);
      mockEnvironment0.pushIOException(true);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      int int1 = socket0.close();
     //assertFalse(int1 == int0);
     //assertEquals(0, int1);
  }

  @Test(timeout = 1500)
  public void test135()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 866);
      mockEnvironment0.pushIOException(true);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      int int1 = socket0.bind(mockInetSocketAddress0);
     //assertFalse(int1 == int0);
     //assertEquals(0, int1);
  }

  @Test(timeout = 1500)
  public void test136()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("N^7Gp9Un;]X", 866);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test137()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 866);
      socket0.bind(mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, (-1));
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test138()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 866);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test139()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      mockEnvironment0.pushIOException(true);
      MockInet4Address mockInet4Address0 = new MockInet4Address("");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet4Address0, 5156);
      mockEnvironment0.setDelayToConnect(mockInetSocketAddress0, 5156);
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: IOException");

      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1500)
  public void test140()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, (-809));
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: IOException");

      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1500)
  public void test141()  throws Throwable  {
      Socket socket0 = new Socket();
      socket0.close();
      socket0.close();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test142()  throws Throwable  {
      Socket socket0 = new Socket((MockEnvironment) null);
      socket0.close();
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test143()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.close();
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test144()  throws Throwable  {
      Socket socket0 = new Socket();
      socket0.close();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test145()  throws Throwable  {
      Socket socket0 = new Socket();
      socket0.close();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test146()  throws Throwable  {
      Socket socket0 = new Socket();
      socket0.close();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test147()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      int int0 = socket0.bind(mockInetSocketAddress0);
      int int1 = socket0.close();
     //assertEquals(1, int1);

      mockEnvironment0.pushIOException(true);
      int int2 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1);
     //assertTrue(int2 == int0);
     //assertEquals(1, int2);
  }

  @Test(timeout = 1500)
  public void test148()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      socket0.bind(mockInetSocketAddress0);
      socket0.close();
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1);
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test149()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      int int0 = socket0.bind(mockInetSocketAddress0);
      int int1 = socket0.close();
     //assertEquals(1, int1);

      int int2 = socket0.bind(mockInetSocketAddress0);
     //assertFalse(int2 == int0);
     //assertEquals(0, int2);
  }

  @Test(timeout = 1500)
  public void test150()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      socket0.bind(mockInetSocketAddress0);
      socket0.close();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test151()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      socket0.bind(mockInetSocketAddress0);
      socket0.close();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, (-1912));
        fail("Expecting exception: IllegalArgumentException");

      } catch(Exception e) {
         //
         // connect: timeout can't be negative
         //
      }
  }

  @Test(timeout = 1500)
  public void test152()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-767));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test153()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("connect: timeout can't be negative", 1578);
      socket0.bind(mockInetSocketAddress0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      try {
        socket0.getOutputStream();
        fail("Expecting exception: ClassCastException");

      } catch(Exception e) {
         //
         // com.example.socket.MockIOException cannot be cast to java.io.IOException
         //
      }
  }

  @Test(timeout = 1500)
  public void test154()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) null);
      socket0.close();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test155()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      socket0.close();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test156()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      mockEnvironment0.pushIOException(true);
      socket0.close();
      try {
        socket0.connect((MockSocketAddress) null, 289);
        fail("Expecting exception: IllegalArgumentException");

      } catch(Exception e) {
         //
         // connect: The address can't be null
         //
      }
  }

  @Test(timeout = 1500)
  public void test157()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test158()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test159()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("d67!mbx%!kc(#{uvj", 471);
      socket0.bind(mockInetSocketAddress0);
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test160()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test161()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(15);
      socket0.bind(mockInetSocketAddress0);
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 1500)
  public void test162()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 866);
      socket0.bind(mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test163()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      int int0 = socket0.bind(mockInetSocketAddress0);
      int int1 = socket0.close();
     //assertTrue(int1 == int0);

      socket0.bind(mockInetSocketAddress0);
      int int2 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1);
      int int3 = socket0.shutdownOutput();
     //assertTrue(int3 == int2);
     //assertEquals(0, int3);
  }

  @Test(timeout = 1500)
  public void test164()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 866);
      socket0.bind(mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, (-1));
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test165()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      int int0 = socket0.bind((MockSocketAddress) null);
      int int1 = socket0.close();
     //assertFalse(int1 == int0);
     //assertEquals(0, int1);
  }

  @Test(timeout = 1500)
  public void test166()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      socket0.bind(mockInetSocketAddress0);
      socket0.close();
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress((-1093));
      try {
        socket0.bind(mockInetSocketAddress1);
        fail("Expecting exception: IOException");

      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1500)
  public void test167()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      int int0 = socket0.bind(mockInetSocketAddress0);
      int int1 = socket0.bind(mockInetSocketAddress0);
     //assertFalse(int1 == int0);

      int int2 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
      int int3 = socket0.shutdownOutput();
     //assertTrue(int3 == int2);
     //assertEquals(0, int3);
  }

  @Test(timeout = 1500)
  public void test168()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      socket0.bind(mockInetSocketAddress0);
      int int0 = socket0.bind(mockInetSocketAddress0);
     //assertEquals(1, int0);
  }

  @Test(timeout = 1500)
  public void test169()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      mockEnvironment0.pushIOException(true);
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test170()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      socket0.bind(mockInetSocketAddress0);
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test171()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      mockEnvironment0.pushIOException(true);
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test172()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      socket0.bind(mockInetSocketAddress0);
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test173()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 866);
      socket0.bind(mockInetSocketAddress0);
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, (-1));
        fail("Expecting exception: IllegalArgumentException");

      } catch(Exception e) {
         //
         // connect: timeout can't be negative
         //
      }
  }

  @Test(timeout = 1500)
  public void test174()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-763));
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test175()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2051);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2833);
      socket0.getInputStream();
      mockEnvironment0.pushIOException(true);
      try {
        socket0.getOutputStream();
        fail("Expecting exception: ClassCastException");

      } catch(Exception e) {
         //
         // com.example.socket.MockIOException cannot be cast to java.io.IOException
         //
      }
  }

  @Test(timeout = 1500)
  public void test176()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.close();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 1500)
  public void test177()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      try {
        socket0.connect((MockSocketAddress) null, 725);
        fail("Expecting exception: IllegalArgumentException");

      } catch(Exception e) {
         //
         // connect: The address can't be null
         //
      }
  }

  @Test(timeout = 1500)
  public void test178()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      socket0.bind(mockInetSocketAddress0);
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress((-22));
      try {
        socket0.bind(mockInetSocketAddress1);
        fail("Expecting exception: IOException");

      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1500)
  public void test179()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test180()  throws Throwable  {
      Socket socket0 = new Socket();
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test181()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test182()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(Exception e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 1500)
  public void test183()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      try {
        socket0.connect((MockSocketAddress) null);
        fail("Expecting exception: IllegalArgumentException");

      } catch(Exception e) {
         //
         // connect: The address can't be null
         //
      }
  }

  @Test(timeout = 1500)
  public void test184()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(65535);
      Socket socket0 = new Socket((MockEnvironment) null);
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, 757);
        fail("Expecting exception: NullPointerException");

      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1500)
  public void test185()  throws Throwable  {
      Socket socket0 = new Socket((MockEnvironment) null);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-1));
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: IOException");

      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
