/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 23 16:56:35 GMT 2018
 */

package com.example.socket;

import org.junit.Test;
import static org.junit.Assert.*;
import com.example.socket.MockEnvironment;
import com.example.socket.MockInet4Address;
import com.example.socket.MockInet6Address;
import com.example.socket.MockInetAddress;
import com.example.socket.MockInetSocketAddress;
import com.example.socket.MockSocketAddress;
import com.example.socket.Pair;
import com.example.socket.Socket;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.SocketException;

public class Line_Branch_0 {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLoopbackAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1);
      mockEnvironment0.pushIOException(true);
      int int1 = socket0.shutdownOutput();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 1);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1);
      mockEnvironment0.pushIOException(true);
      int int1 = socket0.shutdownInput();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLoopbackAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1);
      mockEnvironment0.pushIOException(true);
      try { 
        socket0.getOutputStream();
        fail();
      
      } catch(ClassCastException e) {
         //
         // com.example.socket.MockIOException cannot be cast to java.io.IOException
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("4>E(>4", 1660);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, (-2138));
      Socket socket0 = new Socket(mockEnvironment0);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      int int1 = socket0.close();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("'+x", 1);
      mockEnvironment0.pushIOException(true);
      Socket socket0 = new Socket(mockEnvironment0);
      int int0 = socket0.bind(mockInetSocketAddress0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownOutput();
      try { 
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket output is already shutdown
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Socket socket0 = new Socket();
      socket0.close();
      try { 
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      mockEnvironment0.pushIOException(true);
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.anyLocalAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 4145);
      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0, 65535);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Socket socket0 = new Socket();
      try { 
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Socket socket0 = new Socket();
      socket0.close();
      try { 
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) null, 948);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownInput();
      try { 
        socket0.getInputStream();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket input is shutdown
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      try { 
        socket0.getInputStream();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test//(timeout = 4000)
  public void test13()  throws Throwable  {
      Socket socket0 = new Socket();
      socket0.close();
      try { 
        socket0.getInputStream();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetAddress mockInetAddress0 = new MockInetAddress("2\u0003bWF8>`+0_'aXj2&");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(mockInetAddress0, 19);
      try { 
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connect: invalid address type
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      MockInet4Address mockInet4Address0 = new MockInet4Address("HwHcT`~H%bpV");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet4Address0, 3635);
      Socket socket0 = new Socket(mockEnvironment0);
      int int0 = socket0.bind(mockInetSocketAddress0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) null, 827);
      try { 
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 1);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1);
      try { 
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      socket0.close();
      try { 
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Socket socket0 = new Socket();
      int int0 = socket0.bind((MockSocketAddress) null);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      int int1 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-1452));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      try { 
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Socket socket0 = new Socket();
      socket0.close();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("?9[|KGu<hX.", 0);
      try { 
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-1833));
      try { 
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, (-1833));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connect: timeout can't be negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Socket socket0 = new Socket((MockEnvironment) null);
      try { 
        socket0.connect((MockSocketAddress) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // connect: The address can't be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLoopbackAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1);
      socket0.shutdownOutput();
      try { 
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket output is shutdown
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      try { 
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      try { 
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.close();
      try { 
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("Delay should be non negative", 0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownInput();
      try { 
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket input is already shutdown
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLoopbackAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1);
      Pair<Integer, OutputStream> pair0 = socket0.getOutputStream();
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLoopbackAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1);
      Pair<Integer, InputStream> pair0 = socket0.getInputStream();
      assertNotNull(pair0);
  }
  
  @Test(timeout = 1300)
  public void test06_1()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(22);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 22);
      Pair<Integer, OutputStream> pair0 = socket0.getOutputStream();
      assertNotNull(pair0);
  }
}
