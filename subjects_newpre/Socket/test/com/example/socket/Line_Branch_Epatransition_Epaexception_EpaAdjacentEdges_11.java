/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:21:30 GMT 2018
 */

package com.example.socket;

import org.junit.Test;
import static org.junit.Assert.*;
import com.example.socket.MockEnvironment;
import com.example.socket.MockInet4Address;
import com.example.socket.MockInet6Address;
import com.example.socket.MockInetAddress;
import com.example.socket.MockInetSocketAddress;
import com.example.socket.MockSocketAddress;
import com.example.socket.Socket;
import java.io.ObjectStreamConstants;


// Detecta 184 de 186 mutantes

public class Line_Branch_Epatransition_Epaexception_EpaAdjacentEdges_11 {
	@Test(timeout = 4000)
	  public void test00()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      mockEnvironment0.pushIOException(true);
	      mockEnvironment0.pushIOException(true);
	      Socket socket0 = new Socket(mockEnvironment0);
	      mockEnvironment0.pushIOException(false);
	      MockInet4Address mockInet4Address0 = new MockInet4Address("IN+h&");
	      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLoopbackAddress();
	      socket0.close();
	      socket0.close();
	      Socket socket1 = new Socket(mockEnvironment0);
	      MockInetAddress.getLocalHost();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 0);
	      socket1.connect((MockSocketAddress) mockInetSocketAddress0);
	      try {
	        socket1.getOutputStream();
	        fail("Expecting exception: ClassCastException");

	      } catch(Exception e) {
	         //
	         // com.example.socket.MockIOException cannot be cast to java.io.IOException
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test01()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
	      mockEnvironment0.setDelayToConnect(mockInetSocketAddress0, 65535);
	      MockEnvironment mockEnvironment1 = new MockEnvironment();
	      Socket socket0 = new Socket(mockEnvironment0);
	      socket0.close();
	      Socket socket1 = new Socket(mockEnvironment0);
	      socket1.bind(mockInetSocketAddress0);
	      Socket socket2 = new Socket(mockEnvironment1);
	      socket1.close();
	      socket0.close();
	      socket0.close();
	      Socket socket3 = new Socket(mockEnvironment0);
	      try {
	        socket1.shutdownOutput();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test02()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = null;
	      Socket socket0 = new Socket((MockEnvironment) null);
	      try {
	        socket0.shutdownInput();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is not connected
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test03()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      Socket socket0 = new Socket(mockEnvironment0);
	      new MockEnvironment();
	      socket0.bind((MockSocketAddress) null);
	      socket0.close();
	      Socket socket1 = new Socket(mockEnvironment0);
	      socket1.bind((MockSocketAddress) null);
	      socket1.close();
	      boolean boolean0 = false;
	      try {
	        socket0.getInputStream();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test04()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      mockEnvironment0.shouldThrowIOException();
	      Socket socket0 = new Socket(mockEnvironment0);
	      Socket socket1 = new Socket(mockEnvironment0);
	      try {
	        socket1.getInputStream();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is not connected
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test05()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      mockEnvironment0.pushIOException(true);
	      mockEnvironment0.pushIOException(true);
	      Socket socket0 = new Socket(mockEnvironment0);
	      mockEnvironment0.pushIOException(false);
	      MockInet4Address mockInet4Address0 = new MockInet4Address("IN+h&");
	      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLoopbackAddress();
	      socket0.close();
	      socket0.close();
	      Socket socket1 = new Socket(mockEnvironment0);
	      MockInetAddress.getLocalHost();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 0);
	      int int0 = socket1.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket0.close();
	      socket0.close();
	      Socket socket2 = new Socket(mockEnvironment0);
	      int int1 = socket1.close();
	      socket2.close();
	      socket0.close();
	      socket2.close();
	      int int2 = socket1.shutdownInput();
	     //assertFalse(int2 == int0);

	      socket1.close();
	      socket1.close();
	      Socket socket3 = new Socket(mockEnvironment0);
	      Socket socket4 = new Socket(mockEnvironment0);
	      int int3 = socket1.close();
	     //assertFalse(int3 == int1);
	     //assertEquals(0, int3);
	  }

	  @Test(timeout = 4000)
	  public void test06()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      mockEnvironment0.pushIOException(true);
	      mockEnvironment0.pushIOException(true);
	      Socket socket0 = new Socket(mockEnvironment0);
	      mockEnvironment0.pushIOException(false);
	      MockInet4Address mockInet4Address0 = new MockInet4Address("IN+h&");
	      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLoopbackAddress();
	      socket0.close();
	      Socket socket1 = new Socket(mockEnvironment0);
	      MockInetAddress.getLocalHost();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 0);
	      int int0 = socket1.connect((MockSocketAddress) mockInetSocketAddress0);
	     //assertEquals(0, int0);

	      socket0.close();
	      int int1 = socket1.shutdownInput();
	      socket0.close();
	      Socket socket2 = new Socket(mockEnvironment0);
	      int int2 = socket1.close();
	      socket2.close();
	      socket0.close();
	      int int3 = socket2.close();
	     //assertFalse(int3 == int2);

	      int int4 = socket1.shutdownInput();
	     //assertFalse(int4 == int1);

	      socket1.close();
	      socket1.close();
	      Socket socket3 = new Socket(mockEnvironment0);
	      socket1.close();
	      int int5 = socket3.close();
	     //assertEquals(0, int5);
	  }

	  @Test(timeout = 4000)
	  public void test07()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(256);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 5135);
	      socket0.shutdownInput();
	      try {
	        socket0.getInputStream();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket input is shutdown
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test08()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(299);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket0.close();
	      try {
	        socket0.getOutputStream();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test09()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((String) null, 3395);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket0.shutdownOutput();
	      socket0.getInputStream();
	      socket0.close();
	      socket0.close();
	      socket0.close();
	      try {
	        socket0.shutdownOutput();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test10()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      mockEnvironment0.pushIOException(true);
	      mockEnvironment0.pushIOException(true);
	      Socket socket0 = new Socket(mockEnvironment0);
	      mockEnvironment0.pushIOException(true);
	      MockInet4Address mockInet4Address0 = new MockInet4Address("IN+h&");
	      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLoopbackAddress();
	      MockInetAddress.getLoopbackAddress();
	      socket0.close();
	      socket0.close();
	      Socket socket1 = new Socket(mockEnvironment0);
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 0);
	      socket1.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket0.close();
	      socket0.close();
	      Socket socket2 = new Socket(mockEnvironment0);
	      socket1.close();
	      socket2.close();
	      socket0.close();
	      socket2.close();
	      try {
	        socket1.shutdownInput();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is not connected
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test11()  throws Throwable  {
	      Socket socket0 = new Socket();
	      socket0.close();
	      try {
	        socket0.getOutputStream();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test12()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(3395);
	      socket0.bind(mockInetSocketAddress0);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      try {
	        socket0.bind(mockInetSocketAddress0);
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Already bound
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test13()  throws Throwable  {
	      Socket socket0 = new Socket();
	      socket0.close();
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      mockEnvironment0.pushIOException(false);
	      socket0.close();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("w$PAun{T;+3Xo", 0);
	      mockEnvironment0.isBlackListed(mockInetSocketAddress0);
	      mockEnvironment0.addToBlackList(mockInetSocketAddress0);
	      Socket socket1 = new Socket(mockEnvironment0);
	      Socket socket2 = new Socket(mockEnvironment0);
	      try {
	        socket2.connect((MockSocketAddress) mockInetSocketAddress0);
	        fail("Expecting exception: IOException");

	      } catch(Exception e) {
	         //
	         // Connection refused
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test14()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      Socket socket0 = new Socket(mockEnvironment0);
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 1280);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket0.close();
	      try {
	        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test15()  throws Throwable  {
	      Socket socket0 = new Socket((MockEnvironment) null);
	      Socket socket1 = new Socket((MockEnvironment) null);
	      MockInet4Address mockInet4Address0 = new MockInet4Address("");
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet4Address0, 676);
	      try {
	        socket0.connect((MockSocketAddress) mockInetSocketAddress0, 676);
	        fail("Expecting exception: NullPointerException");

	      } catch(Exception e) {
	         //
	         // no message in exception (getMessage() returned null)
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test16()  throws Throwable  {
	      Socket socket0 = new Socket();
	      socket0.close();
	      socket0.close();
	      try {
	        socket0.getInputStream();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test17()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(3395);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      try {
	        socket0.connect((MockSocketAddress) mockInetSocketAddress0, 3395);
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // already connected
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test18()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(3395);
	      socket0.bind(mockInetSocketAddress0);
	      try {
	        socket0.getInputStream();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is not connected
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test19()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      MockInetAddress.getLoopbackAddress();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1892);
	      Socket socket0 = new Socket(mockEnvironment0);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      mockEnvironment0.addToBlackList(mockInetSocketAddress0);
	      mockEnvironment0.pushIOException(true);
	      try {
	        socket0.getInputStream();
	        fail("Expecting exception: ClassCastException");

	      } catch(Exception e) {
	         //
	         // com.example.socket.MockIOException cannot be cast to java.io.IOException
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test20()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) null, 1);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket0.shutdownInput();
	      socket0.shutdownOutput();
	      socket0.close();
	      socket0.close();
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      Socket socket1 = new Socket(mockEnvironment0);
	     //assertFalse(socket1.equals((Object)socket0));
	  }

	  @Test(timeout = 4000)
	  public void test21()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      int int0 = (-1756);
	      socket0.shutdownOutput();
	      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress((-1756));
	      try {
	        socket0.bind(mockInetSocketAddress1);
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Already bound
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test22()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      Socket socket0 = new Socket(mockEnvironment0);
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("a", 724);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket0.getInputStream();
	      socket0.close();
	      boolean boolean0 = false;
	      mockEnvironment0.isBlackListed(mockInetSocketAddress0);
	      try {
	        socket0.shutdownOutput();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test23()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.anyLocalAddress();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 2760);
	      socket0.bind(mockInetSocketAddress0);
	      socket0.close();
	      socket0.close();
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      Socket socket1 = new Socket(mockEnvironment0);
	      mockEnvironment0.addToBlackList(mockInetSocketAddress0);
	      Socket socket2 = new Socket(mockEnvironment0);
	      socket2.close();
	      Socket socket3 = new Socket(mockEnvironment0);
	      socket1.close();
	      try {
	        socket2.shutdownOutput();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test24()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((String) null, 3113);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 3113);
	      socket0.close();
	      try {
	        socket0.getInputStream();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test25()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockSocketAddress mockSocketAddress0 = null;
	      socket0.bind((MockSocketAddress) null);
	      try {
	        socket0.shutdownOutput();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is not connected
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test26()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInet6Address mockInet6Address0 = new MockInet6Address("");
	      int int0 = 9;
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 9);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket0.shutdownOutput();
	      try {
	        socket0.shutdownOutput();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket output is already shutdown
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test27()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("qB$n.:oEq6u", 1);
	      socket0.bind(mockInetSocketAddress0);
	      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress((MockInetAddress) null, 1);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress1);
	      socket0.shutdownOutput();
	      try {
	        socket0.connect((MockSocketAddress) mockInetSocketAddress1, 1);
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // already connected
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test28()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.anyLocalAddress();
	      MockInetAddress.getLocalHost();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 65535);
	      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket0.getInputStream();
	      int int1 = socket0.shutdownOutput();
	      MockInetAddress.getLoopbackAddress();
	      socket0.getInputStream();
	      int int2 = socket0.shutdownInput();
	     //assertTrue(int2 == int0);

	      socket0.close();
	      socket0.close();
	      socket0.close();
	      int int3 = socket0.close();
	     //assertTrue(int3 == int1);
	     //assertEquals(0, int3);
	  }

	  @Test(timeout = 4000)
	  public void test29()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(3382);
	      socket0.bind(mockInetSocketAddress0);
	      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
	      try {
	        socket0.bind(mockInetSocketAddress0);
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Already bound
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test30()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      Socket socket0 = new Socket(mockEnvironment0);
	      mockEnvironment0.pushIOException(true);
	      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.anyLocalAddress();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 0);
	      int int0 = socket0.bind(mockInetSocketAddress0);
	      int int1 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	     //assertEquals(0, int1);

	      socket0.getInputStream();
	      socket0.getOutputStream();
	      socket0.getOutputStream();
	      int int2 = socket0.close();
	     //assertFalse(int2 == int0);
	     //assertEquals(0, int2);
	  }

	  @Test(timeout = 4000)
	  public void test31()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-7));
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket0.shutdownInput();
	      try {
	        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // already connected
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test32()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(326);
	      socket0.close();
	      socket0.close();
	      try {
	        socket0.bind(mockInetSocketAddress0);
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test33()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      Socket socket0 = new Socket(mockEnvironment0);
	      try {
	        socket0.getOutputStream();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is not connected
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test34()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1415);
	      socket0.bind(mockInetSocketAddress0);
	      MockInetAddress.getLoopbackAddress();
	      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress(1415);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress1);
	      socket0.close();
	      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
	      try {
	        socket0.shutdownInput();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test35()  throws Throwable  {
	      Socket socket0 = new Socket();
	      socket0.close();
	      Integer integer0 = new Integer(0);
	      socket0.close();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
	      try {
	        socket0.connect((MockSocketAddress) mockInetSocketAddress0, 256);
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test36()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      new MockEnvironment();
	      Socket socket0 = new Socket(mockEnvironment0);
	      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.anyLocalAddress();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      try {
	        socket0.bind(mockInetSocketAddress0);
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Already bound
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test37()  throws Throwable  {
	      int int0 = ObjectStreamConstants.baseWireHandle;
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      Socket socket0 = new Socket(mockEnvironment0);
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(8257536);
	      try {
	        socket0.bind(mockInetSocketAddress0);
	        fail("Expecting exception: IOException");

	      } catch(Exception e) {
	         //
	         // no message in exception (getMessage() returned null)
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test38()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      MockEnvironment mockEnvironment1 = new MockEnvironment();
	      mockEnvironment0.pushIOException(true);
	      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
	      MockInetAddress.anyLocalAddress();
	      MockInetAddress.getLocalHost();
	      MockInetAddress.getLoopbackAddress();
	      mockEnvironment0.isBlackListed((MockInetAddress) mockInet6Address0, (-741));
	      Socket socket0 = new Socket(mockEnvironment0);
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", (-741));
	      int int0 = socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket0.close();
	      socket0.close();
	      Socket socket1 = new Socket(mockEnvironment1);
	      socket1.close();
	      Socket socket2 = new Socket();
	      int int1 = socket1.close();
	     //assertFalse(int1 == int0);
	     //assertEquals(0, int1);
	  }

	  @Test(timeout = 4000)
	  public void test39()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      mockEnvironment0.pushIOException(true);
	      mockEnvironment0.pushIOException(false);
	      mockEnvironment0.shouldThrowIOException();
	      mockEnvironment0.pushIOException(false);
	      mockEnvironment0.pushIOException(true);
	      Socket socket0 = new Socket(mockEnvironment0);
	      MockInet4Address mockInet4Address0 = new MockInet4Address("1@^4BqFXDG\"R/h8=J");
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet4Address0, 974);
	      mockEnvironment0.setDelayToConnect(mockInetSocketAddress0, 974);
	      mockEnvironment0.shouldThrowIOException();
	      mockEnvironment0.pushIOException(true);
	      mockEnvironment0.setDelayToConnect(mockInetSocketAddress0, 3152);
	      mockEnvironment0.setDelayToConnect(mockInetSocketAddress0, 5081);
	      mockEnvironment0.pushIOException(true);
	      socket0.bind(mockInetSocketAddress0);
	      socket0.close();
	      Socket socket1 = new Socket(mockEnvironment0);
	      mockEnvironment0.pushIOException(true);
	      socket0.close();
	      socket0.bind(mockInetSocketAddress0);
	      socket0.close();
	      try {
	        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	       //  fail("Expecting exception: IOException");
	       // Unstable//assertion
	      } catch(Exception e) {
	         //
	         // no message in exception (getMessage() returned null)
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test40()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      mockEnvironment0.pushIOException(true);
	      mockEnvironment0.pushIOException(false);
	      mockEnvironment0.pushIOException(false);
	      mockEnvironment0.pushIOException(true);
	      Socket socket0 = new Socket(mockEnvironment0);
	      mockEnvironment0.shouldThrowIOException();
	      mockEnvironment0.pushIOException(true);
	      mockEnvironment0.pushIOException(true);
	      Socket socket1 = new Socket();
	      socket0.bind((MockSocketAddress) null);
	      socket1.close();
	      socket0.bind((MockSocketAddress) null);
	      socket0.close();
	      try {
	        socket1.connect((MockSocketAddress) null);
	        fail("Expecting exception: IllegalArgumentException");

	      } catch(Exception e) {
	         //
	         // connect: The address can't be null
	         //
	      }
	  }

	  @Test//(timeout = 4000)
	  public void test41()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      Socket socket0 = new Socket(mockEnvironment0);
	      socket0.close();
	      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
	      MockInetAddress.anyLocalAddress();
	      mockEnvironment0.pushIOException(true);
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1273);
	      Socket socket1 = new Socket(mockEnvironment0);
	      socket0.close();
	      socket1.bind(mockInetSocketAddress0);
//	      mockEnvironment0.pushIOException(true);
	      try {
	        socket1.connect((MockSocketAddress) mockInetSocketAddress0, (-1));
	        fail("Expecting exception: IllegalArgumentException");

	      } catch(Exception e) {
//	    	  e.printStackTrace();
	         //
	         // connect: timeout can't be negative
	         //
	      }
	  }
	  
	  @Test(timeout = 4000)
	  public void test()  throws Throwable  {
	  Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) null, (-1));
      try { 
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, (-2004));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(Exception e) {}
	  }

	  @Test(timeout = 4000)
	  public void test42()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      mockEnvironment0.pushIOException(true);
	      mockEnvironment0.pushIOException(true);
	      mockEnvironment0.pushIOException(true);
	      MockInet4Address mockInet4Address0 = new MockInet4Address("IN+h&");
	      mockEnvironment0.pushIOException(true);
	      MockInetAddress.getLoopbackAddress();
	      MockInet6Address mockInet6Address0 = new MockInet6Address("IN+h&");
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet4Address0, (-2860));
	      Socket socket0 = new Socket(mockEnvironment0);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      Socket socket1 = new Socket(mockEnvironment0);
	      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
	      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
	      socket1.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket1.close();
	      try {
	        socket0.shutdownInput();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is not connected
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test43()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      mockEnvironment0.pushIOException(true);
	      mockEnvironment0.pushIOException(true);
	      Socket socket0 = new Socket(mockEnvironment0);
	      mockEnvironment0.pushIOException(false);
	      MockInet4Address mockInet4Address0 = new MockInet4Address("IN+h&");
	      MockInetAddress.getLoopbackAddress();
	      MockInet6Address mockInet6Address0 = new MockInet6Address("IN+h&");
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet4Address0, (-2852));
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket0.close();
	      socket0.close();
	      Socket socket1 = new Socket(mockEnvironment0);
	      socket0.close();
	      socket1.close();
	      socket0.close();
	      socket1.close();
	      try {
	        socket0.shutdownInput();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test44()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      Socket socket0 = new Socket(mockEnvironment0);
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-1274));
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      int int0 = (-2601);
	      socket0.shutdownInput();
	      try {
	        socket0.shutdownInput();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket input is already shutdown
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test45()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetAddress mockInetAddress0 = new MockInetAddress("@%");
	      MockInetAddress.getLoopbackAddress();
	      MockInetAddress.anyLocalAddress();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(mockInetAddress0, 31);
	      MockInetAddress.getLoopbackAddress();
	      try {
	        socket0.bind(mockInetSocketAddress0);
	        fail("Expecting exception: IllegalArgumentException");

	      } catch(Exception e) {
	         //
	         // bind: invalid address type
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test46()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      Socket socket0 = new Socket(mockEnvironment0);
	      socket0.bind((MockSocketAddress) null);
	      socket0.close();
	      try {
	        socket0.bind((MockSocketAddress) null);
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test47()  throws Throwable  {
	      new MockEnvironment();
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      Socket socket0 = new Socket(mockEnvironment0);
	      socket0.bind((MockSocketAddress) null);
	      mockEnvironment0.pushIOException(true);
	      socket0.connect((MockSocketAddress) null, 867);
	      try {
	        socket0.bind((MockSocketAddress) null);
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Already bound
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test48()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      MockInetAddress.anyLocalAddress();
	      MockInetAddress.getLoopbackAddress();
	      Socket socket0 = new Socket(mockEnvironment0);
	      try {
	        socket0.shutdownOutput();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is not connected
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test49()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = null;
	      Socket socket0 = new Socket((MockEnvironment) null);
	      socket0.close();
	      socket0.close();
	      socket0.close();
	      Socket socket1 = new Socket((MockEnvironment) null);
	      Socket socket2 = new Socket((MockEnvironment) null);
	      socket1.close();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 0);
	      try {
	        socket2.bind(mockInetSocketAddress0);
	        fail("Expecting exception: NullPointerException");

	      } catch(Exception e) {
	         //
	         // no message in exception (getMessage() returned null)
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test50()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      Socket socket0 = new Socket(mockEnvironment0);
	      MockInet4Address mockInet4Address0 = new MockInet4Address("+\"");
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet4Address0, 1);
	      socket0.bind(mockInetSocketAddress0);
	      mockEnvironment0.shouldThrowIOException();
	      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress(">&;oyAQ", (-722));
	      try {
	        socket0.shutdownInput();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is not connected
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test51()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      Socket socket0 = new Socket(mockEnvironment0);
	      socket0.close();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
	      try {
	        socket0.bind(mockInetSocketAddress0);
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test52()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      MockInetAddress.getLocalHost();
	      MockInetAddress.getLoopbackAddress();
	      MockInetAddress.getLoopbackAddress();
	      mockEnvironment0.shouldThrowIOException();
	      Socket socket0 = new Socket();
	      socket0.close();
	      try {
	        socket0.shutdownInput();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test53()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLoopbackAddress();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 820);
	      socket0.bind(mockInetSocketAddress0);
	      MockInetAddress.getLoopbackAddress();
	      MockInetAddress.getLoopbackAddress();
	      try {
	        socket0.getOutputStream();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is not connected
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test54()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(253);
	      socket0.bind(mockInetSocketAddress0);
	      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress(5056);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress1, 5056);
	      socket0.getOutputStream();
	      socket0.getInputStream();
	      socket0.shutdownInput();
	      socket0.getOutputStream();
	      try {
	        socket0.getInputStream();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket input is shutdown
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test55()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(3395);
	      socket0.bind(mockInetSocketAddress0);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket0.getInputStream();
	      socket0.getInputStream();
	      try {
	        socket0.bind(mockInetSocketAddress0);
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Already bound
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test56()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket0.getInputStream();
	      socket0.getOutputStream();
	      socket0.shutdownInput();
	      Socket socket1 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress(0);
	      try {
	        socket0.bind(mockInetSocketAddress1);
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Already bound
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test57()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(724);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket0.getOutputStream();
	      socket0.shutdownOutput();
	      Integer integer0 = new Integer(0);
	      try {
	        socket0.getOutputStream();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket output is shutdown
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test58()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      Socket socket0 = new Socket(mockEnvironment0);
	      socket0.close();
	      try {
	        socket0.getInputStream();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test59()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) null, 1);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
	      socket0.shutdownOutput();
	      socket0.close();
	      socket0.close();
	      Socket socket1 = new Socket();
	      try {
	        socket0.getOutputStream();
	        fail("Expecting exception: SocketException");

	      } catch(Exception e) {
	         //
	         // Socket is closed
	         //
	      }
	  }

	  @Test(timeout = 4000)
	  public void test60()  throws Throwable  {
	      Socket socket0 = new Socket();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
	      socket0.bind(mockInetSocketAddress0);
	      Socket socket1 = new Socket();
	      socket1.connect((MockSocketAddress) mockInetSocketAddress0, 636);
	      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
	      socket1.getOutputStream();
	      socket0.shutdownInput();
	      try {
	        socket1.connect((MockSocketAddress) mockInetSocketAddress0, (-14));
	        fail("Expecting exception: IllegalArgumentException");

	      } catch(Exception e) {
	         //
	         // connect: timeout can't be negative
	         //
	      }
	  }
	  
	  @Test(timeout = 4000)
	  public void test47_e()  throws Throwable  {
	      MockEnvironment mockEnvironment0 = new MockEnvironment();
	      mockEnvironment0.pushIOException(true);
	      Socket socket0 = new Socket(mockEnvironment0);
	      MockInet4Address mockInet4Address0 = new MockInet4Address("61xtn");
	      new MockEnvironment();
	      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet4Address0, (-3372));
	      try {
	        socket0.connect((MockSocketAddress) mockInetSocketAddress0, (-392));
	        fail("Expecting exception: IllegalArgumentException");

	      } catch(Exception e) {
	         //
	         // connect: timeout can't be negative
	         //
	      }
	  }

}