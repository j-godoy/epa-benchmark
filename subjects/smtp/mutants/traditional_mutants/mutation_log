AORB_1:43:void_setSocket(com.example.smtp.MockServerSocket):10 * 1000 => 10 / 1000
AORB_2:43:void_setSocket(com.example.smtp.MockServerSocket):10 * 1000 => 10 % 1000
AORB_3:43:void_setSocket(com.example.smtp.MockServerSocket):10 * 1000 => 10 + 1000
AORB_4:43:void_setSocket(com.example.smtp.MockServerSocket):10 * 1000 => 10 - 1000
AORB_5:49:void_setSocket(com.example.smtp.MockServerSocket):10 * 1000 => 10 / 1000
AORB_6:49:void_setSocket(com.example.smtp.MockServerSocket):10 * 1000 => 10 % 1000
AORB_7:49:void_setSocket(com.example.smtp.MockServerSocket):10 * 1000 => 10 + 1000
AORB_8:49:void_setSocket(com.example.smtp.MockServerSocket):10 * 1000 => 10 - 1000
AORB_9:411:void_handleData():configurationManager.getMaximumMessageSize() * 1024 => configurationManager.getMaximumMessageSize() / 1024
AORB_10:411:void_handleData():configurationManager.getMaximumMessageSize() * 1024 => configurationManager.getMaximumMessageSize() % 1024
AORB_11:411:void_handleData():configurationManager.getMaximumMessageSize() * 1024 => configurationManager.getMaximumMessageSize() + 1024
AORB_12:411:void_handleData():configurationManager.getMaximumMessageSize() * 1024 => configurationManager.getMaximumMessageSize() - 1024
AORB_13:411:void_handleData():configurationManager.getMaximumMessageSize() * 1024 * 1024 => configurationManager.getMaximumMessageSize() * 1024 / 1024
AORB_14:411:void_handleData():configurationManager.getMaximumMessageSize() * 1024 * 1024 => configurationManager.getMaximumMessageSize() * 1024 % 1024
AORB_15:411:void_handleData():configurationManager.getMaximumMessageSize() * 1024 * 1024 => configurationManager.getMaximumMessageSize() * 1024 + 1024
AORB_16:411:void_handleData():configurationManager.getMaximumMessageSize() * 1024 * 1024 => configurationManager.getMaximumMessageSize() * 1024 - 1024
AORB_17:489:java.lang.String_parseArgument(java.lang.String):index + 1 => index * 1
AORB_18:489:java.lang.String_parseArgument(java.lang.String):index + 1 => index / 1
AORB_19:489:java.lang.String_parseArgument(java.lang.String):index + 1 => index % 1
AORB_20:489:java.lang.String_parseArgument(java.lang.String):index + 1 => index - 1
AORB_21:497:java.lang.String_parseAddress(java.lang.String):index + 1 => index * 1
AORB_22:497:java.lang.String_parseAddress(java.lang.String):index + 1 => index / 1
AORB_23:497:java.lang.String_parseAddress(java.lang.String):index + 1 => index % 1
AORB_24:497:java.lang.String_parseAddress(java.lang.String):index + 1 => index - 1
AORS_1:225:void_data0(java.lang.String):++i => i--
AORS_2:386:void_handleRcptTo(java.lang.String):index++ => index--
AOIU_1:36:SMTPProcessor():NONE => -NONE
AOIU_2:225:void_data0(java.lang.String):i => -i
AOIU_3:225:void_data0(java.lang.String):lines.length => -lines.length
AOIU_4:226:void_data0(java.lang.String):i => -i
AOIU_5:307:void_handleCommand():HELO => -HELO
AOIU_6:315:void_handleCommand():RSET => -RSET
AOIU_7:320:void_handleCommand():MAIL_FROM => -MAIL_FROM
AOIU_8:329:void_handleCommand():RCPT_TO => -RCPT_TO
AOIU_9:338:void_handleCommand():RSET => -RSET
AOIU_10:386:void_handleRcptTo(java.lang.String):index => -index
AOIU_11:386:void_handleRcptTo(java.lang.String):addresses.length => -addresses.length
AOIU_12:387:void_handleRcptTo(java.lang.String):index => -index
AOIU_13:423:void_handleData():maxSize => -maxSize
AOIU_14:472:java.lang.String_parseCommand(java.lang.String):index => -index
AOIU_15:477:java.lang.String_parseCommand(java.lang.String):index => -index
AOIU_16:486:java.lang.String_parseArgument(java.lang.String):index => -index
AOIU_17:489:java.lang.String_parseArgument(java.lang.String):index => -index
AOIU_18:496:java.lang.String_parseAddress(java.lang.String):index => -index
AOIU_19:497:java.lang.String_parseAddress(java.lang.String):index => -index
AOIU_20:500:java.lang.String_parseAddress(java.lang.String):index => -index
AOIU_21:501:java.lang.String_parseAddress(java.lang.String):index => -index
AOIS_1:36:SMTPProcessor():NONE => ++NONE
AOIS_2:36:SMTPProcessor():NONE => --NONE
AOIS_3:36:SMTPProcessor():NONE => NONE++
AOIS_4:36:SMTPProcessor():NONE => NONE--
AOIS_5:225:void_data0(java.lang.String):i => ++i
AOIS_6:225:void_data0(java.lang.String):i => --i
AOIS_7:225:void_data0(java.lang.String):i => i++
AOIS_8:225:void_data0(java.lang.String):i => i--
AOIS_9:225:void_data0(java.lang.String):lines.length => ++lines.length
AOIS_10:225:void_data0(java.lang.String):lines.length => --lines.length
AOIS_11:225:void_data0(java.lang.String):lines.length => lines.length++
AOIS_12:225:void_data0(java.lang.String):lines.length => lines.length--
AOIS_13:226:void_data0(java.lang.String):i => i++
AOIS_14:226:void_data0(java.lang.String):i => i--
AOIS_15:284:boolean_MAIL_pre():lastCommand => ++lastCommand
AOIS_16:284:boolean_MAIL_pre():lastCommand => --lastCommand
AOIS_17:284:boolean_MAIL_pre():lastCommand => lastCommand++
AOIS_18:284:boolean_MAIL_pre():lastCommand => lastCommand--
AOIS_19:284:boolean_MAIL_pre():HELO => ++HELO
AOIS_20:284:boolean_MAIL_pre():HELO => --HELO
AOIS_21:284:boolean_MAIL_pre():HELO => HELO++
AOIS_22:284:boolean_MAIL_pre():HELO => HELO--
AOIS_23:284:boolean_MAIL_pre():lastCommand => ++lastCommand
AOIS_24:284:boolean_MAIL_pre():lastCommand => --lastCommand
AOIS_25:284:boolean_MAIL_pre():lastCommand => lastCommand++
AOIS_26:284:boolean_MAIL_pre():lastCommand => lastCommand--
AOIS_27:284:boolean_MAIL_pre():NONE => ++NONE
AOIS_28:284:boolean_MAIL_pre():NONE => --NONE
AOIS_29:284:boolean_MAIL_pre():NONE => NONE++
AOIS_30:284:boolean_MAIL_pre():NONE => NONE--
AOIS_31:284:boolean_MAIL_pre():lastCommand => ++lastCommand
AOIS_32:284:boolean_MAIL_pre():lastCommand => --lastCommand
AOIS_33:284:boolean_MAIL_pre():lastCommand => lastCommand++
AOIS_34:284:boolean_MAIL_pre():lastCommand => lastCommand--
AOIS_35:284:boolean_MAIL_pre():RSET => ++RSET
AOIS_36:284:boolean_MAIL_pre():RSET => --RSET
AOIS_37:284:boolean_MAIL_pre():RSET => RSET++
AOIS_38:284:boolean_MAIL_pre():RSET => RSET--
AOIS_39:284:boolean_MAIL_pre():lastCommand => ++lastCommand
AOIS_40:284:boolean_MAIL_pre():lastCommand => --lastCommand
AOIS_41:284:boolean_MAIL_pre():lastCommand => lastCommand++
AOIS_42:284:boolean_MAIL_pre():lastCommand => lastCommand--
AOIS_43:284:boolean_MAIL_pre():EHLO => ++EHLO
AOIS_44:284:boolean_MAIL_pre():EHLO => --EHLO
AOIS_45:284:boolean_MAIL_pre():EHLO => EHLO++
AOIS_46:284:boolean_MAIL_pre():EHLO => EHLO--
AOIS_47:289:boolean_RCPT_TO_pre():lastCommand => ++lastCommand
AOIS_48:289:boolean_RCPT_TO_pre():lastCommand => --lastCommand
AOIS_49:289:boolean_RCPT_TO_pre():lastCommand => lastCommand++
AOIS_50:289:boolean_RCPT_TO_pre():lastCommand => lastCommand--
AOIS_51:289:boolean_RCPT_TO_pre():MAIL_FROM => ++MAIL_FROM
AOIS_52:289:boolean_RCPT_TO_pre():MAIL_FROM => --MAIL_FROM
AOIS_53:289:boolean_RCPT_TO_pre():MAIL_FROM => MAIL_FROM++
AOIS_54:289:boolean_RCPT_TO_pre():MAIL_FROM => MAIL_FROM--
AOIS_55:289:boolean_RCPT_TO_pre():lastCommand => ++lastCommand
AOIS_56:289:boolean_RCPT_TO_pre():lastCommand => --lastCommand
AOIS_57:289:boolean_RCPT_TO_pre():lastCommand => lastCommand++
AOIS_58:289:boolean_RCPT_TO_pre():lastCommand => lastCommand--
AOIS_59:289:boolean_RCPT_TO_pre():RCPT_TO => ++RCPT_TO
AOIS_60:289:boolean_RCPT_TO_pre():RCPT_TO => --RCPT_TO
AOIS_61:289:boolean_RCPT_TO_pre():RCPT_TO => RCPT_TO++
AOIS_62:289:boolean_RCPT_TO_pre():RCPT_TO => RCPT_TO--
AOIS_63:294:boolean_DATA_pre():lastCommand => ++lastCommand
AOIS_64:294:boolean_DATA_pre():lastCommand => --lastCommand
AOIS_65:294:boolean_DATA_pre():lastCommand => lastCommand++
AOIS_66:294:boolean_DATA_pre():lastCommand => lastCommand--
AOIS_67:294:boolean_DATA_pre():RCPT_TO => ++RCPT_TO
AOIS_68:294:boolean_DATA_pre():RCPT_TO => --RCPT_TO
AOIS_69:294:boolean_DATA_pre():RCPT_TO => RCPT_TO++
AOIS_70:294:boolean_DATA_pre():RCPT_TO => RCPT_TO--
AOIS_71:307:void_handleCommand():HELO => ++HELO
AOIS_72:307:void_handleCommand():HELO => --HELO
AOIS_73:307:void_handleCommand():HELO => HELO++
AOIS_74:307:void_handleCommand():HELO => HELO--
AOIS_75:315:void_handleCommand():RSET => ++RSET
AOIS_76:315:void_handleCommand():RSET => --RSET
AOIS_77:315:void_handleCommand():RSET => RSET++
AOIS_78:315:void_handleCommand():RSET => RSET--
AOIS_79:318:void_handleCommand():lastCommand => ++lastCommand
AOIS_80:318:void_handleCommand():lastCommand => --lastCommand
AOIS_81:318:void_handleCommand():lastCommand => lastCommand++
AOIS_82:318:void_handleCommand():lastCommand => lastCommand--
AOIS_83:318:void_handleCommand():HELO => ++HELO
AOIS_84:318:void_handleCommand():HELO => --HELO
AOIS_85:318:void_handleCommand():HELO => HELO++
AOIS_86:318:void_handleCommand():HELO => HELO--
AOIS_87:318:void_handleCommand():lastCommand => ++lastCommand
AOIS_88:318:void_handleCommand():lastCommand => --lastCommand
AOIS_89:318:void_handleCommand():lastCommand => lastCommand++
AOIS_90:318:void_handleCommand():lastCommand => lastCommand--
AOIS_91:318:void_handleCommand():NONE => ++NONE
AOIS_92:318:void_handleCommand():NONE => --NONE
AOIS_93:318:void_handleCommand():NONE => NONE++
AOIS_94:318:void_handleCommand():NONE => NONE--
AOIS_95:318:void_handleCommand():lastCommand => ++lastCommand
AOIS_96:318:void_handleCommand():lastCommand => --lastCommand
AOIS_97:318:void_handleCommand():lastCommand => lastCommand++
AOIS_98:318:void_handleCommand():lastCommand => lastCommand--
AOIS_99:318:void_handleCommand():RSET => ++RSET
AOIS_100:318:void_handleCommand():RSET => --RSET
AOIS_101:318:void_handleCommand():RSET => RSET++
AOIS_102:318:void_handleCommand():RSET => RSET--
AOIS_103:318:void_handleCommand():lastCommand => ++lastCommand
AOIS_104:318:void_handleCommand():lastCommand => --lastCommand
AOIS_105:318:void_handleCommand():lastCommand => lastCommand++
AOIS_106:318:void_handleCommand():lastCommand => lastCommand--
AOIS_107:318:void_handleCommand():EHLO => ++EHLO
AOIS_108:318:void_handleCommand():EHLO => --EHLO
AOIS_109:318:void_handleCommand():EHLO => EHLO++
AOIS_110:318:void_handleCommand():EHLO => EHLO--
AOIS_111:320:void_handleCommand():MAIL_FROM => ++MAIL_FROM
AOIS_112:320:void_handleCommand():MAIL_FROM => --MAIL_FROM
AOIS_113:320:void_handleCommand():MAIL_FROM => MAIL_FROM++
AOIS_114:320:void_handleCommand():MAIL_FROM => MAIL_FROM--
AOIS_115:327:void_handleCommand():lastCommand => ++lastCommand
AOIS_116:327:void_handleCommand():lastCommand => --lastCommand
AOIS_117:327:void_handleCommand():lastCommand => lastCommand++
AOIS_118:327:void_handleCommand():lastCommand => lastCommand--
AOIS_119:327:void_handleCommand():MAIL_FROM => ++MAIL_FROM
AOIS_120:327:void_handleCommand():MAIL_FROM => --MAIL_FROM
AOIS_121:327:void_handleCommand():MAIL_FROM => MAIL_FROM++
AOIS_122:327:void_handleCommand():MAIL_FROM => MAIL_FROM--
AOIS_123:327:void_handleCommand():lastCommand => ++lastCommand
AOIS_124:327:void_handleCommand():lastCommand => --lastCommand
AOIS_125:327:void_handleCommand():lastCommand => lastCommand++
AOIS_126:327:void_handleCommand():lastCommand => lastCommand--
AOIS_127:327:void_handleCommand():RCPT_TO => ++RCPT_TO
AOIS_128:327:void_handleCommand():RCPT_TO => --RCPT_TO
AOIS_129:327:void_handleCommand():RCPT_TO => RCPT_TO++
AOIS_130:327:void_handleCommand():RCPT_TO => RCPT_TO--
AOIS_131:329:void_handleCommand():RCPT_TO => ++RCPT_TO
AOIS_132:329:void_handleCommand():RCPT_TO => --RCPT_TO
AOIS_133:329:void_handleCommand():RCPT_TO => RCPT_TO++
AOIS_134:329:void_handleCommand():RCPT_TO => RCPT_TO--
AOIS_135:335:void_handleCommand():lastCommand => ++lastCommand
AOIS_136:335:void_handleCommand():lastCommand => --lastCommand
AOIS_137:335:void_handleCommand():lastCommand => lastCommand++
AOIS_138:335:void_handleCommand():lastCommand => lastCommand--
AOIS_139:335:void_handleCommand():RCPT_TO => ++RCPT_TO
AOIS_140:335:void_handleCommand():RCPT_TO => --RCPT_TO
AOIS_141:335:void_handleCommand():RCPT_TO => RCPT_TO++
AOIS_142:335:void_handleCommand():RCPT_TO => RCPT_TO--
AOIS_143:338:void_handleCommand():RSET => ++RSET
AOIS_144:338:void_handleCommand():RSET => --RSET
AOIS_145:338:void_handleCommand():RSET => RSET++
AOIS_146:338:void_handleCommand():RSET => RSET--
AOIS_147:386:void_handleRcptTo(java.lang.String):index => ++index
AOIS_148:386:void_handleRcptTo(java.lang.String):index => --index
AOIS_149:386:void_handleRcptTo(java.lang.String):index => index++
AOIS_150:386:void_handleRcptTo(java.lang.String):index => index--
AOIS_151:386:void_handleRcptTo(java.lang.String):addresses.length => ++addresses.length
AOIS_152:386:void_handleRcptTo(java.lang.String):addresses.length => --addresses.length
AOIS_153:386:void_handleRcptTo(java.lang.String):addresses.length => addresses.length++
AOIS_154:386:void_handleRcptTo(java.lang.String):addresses.length => addresses.length--
AOIS_155:387:void_handleRcptTo(java.lang.String):index => index++
AOIS_156:387:void_handleRcptTo(java.lang.String):index => index--
AOIS_157:423:void_handleData():maxSize => ++maxSize
AOIS_158:423:void_handleData():maxSize => --maxSize
AOIS_159:423:void_handleData():maxSize => maxSize++
AOIS_160:423:void_handleData():maxSize => maxSize--
AOIS_161:472:java.lang.String_parseCommand(java.lang.String):index => ++index
AOIS_162:472:java.lang.String_parseCommand(java.lang.String):index => --index
AOIS_163:472:java.lang.String_parseCommand(java.lang.String):index => index++
AOIS_164:472:java.lang.String_parseCommand(java.lang.String):index => index--
AOIS_165:477:java.lang.String_parseCommand(java.lang.String):index => index++
AOIS_166:477:java.lang.String_parseCommand(java.lang.String):index => index--
AOIS_167:486:java.lang.String_parseArgument(java.lang.String):index => ++index
AOIS_168:486:java.lang.String_parseArgument(java.lang.String):index => --index
AOIS_169:486:java.lang.String_parseArgument(java.lang.String):index => index++
AOIS_170:486:java.lang.String_parseArgument(java.lang.String):index => index--
AOIS_171:489:java.lang.String_parseArgument(java.lang.String):index => ++index
AOIS_172:489:java.lang.String_parseArgument(java.lang.String):index => --index
AOIS_173:489:java.lang.String_parseArgument(java.lang.String):index => index++
AOIS_174:489:java.lang.String_parseArgument(java.lang.String):index => index--
AOIS_175:496:java.lang.String_parseAddress(java.lang.String):index => ++index
AOIS_176:496:java.lang.String_parseAddress(java.lang.String):index => --index
AOIS_177:496:java.lang.String_parseAddress(java.lang.String):index => index++
AOIS_178:496:java.lang.String_parseAddress(java.lang.String):index => index--
AOIS_179:497:java.lang.String_parseAddress(java.lang.String):index => ++index
AOIS_180:497:java.lang.String_parseAddress(java.lang.String):index => --index
AOIS_181:497:java.lang.String_parseAddress(java.lang.String):index => index++
AOIS_182:497:java.lang.String_parseAddress(java.lang.String):index => index--
AOIS_183:500:java.lang.String_parseAddress(java.lang.String):index => ++index
AOIS_184:500:java.lang.String_parseAddress(java.lang.String):index => --index
AOIS_185:500:java.lang.String_parseAddress(java.lang.String):index => index++
AOIS_186:500:java.lang.String_parseAddress(java.lang.String):index => index--
AOIS_187:501:java.lang.String_parseAddress(java.lang.String):index => ++index
AOIS_188:501:java.lang.String_parseAddress(java.lang.String):index => --index
AOIS_189:501:java.lang.String_parseAddress(java.lang.String):index => index++
AOIS_190:501:java.lang.String_parseAddress(java.lang.String):index => index--
ROR_1:75:void_disconnect(): socket != null  =>   socket == null
ROR_2:225:void_data0(java.lang.String): i < lines.length  =>   i > lines.length
ROR_3:225:void_data0(java.lang.String): i < lines.length  =>   i >= lines.length
ROR_4:225:void_data0(java.lang.String): i < lines.length  =>   i <= lines.length
ROR_5:225:void_data0(java.lang.String): i < lines.length  =>   i == lines.length
ROR_6:225:void_data0(java.lang.String): i < lines.length  =>   i != lines.length
ROR_7:225:void_data0(java.lang.String): i < lines.length  =>   true
ROR_8:225:void_data0(java.lang.String): i < lines.length  =>   false
ROR_9:264:boolean_HELO_pre(): socket != null  =>   socket == null
ROR_10:269:boolean_NOOP_pre(): socket != null  =>   socket == null
ROR_11:274:boolean_RSET_pre(): socket != null  =>   socket == null
ROR_12:279:boolean_QUIT_pre(): socket != null  =>   socket == null
ROR_13:284:boolean_MAIL_pre(): socket != null  =>   socket == null
ROR_14:284:boolean_MAIL_pre(): lastCommand == HELO  =>   lastCommand > HELO
ROR_15:284:boolean_MAIL_pre(): lastCommand == HELO  =>   lastCommand >= HELO
ROR_16:284:boolean_MAIL_pre(): lastCommand == HELO  =>   lastCommand < HELO
ROR_17:284:boolean_MAIL_pre(): lastCommand == HELO  =>   lastCommand <= HELO
ROR_18:284:boolean_MAIL_pre(): lastCommand == HELO  =>   lastCommand != HELO
ROR_19:284:boolean_MAIL_pre(): lastCommand == HELO  =>   true
ROR_20:284:boolean_MAIL_pre(): lastCommand == HELO  =>   false
ROR_21:284:boolean_MAIL_pre(): lastCommand == NONE  =>   lastCommand > NONE
ROR_22:284:boolean_MAIL_pre(): lastCommand == NONE  =>   lastCommand >= NONE
ROR_23:284:boolean_MAIL_pre(): lastCommand == NONE  =>   lastCommand < NONE
ROR_24:284:boolean_MAIL_pre(): lastCommand == NONE  =>   lastCommand <= NONE
ROR_25:284:boolean_MAIL_pre(): lastCommand == NONE  =>   lastCommand != NONE
ROR_26:284:boolean_MAIL_pre(): lastCommand == NONE  =>   true
ROR_27:284:boolean_MAIL_pre(): lastCommand == NONE  =>   false
ROR_28:284:boolean_MAIL_pre(): lastCommand == RSET  =>   lastCommand > RSET
ROR_29:284:boolean_MAIL_pre(): lastCommand == RSET  =>   lastCommand >= RSET
ROR_30:284:boolean_MAIL_pre(): lastCommand == RSET  =>   lastCommand < RSET
ROR_31:284:boolean_MAIL_pre(): lastCommand == RSET  =>   lastCommand <= RSET
ROR_32:284:boolean_MAIL_pre(): lastCommand == RSET  =>   lastCommand != RSET
ROR_33:284:boolean_MAIL_pre(): lastCommand == RSET  =>   true
ROR_34:284:boolean_MAIL_pre(): lastCommand == RSET  =>   false
ROR_35:284:boolean_MAIL_pre(): lastCommand == EHLO  =>   lastCommand > EHLO
ROR_36:284:boolean_MAIL_pre(): lastCommand == EHLO  =>   lastCommand >= EHLO
ROR_37:284:boolean_MAIL_pre(): lastCommand == EHLO  =>   lastCommand < EHLO
ROR_38:284:boolean_MAIL_pre(): lastCommand == EHLO  =>   lastCommand <= EHLO
ROR_39:284:boolean_MAIL_pre(): lastCommand == EHLO  =>   lastCommand != EHLO
ROR_40:284:boolean_MAIL_pre(): lastCommand == EHLO  =>   true
ROR_41:284:boolean_MAIL_pre(): lastCommand == EHLO  =>   false
ROR_42:289:boolean_RCPT_TO_pre(): socket != null  =>   socket == null
ROR_43:289:boolean_RCPT_TO_pre(): lastCommand == MAIL_FROM  =>   lastCommand > MAIL_FROM
ROR_44:289:boolean_RCPT_TO_pre(): lastCommand == MAIL_FROM  =>   lastCommand >= MAIL_FROM
ROR_45:289:boolean_RCPT_TO_pre(): lastCommand == MAIL_FROM  =>   lastCommand < MAIL_FROM
ROR_46:289:boolean_RCPT_TO_pre(): lastCommand == MAIL_FROM  =>   lastCommand <= MAIL_FROM
ROR_47:289:boolean_RCPT_TO_pre(): lastCommand == MAIL_FROM  =>   lastCommand != MAIL_FROM
ROR_48:289:boolean_RCPT_TO_pre(): lastCommand == MAIL_FROM  =>   true
ROR_49:289:boolean_RCPT_TO_pre(): lastCommand == MAIL_FROM  =>   false
ROR_50:289:boolean_RCPT_TO_pre(): lastCommand == RCPT_TO  =>   lastCommand > RCPT_TO
ROR_51:289:boolean_RCPT_TO_pre(): lastCommand == RCPT_TO  =>   lastCommand >= RCPT_TO
ROR_52:289:boolean_RCPT_TO_pre(): lastCommand == RCPT_TO  =>   lastCommand < RCPT_TO
ROR_53:289:boolean_RCPT_TO_pre(): lastCommand == RCPT_TO  =>   lastCommand <= RCPT_TO
ROR_54:289:boolean_RCPT_TO_pre(): lastCommand == RCPT_TO  =>   lastCommand != RCPT_TO
ROR_55:289:boolean_RCPT_TO_pre(): lastCommand == RCPT_TO  =>   true
ROR_56:289:boolean_RCPT_TO_pre(): lastCommand == RCPT_TO  =>   false
ROR_57:294:boolean_DATA_pre(): socket != null  =>   socket == null
ROR_58:294:boolean_DATA_pre(): lastCommand == RCPT_TO  =>   lastCommand > RCPT_TO
ROR_59:294:boolean_DATA_pre(): lastCommand == RCPT_TO  =>   lastCommand >= RCPT_TO
ROR_60:294:boolean_DATA_pre(): lastCommand == RCPT_TO  =>   lastCommand < RCPT_TO
ROR_61:294:boolean_DATA_pre(): lastCommand == RCPT_TO  =>   lastCommand <= RCPT_TO
ROR_62:294:boolean_DATA_pre(): lastCommand == RCPT_TO  =>   lastCommand != RCPT_TO
ROR_63:294:boolean_DATA_pre(): lastCommand == RCPT_TO  =>   true
ROR_64:294:boolean_DATA_pre(): lastCommand == RCPT_TO  =>   false
ROR_65:294:boolean_DATA_pre(): message.getToAddresses().size() > 0  =>   message.getToAddresses().size() >= 0
ROR_66:294:boolean_DATA_pre(): message.getToAddresses().size() > 0  =>   message.getToAddresses().size() < 0
ROR_67:294:boolean_DATA_pre(): message.getToAddresses().size() > 0  =>   message.getToAddresses().size() <= 0
ROR_68:294:boolean_DATA_pre(): message.getToAddresses().size() > 0  =>   message.getToAddresses().size() == 0
ROR_69:294:boolean_DATA_pre(): message.getToAddresses().size() > 0  =>   message.getToAddresses().size() != 0
ROR_70:294:boolean_DATA_pre(): message.getToAddresses().size() > 0  =>   true
ROR_71:294:boolean_DATA_pre(): message.getToAddresses().size() > 0  =>   false
ROR_72:318:void_handleCommand(): lastCommand == HELO  =>   lastCommand > HELO
ROR_73:318:void_handleCommand(): lastCommand == HELO  =>   lastCommand >= HELO
ROR_74:318:void_handleCommand(): lastCommand == HELO  =>   lastCommand < HELO
ROR_75:318:void_handleCommand(): lastCommand == HELO  =>   lastCommand <= HELO
ROR_76:318:void_handleCommand(): lastCommand == HELO  =>   lastCommand != HELO
ROR_77:318:void_handleCommand(): lastCommand == HELO  =>   true
ROR_78:318:void_handleCommand(): lastCommand == HELO  =>   false
ROR_79:318:void_handleCommand(): lastCommand == NONE  =>   lastCommand > NONE
ROR_80:318:void_handleCommand(): lastCommand == NONE  =>   lastCommand >= NONE
ROR_81:318:void_handleCommand(): lastCommand == NONE  =>   lastCommand < NONE
ROR_82:318:void_handleCommand(): lastCommand == NONE  =>   lastCommand <= NONE
ROR_83:318:void_handleCommand(): lastCommand == NONE  =>   lastCommand != NONE
ROR_84:318:void_handleCommand(): lastCommand == NONE  =>   true
ROR_85:318:void_handleCommand(): lastCommand == NONE  =>   false
ROR_86:318:void_handleCommand(): lastCommand == RSET  =>   lastCommand > RSET
ROR_87:318:void_handleCommand(): lastCommand == RSET  =>   lastCommand >= RSET
ROR_88:318:void_handleCommand(): lastCommand == RSET  =>   lastCommand < RSET
ROR_89:318:void_handleCommand(): lastCommand == RSET  =>   lastCommand <= RSET
ROR_90:318:void_handleCommand(): lastCommand == RSET  =>   lastCommand != RSET
ROR_91:318:void_handleCommand(): lastCommand == RSET  =>   true
ROR_92:318:void_handleCommand(): lastCommand == RSET  =>   false
ROR_93:318:void_handleCommand(): lastCommand == EHLO  =>   lastCommand > EHLO
ROR_94:318:void_handleCommand(): lastCommand == EHLO  =>   lastCommand >= EHLO
ROR_95:318:void_handleCommand(): lastCommand == EHLO  =>   lastCommand < EHLO
ROR_96:318:void_handleCommand(): lastCommand == EHLO  =>   lastCommand <= EHLO
ROR_97:318:void_handleCommand(): lastCommand == EHLO  =>   lastCommand != EHLO
ROR_98:318:void_handleCommand(): lastCommand == EHLO  =>   true
ROR_99:318:void_handleCommand(): lastCommand == EHLO  =>   false
ROR_100:327:void_handleCommand(): lastCommand == MAIL_FROM  =>   lastCommand > MAIL_FROM
ROR_101:327:void_handleCommand(): lastCommand == MAIL_FROM  =>   lastCommand >= MAIL_FROM
ROR_102:327:void_handleCommand(): lastCommand == MAIL_FROM  =>   lastCommand < MAIL_FROM
ROR_103:327:void_handleCommand(): lastCommand == MAIL_FROM  =>   lastCommand <= MAIL_FROM
ROR_104:327:void_handleCommand(): lastCommand == MAIL_FROM  =>   lastCommand != MAIL_FROM
ROR_105:327:void_handleCommand(): lastCommand == MAIL_FROM  =>   true
ROR_106:327:void_handleCommand(): lastCommand == MAIL_FROM  =>   false
ROR_107:327:void_handleCommand(): lastCommand == RCPT_TO  =>   lastCommand > RCPT_TO
ROR_108:327:void_handleCommand(): lastCommand == RCPT_TO  =>   lastCommand >= RCPT_TO
ROR_109:327:void_handleCommand(): lastCommand == RCPT_TO  =>   lastCommand < RCPT_TO
ROR_110:327:void_handleCommand(): lastCommand == RCPT_TO  =>   lastCommand <= RCPT_TO
ROR_111:327:void_handleCommand(): lastCommand == RCPT_TO  =>   lastCommand != RCPT_TO
ROR_112:327:void_handleCommand(): lastCommand == RCPT_TO  =>   true
ROR_113:327:void_handleCommand(): lastCommand == RCPT_TO  =>   false
ROR_114:335:void_handleCommand(): lastCommand == RCPT_TO  =>   lastCommand > RCPT_TO
ROR_115:335:void_handleCommand(): lastCommand == RCPT_TO  =>   lastCommand >= RCPT_TO
ROR_116:335:void_handleCommand(): lastCommand == RCPT_TO  =>   lastCommand < RCPT_TO
ROR_117:335:void_handleCommand(): lastCommand == RCPT_TO  =>   lastCommand <= RCPT_TO
ROR_118:335:void_handleCommand(): lastCommand == RCPT_TO  =>   lastCommand != RCPT_TO
ROR_119:335:void_handleCommand(): lastCommand == RCPT_TO  =>   true
ROR_120:335:void_handleCommand(): lastCommand == RCPT_TO  =>   false
ROR_121:335:void_handleCommand(): message.getToAddresses().size() > 0  =>   message.getToAddresses().size() >= 0
ROR_122:335:void_handleCommand(): message.getToAddresses().size() > 0  =>   message.getToAddresses().size() < 0
ROR_123:335:void_handleCommand(): message.getToAddresses().size() > 0  =>   message.getToAddresses().size() <= 0
ROR_124:335:void_handleCommand(): message.getToAddresses().size() > 0  =>   message.getToAddresses().size() == 0
ROR_125:335:void_handleCommand(): message.getToAddresses().size() > 0  =>   message.getToAddresses().size() != 0
ROR_126:335:void_handleCommand(): message.getToAddresses().size() > 0  =>   true
ROR_127:335:void_handleCommand(): message.getToAddresses().size() > 0  =>   false
ROR_128:356:boolean_handleMailFrom(java.lang.String): fromAddress == null  =>   fromAddress != null
ROR_129:384:void_handleRcptTo(java.lang.String): localUser != null  =>   localUser == null
ROR_130:386:void_handleRcptTo(java.lang.String): index < addresses.length  =>   index > addresses.length
ROR_131:386:void_handleRcptTo(java.lang.String): index < addresses.length  =>   index >= addresses.length
ROR_132:386:void_handleRcptTo(java.lang.String): index < addresses.length  =>   index <= addresses.length
ROR_133:386:void_handleRcptTo(java.lang.String): index < addresses.length  =>   index == addresses.length
ROR_134:386:void_handleRcptTo(java.lang.String): index < addresses.length  =>   index != addresses.length
ROR_135:386:void_handleRcptTo(java.lang.String): index < addresses.length  =>   true
ROR_136:386:void_handleRcptTo(java.lang.String): index < addresses.length  =>   false
ROR_137:423:void_handleData(): message.getSize() > maxSize  =>   message.getSize() >= maxSize
ROR_138:423:void_handleData(): message.getSize() > maxSize  =>   message.getSize() < maxSize
ROR_139:423:void_handleData(): message.getSize() > maxSize  =>   message.getSize() <= maxSize
ROR_140:423:void_handleData(): message.getSize() > maxSize  =>   message.getSize() == maxSize
ROR_141:423:void_handleData(): message.getSize() > maxSize  =>   message.getSize() != maxSize
ROR_142:423:void_handleData(): message.getSize() > maxSize  =>   true
ROR_143:423:void_handleData(): message.getSize() > maxSize  =>   false
ROR_144:472:java.lang.String_parseCommand(java.lang.String): index == -1  =>   index > -1
ROR_145:472:java.lang.String_parseCommand(java.lang.String): index == -1  =>   index >= -1
ROR_146:472:java.lang.String_parseCommand(java.lang.String): index == -1  =>   index < -1
ROR_147:472:java.lang.String_parseCommand(java.lang.String): index == -1  =>   index <= -1
ROR_148:472:java.lang.String_parseCommand(java.lang.String): index == -1  =>   index != -1
ROR_149:472:java.lang.String_parseCommand(java.lang.String): index == -1  =>   true
ROR_150:472:java.lang.String_parseCommand(java.lang.String): index == -1  =>   false
ROR_151:486:java.lang.String_parseArgument(java.lang.String): index == -1  =>   index > -1
ROR_152:486:java.lang.String_parseArgument(java.lang.String): index == -1  =>   index >= -1
ROR_153:486:java.lang.String_parseArgument(java.lang.String): index == -1  =>   index < -1
ROR_154:486:java.lang.String_parseArgument(java.lang.String): index == -1  =>   index <= -1
ROR_155:486:java.lang.String_parseArgument(java.lang.String): index == -1  =>   index != -1
ROR_156:486:java.lang.String_parseArgument(java.lang.String): index == -1  =>   true
ROR_157:486:java.lang.String_parseArgument(java.lang.String): index == -1  =>   false
ROR_158:496:java.lang.String_parseAddress(java.lang.String): index != -1  =>   index > -1
ROR_159:496:java.lang.String_parseAddress(java.lang.String): index != -1  =>   index >= -1
ROR_160:496:java.lang.String_parseAddress(java.lang.String): index != -1  =>   index < -1
ROR_161:496:java.lang.String_parseAddress(java.lang.String): index != -1  =>   index <= -1
ROR_162:496:java.lang.String_parseAddress(java.lang.String): index != -1  =>   index == -1
ROR_163:496:java.lang.String_parseAddress(java.lang.String): index != -1  =>   true
ROR_164:496:java.lang.String_parseAddress(java.lang.String): index != -1  =>   false
ROR_165:500:java.lang.String_parseAddress(java.lang.String): index != -1  =>   index > -1
ROR_166:500:java.lang.String_parseAddress(java.lang.String): index != -1  =>   index >= -1
ROR_167:500:java.lang.String_parseAddress(java.lang.String): index != -1  =>   index < -1
ROR_168:500:java.lang.String_parseAddress(java.lang.String): index != -1  =>   index <= -1
ROR_169:500:java.lang.String_parseAddress(java.lang.String): index != -1  =>   index == -1
ROR_170:500:java.lang.String_parseAddress(java.lang.String): index != -1  =>   true
ROR_171:500:java.lang.String_parseAddress(java.lang.String): index != -1  =>   false
COR_1:264:boolean_HELO_pre(): socket != null && !socket.isClosed()  =>   socket != null || !socket.isClosed()
COR_2:264:boolean_HELO_pre(): socket != null && !socket.isClosed()  =>   socket != null ^ !socket.isClosed()
COR_3:269:boolean_NOOP_pre(): socket != null && !socket.isClosed()  =>   socket != null || !socket.isClosed()
COR_4:269:boolean_NOOP_pre(): socket != null && !socket.isClosed()  =>   socket != null ^ !socket.isClosed()
COR_5:274:boolean_RSET_pre(): socket != null && !socket.isClosed()  =>   socket != null || !socket.isClosed()
COR_6:274:boolean_RSET_pre(): socket != null && !socket.isClosed()  =>   socket != null ^ !socket.isClosed()
COR_7:279:boolean_QUIT_pre(): socket != null && !socket.isClosed()  =>   socket != null || !socket.isClosed()
COR_8:279:boolean_QUIT_pre(): socket != null && !socket.isClosed()  =>   socket != null ^ !socket.isClosed()
COR_9:284:boolean_MAIL_pre(): socket != null && !socket.isClosed()  =>   socket != null || !socket.isClosed()
COR_10:284:boolean_MAIL_pre(): socket != null && !socket.isClosed()  =>   socket != null ^ !socket.isClosed()
COR_11:284:boolean_MAIL_pre(): lastCommand == HELO || lastCommand == NONE  =>   lastCommand == HELO && lastCommand == NONE
COR_12:284:boolean_MAIL_pre(): lastCommand == HELO || lastCommand == NONE  =>   lastCommand == HELO ^ lastCommand == NONE
COR_13:284:boolean_MAIL_pre(): lastCommand == HELO || lastCommand == NONE || lastCommand == RSET  =>   (lastCommand == HELO || lastCommand == NONE) && lastCommand == RSET
COR_14:284:boolean_MAIL_pre(): lastCommand == HELO || lastCommand == NONE || lastCommand == RSET  =>   (lastCommand == HELO || lastCommand == NONE) ^ lastCommand == RSET
COR_15:284:boolean_MAIL_pre(): lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO  =>   (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET) && lastCommand == EHLO
COR_16:284:boolean_MAIL_pre(): lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO  =>   (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET) ^ lastCommand == EHLO
COR_17:284:boolean_MAIL_pre(): socket != null && !socket.isClosed() && (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO)  =>   socket != null && !socket.isClosed() || (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO)
COR_18:284:boolean_MAIL_pre(): socket != null && !socket.isClosed() && (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO)  =>   (socket != null && !socket.isClosed()) ^ (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO)
COR_19:289:boolean_RCPT_TO_pre(): socket != null && !socket.isClosed()  =>   socket != null || !socket.isClosed()
COR_20:289:boolean_RCPT_TO_pre(): socket != null && !socket.isClosed()  =>   socket != null ^ !socket.isClosed()
COR_21:289:boolean_RCPT_TO_pre(): lastCommand == MAIL_FROM || lastCommand == RCPT_TO  =>   lastCommand == MAIL_FROM && lastCommand == RCPT_TO
COR_22:289:boolean_RCPT_TO_pre(): lastCommand == MAIL_FROM || lastCommand == RCPT_TO  =>   lastCommand == MAIL_FROM ^ lastCommand == RCPT_TO
COR_23:289:boolean_RCPT_TO_pre(): socket != null && !socket.isClosed() && (lastCommand == MAIL_FROM || lastCommand == RCPT_TO)  =>   socket != null && !socket.isClosed() || (lastCommand == MAIL_FROM || lastCommand == RCPT_TO)
COR_24:289:boolean_RCPT_TO_pre(): socket != null && !socket.isClosed() && (lastCommand == MAIL_FROM || lastCommand == RCPT_TO)  =>   (socket != null && !socket.isClosed()) ^ (lastCommand == MAIL_FROM || lastCommand == RCPT_TO)
COR_25:294:boolean_DATA_pre(): socket != null && !socket.isClosed()  =>   socket != null || !socket.isClosed()
COR_26:294:boolean_DATA_pre(): socket != null && !socket.isClosed()  =>   socket != null ^ !socket.isClosed()
COR_27:294:boolean_DATA_pre(): lastCommand == RCPT_TO && message.getToAddresses().size() > 0  =>   lastCommand == RCPT_TO || message.getToAddresses().size() > 0
COR_28:294:boolean_DATA_pre(): lastCommand == RCPT_TO && message.getToAddresses().size() > 0  =>   lastCommand == RCPT_TO ^ message.getToAddresses().size() > 0
COR_29:294:boolean_DATA_pre(): socket != null && !socket.isClosed() && (lastCommand == RCPT_TO && message.getToAddresses().size() > 0)  =>   socket != null && !socket.isClosed() || lastCommand == RCPT_TO && message.getToAddresses().size() > 0
COR_30:294:boolean_DATA_pre(): socket != null && !socket.isClosed() && (lastCommand == RCPT_TO && message.getToAddresses().size() > 0)  =>   (socket != null && !socket.isClosed()) ^ (lastCommand == RCPT_TO && message.getToAddresses().size() > 0)
COR_31:317:void_handleCommand(): command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )  =>   command.equals( COMMAND_MAIL_FROM ) || inputString.toUpperCase().startsWith( \"MAIL FROM:\" )
COR_32:317:void_handleCommand(): command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )  =>   command.equals( COMMAND_MAIL_FROM ) ^ inputString.toUpperCase().startsWith( \"MAIL FROM:\" )
COR_33:318:void_handleCommand(): lastCommand == HELO || lastCommand == NONE  =>   lastCommand == HELO && lastCommand == NONE
COR_34:318:void_handleCommand(): lastCommand == HELO || lastCommand == NONE  =>   lastCommand == HELO ^ lastCommand == NONE
COR_35:318:void_handleCommand(): lastCommand == HELO || lastCommand == NONE || lastCommand == RSET  =>   (lastCommand == HELO || lastCommand == NONE) && lastCommand == RSET
COR_36:318:void_handleCommand(): lastCommand == HELO || lastCommand == NONE || lastCommand == RSET  =>   (lastCommand == HELO || lastCommand == NONE) ^ lastCommand == RSET
COR_37:318:void_handleCommand(): lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO  =>   (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET) && lastCommand == EHLO
COR_38:318:void_handleCommand(): lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO  =>   (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET) ^ lastCommand == EHLO
COR_39:326:void_handleCommand(): command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )  =>   command.equals( COMMAND_RCPT_TO ) || inputString.toUpperCase().startsWith( \"RCPT TO:\" )
COR_40:326:void_handleCommand(): command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )  =>   command.equals( COMMAND_RCPT_TO ) ^ inputString.toUpperCase().startsWith( \"RCPT TO:\" )
COR_41:327:void_handleCommand(): lastCommand == MAIL_FROM || lastCommand == RCPT_TO  =>   lastCommand == MAIL_FROM && lastCommand == RCPT_TO
COR_42:327:void_handleCommand(): lastCommand == MAIL_FROM || lastCommand == RCPT_TO  =>   lastCommand == MAIL_FROM ^ lastCommand == RCPT_TO
COR_43:335:void_handleCommand(): lastCommand == RCPT_TO && message.getToAddresses().size() > 0  =>   lastCommand == RCPT_TO || message.getToAddresses().size() > 0
COR_44:335:void_handleCommand(): lastCommand == RCPT_TO && message.getToAddresses().size() > 0  =>   lastCommand == RCPT_TO ^ message.getToAddresses().size() > 0
COR_45:356:boolean_handleMailFrom(java.lang.String): fromAddress == null || fromAddress.trim().equals( \"\" )  =>   fromAddress == null && fromAddress.trim().equals( \"\" )
COR_46:356:boolean_handleMailFrom(java.lang.String): fromAddress == null || fromAddress.trim().equals( \"\" )  =>   fromAddress == null ^ fromAddress.trim().equals( \"\" )
COD_1:120:void_helo0(java.lang.String):!HELO_pre() => HELO_pre()
COD_2:140:void_noop0():!NOOP_pre() => NOOP_pre()
COD_3:160:void_rset0():!RSET_pre() => RSET_pre()
COD_4:180:void_mail0(java.lang.String):!MAIL_pre() => MAIL_pre()
COD_5:200:void_rcptTo0(java.lang.String):!RCPT_TO_pre() => RCPT_TO_pre()
COD_6:220:void_data0(java.lang.String):!DATA_pre() => DATA_pre()
COD_7:255:void_quit0():!QUIT_pre() => QUIT_pre()
COD_8:264:boolean_HELO_pre():!socket.isClosed() => socket.isClosed()
COD_9:269:boolean_NOOP_pre():!socket.isClosed() => socket.isClosed()
COD_10:274:boolean_RSET_pre():!socket.isClosed() => socket.isClosed()
COD_11:279:boolean_QUIT_pre():!socket.isClosed() => socket.isClosed()
COD_12:284:boolean_MAIL_pre():!socket.isClosed() => socket.isClosed()
COD_13:289:boolean_RCPT_TO_pre():!socket.isClosed() => socket.isClosed()
COD_14:294:boolean_DATA_pre():!socket.isClosed() => socket.isClosed()
COD_15:417:void_handleData():!inputString.equals( "." ) => inputString.equals( "." )
COI_1:75:void_disconnect(): socket != null  =>  !(socket != null)
COI_2:96:void_shutdown(): running  =>  !running
COI_3:225:void_data0(java.lang.String): i < lines.length  =>  !(i < lines.length)
COI_4:264:boolean_HELO_pre(): socket != null  =>  !(socket != null)
COI_5:264:boolean_HELO_pre(): socket != null && !socket.isClosed()  =>  !(socket != null && !socket.isClosed())
COI_6:269:boolean_NOOP_pre(): socket != null  =>  !(socket != null)
COI_7:269:boolean_NOOP_pre(): socket != null && !socket.isClosed()  =>  !(socket != null && !socket.isClosed())
COI_8:274:boolean_RSET_pre(): socket != null  =>  !(socket != null)
COI_9:274:boolean_RSET_pre(): socket != null && !socket.isClosed()  =>  !(socket != null && !socket.isClosed())
COI_10:279:boolean_QUIT_pre(): socket != null  =>  !(socket != null)
COI_11:279:boolean_QUIT_pre(): socket != null && !socket.isClosed()  =>  !(socket != null && !socket.isClosed())
COI_12:284:boolean_MAIL_pre(): socket != null  =>  !(socket != null)
COI_13:284:boolean_MAIL_pre(): socket != null && !socket.isClosed()  =>  !(socket != null && !socket.isClosed())
COI_14:284:boolean_MAIL_pre(): lastCommand == HELO  =>  !(lastCommand == HELO)
COI_15:284:boolean_MAIL_pre(): lastCommand == NONE  =>  !(lastCommand == NONE)
COI_16:284:boolean_MAIL_pre(): lastCommand == HELO || lastCommand == NONE  =>  !(lastCommand == HELO || lastCommand == NONE)
COI_17:284:boolean_MAIL_pre(): lastCommand == RSET  =>  !(lastCommand == RSET)
COI_18:284:boolean_MAIL_pre(): lastCommand == HELO || lastCommand == NONE || lastCommand == RSET  =>  !(lastCommand == HELO || lastCommand == NONE || lastCommand == RSET)
COI_19:284:boolean_MAIL_pre(): lastCommand == EHLO  =>  !(lastCommand == EHLO)
COI_20:284:boolean_MAIL_pre(): lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO  =>  !(lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO)
COI_21:284:boolean_MAIL_pre(): socket != null && !socket.isClosed() && (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO)  =>  !(socket != null && !socket.isClosed() && (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO))
COI_22:289:boolean_RCPT_TO_pre(): socket != null  =>  !(socket != null)
COI_23:289:boolean_RCPT_TO_pre(): socket != null && !socket.isClosed()  =>  !(socket != null && !socket.isClosed())
COI_24:289:boolean_RCPT_TO_pre(): lastCommand == MAIL_FROM  =>  !(lastCommand == MAIL_FROM)
COI_25:289:boolean_RCPT_TO_pre(): lastCommand == RCPT_TO  =>  !(lastCommand == RCPT_TO)
COI_26:289:boolean_RCPT_TO_pre(): lastCommand == MAIL_FROM || lastCommand == RCPT_TO  =>  !(lastCommand == MAIL_FROM || lastCommand == RCPT_TO)
COI_27:289:boolean_RCPT_TO_pre(): socket != null && !socket.isClosed() && (lastCommand == MAIL_FROM || lastCommand == RCPT_TO)  =>  !(socket != null && !socket.isClosed() && (lastCommand == MAIL_FROM || lastCommand == RCPT_TO))
COI_28:294:boolean_DATA_pre(): socket != null  =>  !(socket != null)
COI_29:294:boolean_DATA_pre(): socket != null && !socket.isClosed()  =>  !(socket != null && !socket.isClosed())
COI_30:294:boolean_DATA_pre(): lastCommand == RCPT_TO  =>  !(lastCommand == RCPT_TO)
COI_31:294:boolean_DATA_pre(): message.getToAddresses().size() > 0  =>  !(message.getToAddresses().size() > 0)
COI_32:294:boolean_DATA_pre(): lastCommand == RCPT_TO && message.getToAddresses().size() > 0  =>  !(lastCommand == RCPT_TO && message.getToAddresses().size() > 0)
COI_33:294:boolean_DATA_pre(): socket != null && !socket.isClosed() && (lastCommand == RCPT_TO && message.getToAddresses().size() > 0)  =>  !(socket != null && !socket.isClosed() && (lastCommand == RCPT_TO && message.getToAddresses().size() > 0))
COI_34:317:void_handleCommand(): command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )  =>  !(command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( "MAIL FROM:" ))
COI_35:318:void_handleCommand(): lastCommand == HELO  =>  !(lastCommand == HELO)
COI_36:318:void_handleCommand(): lastCommand == NONE  =>  !(lastCommand == NONE)
COI_37:318:void_handleCommand(): lastCommand == HELO || lastCommand == NONE  =>  !(lastCommand == HELO || lastCommand == NONE)
COI_38:318:void_handleCommand(): lastCommand == RSET  =>  !(lastCommand == RSET)
COI_39:318:void_handleCommand(): lastCommand == HELO || lastCommand == NONE || lastCommand == RSET  =>  !(lastCommand == HELO || lastCommand == NONE || lastCommand == RSET)
COI_40:318:void_handleCommand(): lastCommand == EHLO  =>  !(lastCommand == EHLO)
COI_41:318:void_handleCommand(): lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO  =>  !(lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO)
COI_42:326:void_handleCommand(): command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )  =>  !(command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( "RCPT TO:" ))
COI_43:327:void_handleCommand(): lastCommand == MAIL_FROM  =>  !(lastCommand == MAIL_FROM)
COI_44:327:void_handleCommand(): lastCommand == RCPT_TO  =>  !(lastCommand == RCPT_TO)
COI_45:327:void_handleCommand(): lastCommand == MAIL_FROM || lastCommand == RCPT_TO  =>  !(lastCommand == MAIL_FROM || lastCommand == RCPT_TO)
COI_46:335:void_handleCommand(): lastCommand == RCPT_TO  =>  !(lastCommand == RCPT_TO)
COI_47:335:void_handleCommand(): message.getToAddresses().size() > 0  =>  !(message.getToAddresses().size() > 0)
COI_48:335:void_handleCommand(): lastCommand == RCPT_TO && message.getToAddresses().size() > 0  =>  !(lastCommand == RCPT_TO && message.getToAddresses().size() > 0)
COI_49:356:boolean_handleMailFrom(java.lang.String): fromAddress == null  =>  !(fromAddress == null)
COI_50:356:boolean_handleMailFrom(java.lang.String): fromAddress == null || fromAddress.trim().equals( \"\" )  =>  !(fromAddress == null || fromAddress.trim().equals( "" ))
COI_51:384:void_handleRcptTo(java.lang.String): localUser != null  =>  !(localUser != null)
COI_52:386:void_handleRcptTo(java.lang.String): index < addresses.length  =>  !(index < addresses.length)
COI_53:423:void_handleData(): message.getSize() > maxSize  =>  !(message.getSize() > maxSize)
COI_54:472:java.lang.String_parseCommand(java.lang.String): index == -1  =>  !(index == -1)
COI_55:486:java.lang.String_parseArgument(java.lang.String): index == -1  =>  !(index == -1)
COI_56:496:java.lang.String_parseAddress(java.lang.String): index != -1  =>  !(index != -1)
COI_57:500:java.lang.String_parseAddress(java.lang.String): index != -1  =>  !(index != -1)
LOI_1:36:SMTPProcessor():NONE => ~NONE
LOI_2:225:void_data0(java.lang.String):i => ~i
LOI_3:225:void_data0(java.lang.String):lines.length => ~lines.length
LOI_4:225:void_data0(java.lang.String):i => ~i
LOI_5:226:void_data0(java.lang.String):i => ~i
LOI_6:284:boolean_MAIL_pre():lastCommand => ~lastCommand
LOI_7:284:boolean_MAIL_pre():HELO => ~HELO
LOI_8:284:boolean_MAIL_pre():lastCommand => ~lastCommand
LOI_9:284:boolean_MAIL_pre():NONE => ~NONE
LOI_10:284:boolean_MAIL_pre():lastCommand => ~lastCommand
LOI_11:284:boolean_MAIL_pre():RSET => ~RSET
LOI_12:284:boolean_MAIL_pre():lastCommand => ~lastCommand
LOI_13:284:boolean_MAIL_pre():EHLO => ~EHLO
LOI_14:289:boolean_RCPT_TO_pre():lastCommand => ~lastCommand
LOI_15:289:boolean_RCPT_TO_pre():MAIL_FROM => ~MAIL_FROM
LOI_16:289:boolean_RCPT_TO_pre():lastCommand => ~lastCommand
LOI_17:289:boolean_RCPT_TO_pre():RCPT_TO => ~RCPT_TO
LOI_18:294:boolean_DATA_pre():lastCommand => ~lastCommand
LOI_19:294:boolean_DATA_pre():RCPT_TO => ~RCPT_TO
LOI_20:307:void_handleCommand():HELO => ~HELO
LOI_21:315:void_handleCommand():RSET => ~RSET
LOI_22:318:void_handleCommand():lastCommand => ~lastCommand
LOI_23:318:void_handleCommand():HELO => ~HELO
LOI_24:318:void_handleCommand():lastCommand => ~lastCommand
LOI_25:318:void_handleCommand():NONE => ~NONE
LOI_26:318:void_handleCommand():lastCommand => ~lastCommand
LOI_27:318:void_handleCommand():RSET => ~RSET
LOI_28:318:void_handleCommand():lastCommand => ~lastCommand
LOI_29:318:void_handleCommand():EHLO => ~EHLO
LOI_30:320:void_handleCommand():MAIL_FROM => ~MAIL_FROM
LOI_31:327:void_handleCommand():lastCommand => ~lastCommand
LOI_32:327:void_handleCommand():MAIL_FROM => ~MAIL_FROM
LOI_33:327:void_handleCommand():lastCommand => ~lastCommand
LOI_34:327:void_handleCommand():RCPT_TO => ~RCPT_TO
LOI_35:329:void_handleCommand():RCPT_TO => ~RCPT_TO
LOI_36:335:void_handleCommand():lastCommand => ~lastCommand
LOI_37:335:void_handleCommand():RCPT_TO => ~RCPT_TO
LOI_38:338:void_handleCommand():RSET => ~RSET
LOI_39:386:void_handleRcptTo(java.lang.String):index => ~index
LOI_40:386:void_handleRcptTo(java.lang.String):addresses.length => ~addresses.length
LOI_41:386:void_handleRcptTo(java.lang.String):index => ~index
LOI_42:387:void_handleRcptTo(java.lang.String):index => ~index
LOI_43:423:void_handleData():maxSize => ~maxSize
LOI_44:472:java.lang.String_parseCommand(java.lang.String):index => ~index
LOI_45:477:java.lang.String_parseCommand(java.lang.String):index => ~index
LOI_46:486:java.lang.String_parseArgument(java.lang.String):index => ~index
LOI_47:489:java.lang.String_parseArgument(java.lang.String):index => ~index
LOI_48:496:java.lang.String_parseAddress(java.lang.String):index => ~index
LOI_49:497:java.lang.String_parseAddress(java.lang.String):index => ~index
LOI_50:500:java.lang.String_parseAddress(java.lang.String):index => ~index
LOI_51:501:java.lang.String_parseAddress(java.lang.String):index => ~index
SDL_1:36:SMTPProcessor(): this.setSocket( new com.example.smtp.MockServerSocket() ); this.lastCommand = NONE;  =>   this.lastCommand = NONE;
SDL_2:36:SMTPProcessor(): this.setSocket( new com.example.smtp.MockServerSocket() ); this.lastCommand = NONE;  =>   this.setSocket( new com.example.smtp.MockServerSocket() );
SDL_3:63:void_setSocket(com.example.smtp.MockServerSocket): this.serverSocket = serverSocket; try {     serverSocket.setSoTimeout( 10 * 1000 ); } catch ( com.example.smtp.MockSocketException se ) {     log.fatal( \"Error initializing Socket Timeout in SMTPProcessor\" ); } try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     serverSocket.setSoTimeout( 10 * 1000 ); } catch ( com.example.smtp.MockSocketException se ) {     log.fatal( \"Error initializing Socket Timeout in SMTPProcessor\" ); } try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }
SDL_4:44:void_setSocket(com.example.smtp.MockServerSocket): try {     serverSocket.setSoTimeout( 10 * 1000 ); } catch ( com.example.smtp.MockSocketException se ) {     log.fatal( \"Error initializing Socket Timeout in SMTPProcessor\" ); }  =>   try { }
SDL_5:62:void_setSocket(com.example.smtp.MockServerSocket): try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }
SDL_6:62:void_setSocket(com.example.smtp.MockServerSocket): try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     socket = serverSocket.accept();     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }
SDL_7:62:void_setSocket(com.example.smtp.MockServerSocket): try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }
SDL_8:62:void_setSocket(com.example.smtp.MockServerSocket): try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }
SDL_9:62:void_setSocket(com.example.smtp.MockServerSocket): try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }
SDL_10:60:void_setSocket(com.example.smtp.MockServerSocket): try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }
SDL_11:62:void_setSocket(com.example.smtp.MockServerSocket): try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     message = new com.example.smtp.MockSMTPMessage(); } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }
SDL_12:62:void_setSocket(com.example.smtp.MockServerSocket): try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE ); } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }
SDL_13:55:void_setSocket(com.example.smtp.MockServerSocket): log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );  =>  
SDL_14:57:void_setSocket(com.example.smtp.MockServerSocket): if (log.isInfoEnabled()) {     log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" ); }  =>   if (true) {     log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" ); }
SDL_15:60:void_setSocket(com.example.smtp.MockServerSocket): try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { }
SDL_16:60:void_setSocket(com.example.smtp.MockServerSocket): try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     socket = serverSocket.accept();     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { }
SDL_17:60:void_setSocket(com.example.smtp.MockServerSocket): try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { }
SDL_18:60:void_setSocket(com.example.smtp.MockServerSocket): try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { }
SDL_19:60:void_setSocket(com.example.smtp.MockServerSocket): try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { }
SDL_20:58:void_setSocket(com.example.smtp.MockServerSocket): try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { }
SDL_21:60:void_setSocket(com.example.smtp.MockServerSocket): try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { }
SDL_22:60:void_setSocket(com.example.smtp.MockServerSocket): try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE );     message = new com.example.smtp.MockSMTPMessage(); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try {     socket = serverSocket.accept();     socket.setSoTimeout( 10 * 1000 );     out = new com.example.smtp.MockPrintWriter( socket.getOutputStream(), true );     in = new com.example.smtp.MockBufferedReader( new com.example.smtp.MockInputStreamReader( socket.getInputStream() ) );     com.example.smtp.MockInetAddress remoteAddress = socket.getInetAddress();     clientIp = remoteAddress.getHostAddress();     if (log.isInfoEnabled()) {         log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );     }     write( WELCOME_MESSAGE ); } catch ( com.example.smtp.MockInterruptedIOException iioe ) { }
SDL_23:55:void_setSocket(com.example.smtp.MockServerSocket): log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" );  =>  
SDL_24:57:void_setSocket(com.example.smtp.MockServerSocket): if (log.isInfoEnabled()) {     log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" ); }  =>   if (true) {     log.info( remoteAddress.getHostName() + \"(\" + clientIp + \") socket connected via SMTP.\" ); }
SDL_25:80:void_disconnect(): log.info( \"Disconnecting\" ); try {     write( MESSAGE_DISCONNECT ); } catch ( java.lang.Exception e1 ) {     log.debug( \"Error sending disconnect message.\", e1 ); } try {     if (socket != null) {         socket.close();     } } catch ( com.example.smtp.MockIOException ioe ) {     log.debug( \"Error disconnecting.\", ioe ); }  =>   try {     write( MESSAGE_DISCONNECT ); } catch ( java.lang.Exception e1 ) {     log.debug( \"Error sending disconnect message.\", e1 ); } try {     if (socket != null) {         socket.close();     } } catch ( com.example.smtp.MockIOException ioe ) {     log.debug( \"Error disconnecting.\", ioe ); }
SDL_26:71:void_disconnect(): try {     write( MESSAGE_DISCONNECT ); } catch ( java.lang.Exception e1 ) {     log.debug( \"Error sending disconnect message.\", e1 ); }  =>   try { }
SDL_27:76:void_disconnect(): try {     if (socket != null) {         socket.close();     } } catch ( com.example.smtp.MockIOException ioe ) {     log.debug( \"Error disconnecting.\", ioe ); }  =>   try { }
SDL_28:76:void_disconnect(): socket.close();  =>  
SDL_29:78:void_disconnect(): if (socket != null) {     socket.close(); }  =>   if (true) {     socket.close(); }
SDL_30:87:void_run(): try {     handleCommand(); } catch ( java.lang.Throwable e ) {     log.debug( \"Disconnecting Exception:\", e );     disconnect(); }  =>   try { }
SDL_31:96:void_shutdown(): log.warn( \"Shutting down SMTPProcessor.\" ); running = false;  =>   running = false;
SDL_32:96:void_shutdown(): log.warn( \"Shutting down SMTPProcessor.\" ); running = false;  =>   log.warn( \"Shutting down SMTPProcessor.\" );
SDL_33:101:void_checkQuit(java.lang.String): if (command.equals( COMMAND_QUIT )) {     log.debug( \"User has QUIT the session.\" );     throw new java.lang.RuntimeException(); }  =>  
SDL_34:103:void_checkQuit(java.lang.String): log.debug( \"User has QUIT the session.\" ); throw new java.lang.RuntimeException();  =>   throw new java.lang.RuntimeException();
SDL_35:103:void_checkQuit(java.lang.String): log.debug( \"User has QUIT the session.\" ); throw new java.lang.RuntimeException();  =>   log.debug( \"User has QUIT the session.\" );
SDL_36:105:void_checkQuit(java.lang.String): if (command.equals( COMMAND_QUIT )) {     log.debug( \"User has QUIT the session.\" );     throw new java.lang.RuntimeException(); }  =>   if (true) {     log.debug( \"User has QUIT the session.\" );     throw new java.lang.RuntimeException(); }
SDL_37:112:void_HELO(java.lang.String): try {     helo0( argument ); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_38:122:void_helo0(java.lang.String): if (!HELO_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_HELO + \" \" + argument ); run();  =>   enqueueLineToInputStream( COMMAND_HELO + \" \" + argument ); run();
SDL_39:124:void_helo0(java.lang.String): if (!HELO_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_HELO + \" \" + argument ); run();  =>   if (!HELO_pre()) {     throw new java.lang.IllegalStateException(); } run();
SDL_40:124:void_helo0(java.lang.String): if (!HELO_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_HELO + \" \" + argument ); run();  =>   if (!HELO_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_HELO + \" \" + argument );
SDL_41:121:void_helo0(java.lang.String): throw new java.lang.IllegalStateException();  =>  
SDL_42:123:void_helo0(java.lang.String): if (!HELO_pre()) {     throw new java.lang.IllegalStateException(); }  =>   if (true) {     throw new java.lang.IllegalStateException(); }
SDL_43:132:void_NOOP(): try {     noop0(); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_44:142:void_noop0(): if (!NOOP_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_NOOP ); run();  =>   enqueueLineToInputStream( COMMAND_NOOP ); run();
SDL_45:144:void_noop0(): if (!NOOP_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_NOOP ); run();  =>   if (!NOOP_pre()) {     throw new java.lang.IllegalStateException(); } run();
SDL_46:144:void_noop0(): if (!NOOP_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_NOOP ); run();  =>   if (!NOOP_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_NOOP );
SDL_47:141:void_noop0(): throw new java.lang.IllegalStateException();  =>  
SDL_48:143:void_noop0(): if (!NOOP_pre()) {     throw new java.lang.IllegalStateException(); }  =>   if (true) {     throw new java.lang.IllegalStateException(); }
SDL_49:152:void_RSET(): try {     rset0(); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_50:162:void_rset0(): if (!RSET_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_RSET ); run();  =>   enqueueLineToInputStream( COMMAND_RSET ); run();
SDL_51:164:void_rset0(): if (!RSET_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_RSET ); run();  =>   if (!RSET_pre()) {     throw new java.lang.IllegalStateException(); } run();
SDL_52:164:void_rset0(): if (!RSET_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_RSET ); run();  =>   if (!RSET_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_RSET );
SDL_53:161:void_rset0(): throw new java.lang.IllegalStateException();  =>  
SDL_54:163:void_rset0(): if (!RSET_pre()) {     throw new java.lang.IllegalStateException(); }  =>   if (true) {     throw new java.lang.IllegalStateException(); }
SDL_55:172:void_MAIL(java.lang.String): try {     mail0( emailAddress ); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_56:182:void_mail0(java.lang.String): if (!MAIL_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_MAIL_FROM + \" FROM:\" + emailAddress ); run();  =>   enqueueLineToInputStream( COMMAND_MAIL_FROM + \" FROM:\" + emailAddress ); run();
SDL_57:184:void_mail0(java.lang.String): if (!MAIL_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_MAIL_FROM + \" FROM:\" + emailAddress ); run();  =>   if (!MAIL_pre()) {     throw new java.lang.IllegalStateException(); } run();
SDL_58:184:void_mail0(java.lang.String): if (!MAIL_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_MAIL_FROM + \" FROM:\" + emailAddress ); run();  =>   if (!MAIL_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_MAIL_FROM + \" FROM:\" + emailAddress );
SDL_59:181:void_mail0(java.lang.String): throw new java.lang.IllegalStateException();  =>  
SDL_60:183:void_mail0(java.lang.String): if (!MAIL_pre()) {     throw new java.lang.IllegalStateException(); }  =>   if (true) {     throw new java.lang.IllegalStateException(); }
SDL_61:192:void_RCPT_TO(java.lang.String): try {     rcptTo0( emailAddress ); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_62:202:void_rcptTo0(java.lang.String): if (!RCPT_TO_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_RCPT_TO + \" TO:\" + emailAddress ); run();  =>   enqueueLineToInputStream( COMMAND_RCPT_TO + \" TO:\" + emailAddress ); run();
SDL_63:204:void_rcptTo0(java.lang.String): if (!RCPT_TO_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_RCPT_TO + \" TO:\" + emailAddress ); run();  =>   if (!RCPT_TO_pre()) {     throw new java.lang.IllegalStateException(); } run();
SDL_64:204:void_rcptTo0(java.lang.String): if (!RCPT_TO_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_RCPT_TO + \" TO:\" + emailAddress ); run();  =>   if (!RCPT_TO_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_RCPT_TO + \" TO:\" + emailAddress );
SDL_65:201:void_rcptTo0(java.lang.String): throw new java.lang.IllegalStateException();  =>  
SDL_66:203:void_rcptTo0(java.lang.String): if (!RCPT_TO_pre()) {     throw new java.lang.IllegalStateException(); }  =>   if (true) {     throw new java.lang.IllegalStateException(); }
SDL_67:212:void_DATA(java.lang.String): try {     data0( data ); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_68:228:void_data0(java.lang.String): if (!DATA_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_DATA ); java.lang.String[] lines = data.split( \"\\n\" ); for (int i = 0; i < lines.length; ++i) {     java.lang.String line = lines[i];     enqueueLineToInputStream( line ); } enqueueLineToInputStream( \".\" ); run();  =>   enqueueLineToInputStream( COMMAND_DATA ); java.lang.String[] lines = data.split( \"\\n\" ); for (int i = 0; i < lines.length; ++i) {     java.lang.String line = lines[i];     enqueueLineToInputStream( line ); } enqueueLineToInputStream( \".\" ); run();
SDL_69:230:void_data0(java.lang.String): if (!DATA_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_DATA ); java.lang.String[] lines = data.split( \"\\n\" ); for (int i = 0; i < lines.length; ++i) {     java.lang.String line = lines[i];     enqueueLineToInputStream( line ); } enqueueLineToInputStream( \".\" ); run();  =>   if (!DATA_pre()) {     throw new java.lang.IllegalStateException(); } java.lang.String[] lines = data.split( \"\\n\" ); for (int i = 0; i < lines.length; ++i) {     java.lang.String line = lines[i];     enqueueLineToInputStream( line ); } enqueueLineToInputStream( \".\" ); run();
SDL_70:227:void_data0(java.lang.String): if (!DATA_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_DATA ); java.lang.String[] lines = data.split( \"\\n\" ); for (int i = 0; i < lines.length; ++i) {     java.lang.String line = lines[i];     enqueueLineToInputStream( line ); } enqueueLineToInputStream( \".\" ); run();  =>   if (!DATA_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_DATA ); java.lang.String[] lines = data.split( \"\\n\" ); enqueueLineToInputStream( \".\" ); run();
SDL_71:230:void_data0(java.lang.String): if (!DATA_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_DATA ); java.lang.String[] lines = data.split( \"\\n\" ); for (int i = 0; i < lines.length; ++i) {     java.lang.String line = lines[i];     enqueueLineToInputStream( line ); } enqueueLineToInputStream( \".\" ); run();  =>   if (!DATA_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_DATA ); java.lang.String[] lines = data.split( \"\\n\" ); for (int i = 0; i < lines.length; ++i) {     java.lang.String line = lines[i];     enqueueLineToInputStream( line ); } run();
SDL_72:230:void_data0(java.lang.String): if (!DATA_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_DATA ); java.lang.String[] lines = data.split( \"\\n\" ); for (int i = 0; i < lines.length; ++i) {     java.lang.String line = lines[i];     enqueueLineToInputStream( line ); } enqueueLineToInputStream( \".\" ); run();  =>   if (!DATA_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_DATA ); java.lang.String[] lines = data.split( \"\\n\" ); for (int i = 0; i < lines.length; ++i) {     java.lang.String line = lines[i];     enqueueLineToInputStream( line ); } enqueueLineToInputStream( \".\" );
SDL_73:221:void_data0(java.lang.String): throw new java.lang.IllegalStateException();  =>  
SDL_74:223:void_data0(java.lang.String): if (!DATA_pre()) {     throw new java.lang.IllegalStateException(); }  =>   if (true) {     throw new java.lang.IllegalStateException(); }
SDL_75:227:void_data0(java.lang.String): java.lang.String line = lines[i]; enqueueLineToInputStream( line );  =>   java.lang.String line = lines[i];
SDL_76:229:void_data0(java.lang.String): for (int i = 0; i < lines.length; ++i) {     java.lang.String line = lines[i];     enqueueLineToInputStream( line ); }  =>   for (int i = 0;; ++i) {     java.lang.String line = lines[i];     enqueueLineToInputStream( line ); }
SDL_77:229:void_data0(java.lang.String): for (int i = 0; i < lines.length; ++i) {     java.lang.String line = lines[i];     enqueueLineToInputStream( line ); }  =>   for (int i = 0; i < lines.length;) {     java.lang.String line = lines[i];     enqueueLineToInputStream( line ); }
SDL_78:237:void_enqueueLineToInputStream(java.lang.String): if (this.socket.isClosed()) {     throw new com.example.smtp.MockSocketException( \"Connection is closed\" ); } in.writeLine( lineStr );  =>   in.writeLine( lineStr );
SDL_79:239:void_enqueueLineToInputStream(java.lang.String): if (this.socket.isClosed()) {     throw new com.example.smtp.MockSocketException( \"Connection is closed\" ); } in.writeLine( lineStr );  =>   if (this.socket.isClosed()) {     throw new com.example.smtp.MockSocketException( \"Connection is closed\" ); }
SDL_80:237:void_enqueueLineToInputStream(java.lang.String): throw new com.example.smtp.MockSocketException( \"Connection is closed\" );  =>  
SDL_81:239:void_enqueueLineToInputStream(java.lang.String): if (this.socket.isClosed()) {     throw new com.example.smtp.MockSocketException( \"Connection is closed\" ); }  =>   if (true) {     throw new com.example.smtp.MockSocketException( \"Connection is closed\" ); }
SDL_82:247:void_QUIT(): try {     quit0(); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_83:257:void_quit0(): if (!QUIT_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_QUIT ); run();  =>   enqueueLineToInputStream( COMMAND_QUIT ); run();
SDL_84:259:void_quit0(): if (!QUIT_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_QUIT ); run();  =>   if (!QUIT_pre()) {     throw new java.lang.IllegalStateException(); } run();
SDL_85:259:void_quit0(): if (!QUIT_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_QUIT ); run();  =>   if (!QUIT_pre()) {     throw new java.lang.IllegalStateException(); } enqueueLineToInputStream( COMMAND_QUIT );
SDL_86:256:void_quit0(): throw new java.lang.IllegalStateException();  =>  
SDL_87:258:void_quit0(): if (!QUIT_pre()) {     throw new java.lang.IllegalStateException(); }  =>   if (true) {     throw new java.lang.IllegalStateException(); }
SDL_88:265:boolean_HELO_pre(): return socket != null && !socket.isClosed();  =>   return true;
SDL_89:265:boolean_HELO_pre(): return socket != null && !socket.isClosed();  =>   return false;
SDL_90:270:boolean_NOOP_pre(): return socket != null && !socket.isClosed();  =>   return true;
SDL_91:270:boolean_NOOP_pre(): return socket != null && !socket.isClosed();  =>   return false;
SDL_92:275:boolean_RSET_pre(): return socket != null && !socket.isClosed();  =>   return true;
SDL_93:275:boolean_RSET_pre(): return socket != null && !socket.isClosed();  =>   return false;
SDL_94:280:boolean_QUIT_pre(): return socket != null && !socket.isClosed();  =>   return true;
SDL_95:280:boolean_QUIT_pre(): return socket != null && !socket.isClosed();  =>   return false;
SDL_96:285:boolean_MAIL_pre(): return socket != null && !socket.isClosed() && (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO);  =>   return true;
SDL_97:285:boolean_MAIL_pre(): return socket != null && !socket.isClosed() && (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO);  =>   return false;
SDL_98:290:boolean_RCPT_TO_pre(): return socket != null && !socket.isClosed() && (lastCommand == MAIL_FROM || lastCommand == RCPT_TO);  =>   return true;
SDL_99:290:boolean_RCPT_TO_pre(): return socket != null && !socket.isClosed() && (lastCommand == MAIL_FROM || lastCommand == RCPT_TO);  =>   return false;
SDL_100:295:boolean_DATA_pre(): return socket != null && !socket.isClosed() && (lastCommand == RCPT_TO && message.getToAddresses().size() > 0);  =>   return true;
SDL_101:295:boolean_DATA_pre(): return socket != null && !socket.isClosed() && (lastCommand == RCPT_TO && message.getToAddresses().size() > 0);  =>   return false;
SDL_102:349:void_handleCommand(): java.lang.String inputString; java.lang.String command; java.lang.String argument; inputString = read(); command = parseCommand( inputString ); argument = parseArgument( inputString ); if (command.equals( COMMAND_HELO )) {     write( \"250 Hello \" + argument );     lastCommand = HELO; } else {     if (command.equals( COMMAND_NOOP )) {         write( MESSAGE_OK );     } else {         if (command.equals( COMMAND_RSET )) {             message = new com.example.smtp.MockSMTPMessage();             write( MESSAGE_OK );             lastCommand = RSET;         } else {             if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {                 if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {                     if (handleMailFrom( inputString )) {                         lastCommand = MAIL_FROM;                     }                 } else {                     write( MESSAGE_COMMAND_ORDER_INVALID );                 }             } else {                 if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {                     if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {                         handleRcptTo( inputString );                         lastCommand = RCPT_TO;                     } else {                         write( MESSAGE_COMMAND_ORDER_INVALID );                     }                 } else {                     if (command.equals( COMMAND_DATA )) {                         if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                             handleData();                             message = new com.example.smtp.MockSMTPMessage();                             lastCommand = RSET;                         } else {                             write( MESSAGE_COMMAND_ORDER_INVALID );                         }                     } else {                         write( MESSAGE_INVALID_COMMAND + command );                     }                 }             }         }     } }  =>   java.lang.String inputString; java.lang.String command; java.lang.String argument; command = parseCommand( inputString ); argument = parseArgument( inputString ); if (command.equals( COMMAND_HELO )) {     write( \"250 Hello \" + argument );     lastCommand = HELO; } else {     if (command.equals( COMMAND_NOOP )) {         write( MESSAGE_OK );     } else {         if (command.equals( COMMAND_RSET )) {             message = new com.example.smtp.MockSMTPMessage();             write( MESSAGE_OK );             lastCommand = RSET;         } else {             if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {                 if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {                     if (handleMailFrom( inputString )) {                         lastCommand = MAIL_FROM;                     }                 } else {                     write( MESSAGE_COMMAND_ORDER_INVALID );                 }             } else {                 if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {                     if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {                         handleRcptTo( inputString );                         lastCommand = RCPT_TO;                     } else {                         write( MESSAGE_COMMAND_ORDER_INVALID );                     }                 } else {                     if (command.equals( COMMAND_DATA )) {                         if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                             handleData();                             message = new com.example.smtp.MockSMTPMessage();                             lastCommand = RSET;                         } else {                             write( MESSAGE_COMMAND_ORDER_INVALID );                         }                     } else {                         write( MESSAGE_INVALID_COMMAND + command );                     }                 }             }         }     } }
SDL_103:349:void_handleCommand(): java.lang.String inputString; java.lang.String command; java.lang.String argument; inputString = read(); command = parseCommand( inputString ); argument = parseArgument( inputString ); if (command.equals( COMMAND_HELO )) {     write( \"250 Hello \" + argument );     lastCommand = HELO; } else {     if (command.equals( COMMAND_NOOP )) {         write( MESSAGE_OK );     } else {         if (command.equals( COMMAND_RSET )) {             message = new com.example.smtp.MockSMTPMessage();             write( MESSAGE_OK );             lastCommand = RSET;         } else {             if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {                 if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {                     if (handleMailFrom( inputString )) {                         lastCommand = MAIL_FROM;                     }                 } else {                     write( MESSAGE_COMMAND_ORDER_INVALID );                 }             } else {                 if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {                     if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {                         handleRcptTo( inputString );                         lastCommand = RCPT_TO;                     } else {                         write( MESSAGE_COMMAND_ORDER_INVALID );                     }                 } else {                     if (command.equals( COMMAND_DATA )) {                         if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                             handleData();                             message = new com.example.smtp.MockSMTPMessage();                             lastCommand = RSET;                         } else {                             write( MESSAGE_COMMAND_ORDER_INVALID );                         }                     } else {                         write( MESSAGE_INVALID_COMMAND + command );                     }                 }             }         }     } }  =>   java.lang.String inputString; java.lang.String command; java.lang.String argument; inputString = read(); argument = parseArgument( inputString ); if (command.equals( COMMAND_HELO )) {     write( \"250 Hello \" + argument );     lastCommand = HELO; } else {     if (command.equals( COMMAND_NOOP )) {         write( MESSAGE_OK );     } else {         if (command.equals( COMMAND_RSET )) {             message = new com.example.smtp.MockSMTPMessage();             write( MESSAGE_OK );             lastCommand = RSET;         } else {             if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {                 if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {                     if (handleMailFrom( inputString )) {                         lastCommand = MAIL_FROM;                     }                 } else {                     write( MESSAGE_COMMAND_ORDER_INVALID );                 }             } else {                 if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {                     if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {                         handleRcptTo( inputString );                         lastCommand = RCPT_TO;                     } else {                         write( MESSAGE_COMMAND_ORDER_INVALID );                     }                 } else {                     if (command.equals( COMMAND_DATA )) {                         if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                             handleData();                             message = new com.example.smtp.MockSMTPMessage();                             lastCommand = RSET;                         } else {                             write( MESSAGE_COMMAND_ORDER_INVALID );                         }                     } else {                         write( MESSAGE_INVALID_COMMAND + command );                     }                 }             }         }     } }
SDL_104:349:void_handleCommand(): java.lang.String inputString; java.lang.String command; java.lang.String argument; inputString = read(); command = parseCommand( inputString ); argument = parseArgument( inputString ); if (command.equals( COMMAND_HELO )) {     write( \"250 Hello \" + argument );     lastCommand = HELO; } else {     if (command.equals( COMMAND_NOOP )) {         write( MESSAGE_OK );     } else {         if (command.equals( COMMAND_RSET )) {             message = new com.example.smtp.MockSMTPMessage();             write( MESSAGE_OK );             lastCommand = RSET;         } else {             if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {                 if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {                     if (handleMailFrom( inputString )) {                         lastCommand = MAIL_FROM;                     }                 } else {                     write( MESSAGE_COMMAND_ORDER_INVALID );                 }             } else {                 if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {                     if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {                         handleRcptTo( inputString );                         lastCommand = RCPT_TO;                     } else {                         write( MESSAGE_COMMAND_ORDER_INVALID );                     }                 } else {                     if (command.equals( COMMAND_DATA )) {                         if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                             handleData();                             message = new com.example.smtp.MockSMTPMessage();                             lastCommand = RSET;                         } else {                             write( MESSAGE_COMMAND_ORDER_INVALID );                         }                     } else {                         write( MESSAGE_INVALID_COMMAND + command );                     }                 }             }         }     } }  =>   java.lang.String inputString; java.lang.String command; java.lang.String argument; inputString = read(); command = parseCommand( inputString ); if (command.equals( COMMAND_HELO )) {     write( \"250 Hello \" + argument );     lastCommand = HELO; } else {     if (command.equals( COMMAND_NOOP )) {         write( MESSAGE_OK );     } else {         if (command.equals( COMMAND_RSET )) {             message = new com.example.smtp.MockSMTPMessage();             write( MESSAGE_OK );             lastCommand = RSET;         } else {             if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {                 if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {                     if (handleMailFrom( inputString )) {                         lastCommand = MAIL_FROM;                     }                 } else {                     write( MESSAGE_COMMAND_ORDER_INVALID );                 }             } else {                 if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {                     if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {                         handleRcptTo( inputString );                         lastCommand = RCPT_TO;                     } else {                         write( MESSAGE_COMMAND_ORDER_INVALID );                     }                 } else {                     if (command.equals( COMMAND_DATA )) {                         if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                             handleData();                             message = new com.example.smtp.MockSMTPMessage();                             lastCommand = RSET;                         } else {                             write( MESSAGE_COMMAND_ORDER_INVALID );                         }                     } else {                         write( MESSAGE_INVALID_COMMAND + command );                     }                 }             }         }     } }
SDL_105:305:void_handleCommand(): java.lang.String inputString; java.lang.String command; java.lang.String argument; inputString = read(); command = parseCommand( inputString ); argument = parseArgument( inputString ); if (command.equals( COMMAND_HELO )) {     write( \"250 Hello \" + argument );     lastCommand = HELO; } else {     if (command.equals( COMMAND_NOOP )) {         write( MESSAGE_OK );     } else {         if (command.equals( COMMAND_RSET )) {             message = new com.example.smtp.MockSMTPMessage();             write( MESSAGE_OK );             lastCommand = RSET;         } else {             if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {                 if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {                     if (handleMailFrom( inputString )) {                         lastCommand = MAIL_FROM;                     }                 } else {                     write( MESSAGE_COMMAND_ORDER_INVALID );                 }             } else {                 if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {                     if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {                         handleRcptTo( inputString );                         lastCommand = RCPT_TO;                     } else {                         write( MESSAGE_COMMAND_ORDER_INVALID );                     }                 } else {                     if (command.equals( COMMAND_DATA )) {                         if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                             handleData();                             message = new com.example.smtp.MockSMTPMessage();                             lastCommand = RSET;                         } else {                             write( MESSAGE_COMMAND_ORDER_INVALID );                         }                     } else {                         write( MESSAGE_INVALID_COMMAND + command );                     }                 }             }         }     } }  =>   java.lang.String inputString; java.lang.String command; java.lang.String argument; inputString = read(); command = parseCommand( inputString ); argument = parseArgument( inputString );
SDL_106:307:void_handleCommand(): write( \"250 Hello \" + argument ); lastCommand = HELO;  =>   lastCommand = HELO;
SDL_107:307:void_handleCommand(): write( \"250 Hello \" + argument ); lastCommand = HELO;  =>   write( \"250 Hello \" + argument );
SDL_108:350:void_handleCommand(): if (command.equals( COMMAND_HELO )) {     write( \"250 Hello \" + argument );     lastCommand = HELO; } else {     if (command.equals( COMMAND_NOOP )) {         write( MESSAGE_OK );     } else {         if (command.equals( COMMAND_RSET )) {             message = new com.example.smtp.MockSMTPMessage();             write( MESSAGE_OK );             lastCommand = RSET;         } else {             if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {                 if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {                     if (handleMailFrom( inputString )) {                         lastCommand = MAIL_FROM;                     }                 } else {                     write( MESSAGE_COMMAND_ORDER_INVALID );                 }             } else {                 if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {                     if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {                         handleRcptTo( inputString );                         lastCommand = RCPT_TO;                     } else {                         write( MESSAGE_COMMAND_ORDER_INVALID );                     }                 } else {                     if (command.equals( COMMAND_DATA )) {                         if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                             handleData();                             message = new com.example.smtp.MockSMTPMessage();                             lastCommand = RSET;                         } else {                             write( MESSAGE_COMMAND_ORDER_INVALID );                         }                     } else {                         write( MESSAGE_INVALID_COMMAND + command );                     }                 }             }         }     } }  =>   if (true) {     write( \"250 Hello \" + argument );     lastCommand = HELO; } else {     if (command.equals( COMMAND_NOOP )) {         write( MESSAGE_OK );     } else {         if (command.equals( COMMAND_RSET )) {             message = new com.example.smtp.MockSMTPMessage();             write( MESSAGE_OK );             lastCommand = RSET;         } else {             if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {                 if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {                     if (handleMailFrom( inputString )) {                         lastCommand = MAIL_FROM;                     }                 } else {                     write( MESSAGE_COMMAND_ORDER_INVALID );                 }             } else {                 if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {                     if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {                         handleRcptTo( inputString );                         lastCommand = RCPT_TO;                     } else {                         write( MESSAGE_COMMAND_ORDER_INVALID );                     }                 } else {                     if (command.equals( COMMAND_DATA )) {                         if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                             handleData();                             message = new com.example.smtp.MockSMTPMessage();                             lastCommand = RSET;                         } else {                             write( MESSAGE_COMMAND_ORDER_INVALID );                         }                     } else {                         write( MESSAGE_INVALID_COMMAND + command );                     }                 }             }         }     } }
SDL_109:309:void_handleCommand(): if (command.equals( COMMAND_NOOP )) {     write( MESSAGE_OK ); } else {     if (command.equals( COMMAND_RSET )) {         message = new com.example.smtp.MockSMTPMessage();         write( MESSAGE_OK );         lastCommand = RSET;     } else {         if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {             if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {                 if (handleMailFrom( inputString )) {                     lastCommand = MAIL_FROM;                 }             } else {                 write( MESSAGE_COMMAND_ORDER_INVALID );             }         } else {             if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {                 if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {                     handleRcptTo( inputString );                     lastCommand = RCPT_TO;                 } else {                     write( MESSAGE_COMMAND_ORDER_INVALID );                 }             } else {                 if (command.equals( COMMAND_DATA )) {                     if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                         handleData();                         message = new com.example.smtp.MockSMTPMessage();                         lastCommand = RSET;                     } else {                         write( MESSAGE_COMMAND_ORDER_INVALID );                     }                 } else {                     write( MESSAGE_INVALID_COMMAND + command );                 }             }         }     } }  =>  
SDL_110:310:void_handleCommand(): write( MESSAGE_OK );  =>  
SDL_111:349:void_handleCommand(): if (command.equals( COMMAND_NOOP )) {     write( MESSAGE_OK ); } else {     if (command.equals( COMMAND_RSET )) {         message = new com.example.smtp.MockSMTPMessage();         write( MESSAGE_OK );         lastCommand = RSET;     } else {         if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {             if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {                 if (handleMailFrom( inputString )) {                     lastCommand = MAIL_FROM;                 }             } else {                 write( MESSAGE_COMMAND_ORDER_INVALID );             }         } else {             if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {                 if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {                     handleRcptTo( inputString );                     lastCommand = RCPT_TO;                 } else {                     write( MESSAGE_COMMAND_ORDER_INVALID );                 }             } else {                 if (command.equals( COMMAND_DATA )) {                     if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                         handleData();                         message = new com.example.smtp.MockSMTPMessage();                         lastCommand = RSET;                     } else {                         write( MESSAGE_COMMAND_ORDER_INVALID );                     }                 } else {                     write( MESSAGE_INVALID_COMMAND + command );                 }             }         }     } }  =>   if (true) {     write( MESSAGE_OK ); } else {     if (command.equals( COMMAND_RSET )) {         message = new com.example.smtp.MockSMTPMessage();         write( MESSAGE_OK );         lastCommand = RSET;     } else {         if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {             if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {                 if (handleMailFrom( inputString )) {                     lastCommand = MAIL_FROM;                 }             } else {                 write( MESSAGE_COMMAND_ORDER_INVALID );             }         } else {             if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {                 if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {                     handleRcptTo( inputString );                     lastCommand = RCPT_TO;                 } else {                     write( MESSAGE_COMMAND_ORDER_INVALID );                 }             } else {                 if (command.equals( COMMAND_DATA )) {                     if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                         handleData();                         message = new com.example.smtp.MockSMTPMessage();                         lastCommand = RSET;                     } else {                         write( MESSAGE_COMMAND_ORDER_INVALID );                     }                 } else {                     write( MESSAGE_INVALID_COMMAND + command );                 }             }         }     } }
SDL_112:312:void_handleCommand(): if (command.equals( COMMAND_RSET )) {     message = new com.example.smtp.MockSMTPMessage();     write( MESSAGE_OK );     lastCommand = RSET; } else {     if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {         if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {             if (handleMailFrom( inputString )) {                 lastCommand = MAIL_FROM;             }         } else {             write( MESSAGE_COMMAND_ORDER_INVALID );         }     } else {         if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {             if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {                 handleRcptTo( inputString );                 lastCommand = RCPT_TO;             } else {                 write( MESSAGE_COMMAND_ORDER_INVALID );             }         } else {             if (command.equals( COMMAND_DATA )) {                 if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                     handleData();                     message = new com.example.smtp.MockSMTPMessage();                     lastCommand = RSET;                 } else {                     write( MESSAGE_COMMAND_ORDER_INVALID );                 }             } else {                 write( MESSAGE_INVALID_COMMAND + command );             }         }     } }  =>  
SDL_113:315:void_handleCommand(): message = new com.example.smtp.MockSMTPMessage(); write( MESSAGE_OK ); lastCommand = RSET;  =>   write( MESSAGE_OK ); lastCommand = RSET;
SDL_114:315:void_handleCommand(): message = new com.example.smtp.MockSMTPMessage(); write( MESSAGE_OK ); lastCommand = RSET;  =>   message = new com.example.smtp.MockSMTPMessage(); lastCommand = RSET;
SDL_115:315:void_handleCommand(): message = new com.example.smtp.MockSMTPMessage(); write( MESSAGE_OK ); lastCommand = RSET;  =>   message = new com.example.smtp.MockSMTPMessage(); write( MESSAGE_OK );
SDL_116:348:void_handleCommand(): if (command.equals( COMMAND_RSET )) {     message = new com.example.smtp.MockSMTPMessage();     write( MESSAGE_OK );     lastCommand = RSET; } else {     if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {         if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {             if (handleMailFrom( inputString )) {                 lastCommand = MAIL_FROM;             }         } else {             write( MESSAGE_COMMAND_ORDER_INVALID );         }     } else {         if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {             if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {                 handleRcptTo( inputString );                 lastCommand = RCPT_TO;             } else {                 write( MESSAGE_COMMAND_ORDER_INVALID );             }         } else {             if (command.equals( COMMAND_DATA )) {                 if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                     handleData();                     message = new com.example.smtp.MockSMTPMessage();                     lastCommand = RSET;                 } else {                     write( MESSAGE_COMMAND_ORDER_INVALID );                 }             } else {                 write( MESSAGE_INVALID_COMMAND + command );             }         }     } }  =>   if (true) {     message = new com.example.smtp.MockSMTPMessage();     write( MESSAGE_OK );     lastCommand = RSET; } else {     if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {         if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {             if (handleMailFrom( inputString )) {                 lastCommand = MAIL_FROM;             }         } else {             write( MESSAGE_COMMAND_ORDER_INVALID );         }     } else {         if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {             if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {                 handleRcptTo( inputString );                 lastCommand = RCPT_TO;             } else {                 write( MESSAGE_COMMAND_ORDER_INVALID );             }         } else {             if (command.equals( COMMAND_DATA )) {                 if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                     handleData();                     message = new com.example.smtp.MockSMTPMessage();                     lastCommand = RSET;                 } else {                     write( MESSAGE_COMMAND_ORDER_INVALID );                 }             } else {                 write( MESSAGE_INVALID_COMMAND + command );             }         }     } }
SDL_117:317:void_handleCommand(): if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {     if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {         if (handleMailFrom( inputString )) {             lastCommand = MAIL_FROM;         }     } else {         write( MESSAGE_COMMAND_ORDER_INVALID );     } } else {     if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {         if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {             handleRcptTo( inputString );             lastCommand = RCPT_TO;         } else {             write( MESSAGE_COMMAND_ORDER_INVALID );         }     } else {         if (command.equals( COMMAND_DATA )) {             if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                 handleData();                 message = new com.example.smtp.MockSMTPMessage();                 lastCommand = RSET;             } else {                 write( MESSAGE_COMMAND_ORDER_INVALID );             }         } else {             write( MESSAGE_INVALID_COMMAND + command );         }     } }  =>  
SDL_118:318:void_handleCommand(): if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {     if (handleMailFrom( inputString )) {         lastCommand = MAIL_FROM;     } } else {     write( MESSAGE_COMMAND_ORDER_INVALID ); }  =>  
SDL_119:347:void_handleCommand(): if (command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( \"MAIL FROM:\" )) {     if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {         if (handleMailFrom( inputString )) {             lastCommand = MAIL_FROM;         }     } else {         write( MESSAGE_COMMAND_ORDER_INVALID );     } } else {     if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {         if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {             handleRcptTo( inputString );             lastCommand = RCPT_TO;         } else {             write( MESSAGE_COMMAND_ORDER_INVALID );         }     } else {         if (command.equals( COMMAND_DATA )) {             if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                 handleData();                 message = new com.example.smtp.MockSMTPMessage();                 lastCommand = RSET;             } else {                 write( MESSAGE_COMMAND_ORDER_INVALID );             }         } else {             write( MESSAGE_INVALID_COMMAND + command );         }     } }  =>   if (true) {     if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {         if (handleMailFrom( inputString )) {             lastCommand = MAIL_FROM;         }     } else {         write( MESSAGE_COMMAND_ORDER_INVALID );     } } else {     if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {         if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {             handleRcptTo( inputString );             lastCommand = RCPT_TO;         } else {             write( MESSAGE_COMMAND_ORDER_INVALID );         }     } else {         if (command.equals( COMMAND_DATA )) {             if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {                 handleData();                 message = new com.example.smtp.MockSMTPMessage();                 lastCommand = RSET;             } else {                 write( MESSAGE_COMMAND_ORDER_INVALID );             }         } else {             write( MESSAGE_INVALID_COMMAND + command );         }     } }
SDL_120:326:void_handleCommand(): if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {     if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {         handleRcptTo( inputString );         lastCommand = RCPT_TO;     } else {         write( MESSAGE_COMMAND_ORDER_INVALID );     } } else {     if (command.equals( COMMAND_DATA )) {         if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {             handleData();             message = new com.example.smtp.MockSMTPMessage();             lastCommand = RSET;         } else {             write( MESSAGE_COMMAND_ORDER_INVALID );         }     } else {         write( MESSAGE_INVALID_COMMAND + command );     } }  =>  
SDL_121:319:void_handleCommand(): if (handleMailFrom( inputString )) {     lastCommand = MAIL_FROM; }  =>  
SDL_122:325:void_handleCommand(): if (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) {     if (handleMailFrom( inputString )) {         lastCommand = MAIL_FROM;     } } else {     write( MESSAGE_COMMAND_ORDER_INVALID ); }  =>   if (true) {     if (handleMailFrom( inputString )) {         lastCommand = MAIL_FROM;     } } else {     write( MESSAGE_COMMAND_ORDER_INVALID ); }
SDL_123:323:void_handleCommand(): write( MESSAGE_COMMAND_ORDER_INVALID );  =>  
SDL_124:320:void_handleCommand(): lastCommand = MAIL_FROM;  =>  
SDL_125:322:void_handleCommand(): if (handleMailFrom( inputString )) {     lastCommand = MAIL_FROM; }  =>   if (true) {     lastCommand = MAIL_FROM; }
SDL_126:327:void_handleCommand(): if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {     handleRcptTo( inputString );     lastCommand = RCPT_TO; } else {     write( MESSAGE_COMMAND_ORDER_INVALID ); }  =>  
SDL_127:346:void_handleCommand(): if (command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( \"RCPT TO:\" )) {     if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {         handleRcptTo( inputString );         lastCommand = RCPT_TO;     } else {         write( MESSAGE_COMMAND_ORDER_INVALID );     } } else {     if (command.equals( COMMAND_DATA )) {         if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {             handleData();             message = new com.example.smtp.MockSMTPMessage();             lastCommand = RSET;         } else {             write( MESSAGE_COMMAND_ORDER_INVALID );         }     } else {         write( MESSAGE_INVALID_COMMAND + command );     } }  =>   if (true) {     if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {         handleRcptTo( inputString );         lastCommand = RCPT_TO;     } else {         write( MESSAGE_COMMAND_ORDER_INVALID );     } } else {     if (command.equals( COMMAND_DATA )) {         if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {             handleData();             message = new com.example.smtp.MockSMTPMessage();             lastCommand = RSET;         } else {             write( MESSAGE_COMMAND_ORDER_INVALID );         }     } else {         write( MESSAGE_INVALID_COMMAND + command );     } }
SDL_128:334:void_handleCommand(): if (command.equals( COMMAND_DATA )) {     if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {         handleData();         message = new com.example.smtp.MockSMTPMessage();         lastCommand = RSET;     } else {         write( MESSAGE_COMMAND_ORDER_INVALID );     } } else {     write( MESSAGE_INVALID_COMMAND + command ); }  =>  
SDL_129:329:void_handleCommand(): handleRcptTo( inputString ); lastCommand = RCPT_TO;  =>   lastCommand = RCPT_TO;
SDL_130:329:void_handleCommand(): handleRcptTo( inputString ); lastCommand = RCPT_TO;  =>   handleRcptTo( inputString );
SDL_131:333:void_handleCommand(): if (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) {     handleRcptTo( inputString );     lastCommand = RCPT_TO; } else {     write( MESSAGE_COMMAND_ORDER_INVALID ); }  =>   if (true) {     handleRcptTo( inputString );     lastCommand = RCPT_TO; } else {     write( MESSAGE_COMMAND_ORDER_INVALID ); }
SDL_132:331:void_handleCommand(): write( MESSAGE_COMMAND_ORDER_INVALID );  =>  
SDL_133:335:void_handleCommand(): if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {     handleData();     message = new com.example.smtp.MockSMTPMessage();     lastCommand = RSET; } else {     write( MESSAGE_COMMAND_ORDER_INVALID ); }  =>  
SDL_134:345:void_handleCommand(): if (command.equals( COMMAND_DATA )) {     if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {         handleData();         message = new com.example.smtp.MockSMTPMessage();         lastCommand = RSET;     } else {         write( MESSAGE_COMMAND_ORDER_INVALID );     } } else {     write( MESSAGE_INVALID_COMMAND + command ); }  =>   if (true) {     if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {         handleData();         message = new com.example.smtp.MockSMTPMessage();         lastCommand = RSET;     } else {         write( MESSAGE_COMMAND_ORDER_INVALID );     } } else {     write( MESSAGE_INVALID_COMMAND + command ); }
SDL_135:343:void_handleCommand(): write( MESSAGE_INVALID_COMMAND + command );  =>  
SDL_136:338:void_handleCommand(): handleData(); message = new com.example.smtp.MockSMTPMessage(); lastCommand = RSET;  =>   message = new com.example.smtp.MockSMTPMessage(); lastCommand = RSET;
SDL_137:338:void_handleCommand(): handleData(); message = new com.example.smtp.MockSMTPMessage(); lastCommand = RSET;  =>   handleData(); lastCommand = RSET;
SDL_138:338:void_handleCommand(): handleData(); message = new com.example.smtp.MockSMTPMessage(); lastCommand = RSET;  =>   handleData(); message = new com.example.smtp.MockSMTPMessage();
SDL_139:342:void_handleCommand(): if (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) {     handleData();     message = new com.example.smtp.MockSMTPMessage();     lastCommand = RSET; } else {     write( MESSAGE_COMMAND_ORDER_INVALID ); }  =>   if (true) {     handleData();     message = new com.example.smtp.MockSMTPMessage();     lastCommand = RSET; } else {     write( MESSAGE_COMMAND_ORDER_INVALID ); }
SDL_140:340:void_handleCommand(): write( MESSAGE_COMMAND_ORDER_INVALID );  =>  
SDL_141:359:boolean_handleMailFrom(java.lang.String): try {     if (fromAddress == null || fromAddress.trim().equals( \"\" )) {         message.setFromAddress( new com.example.smtp.MockEmailAddress() );         message.setFromAddress( new com.example.smtp.MockEmailAddress( \"unknown@example.com\" ) );         log.debug( \"MAIL FROM is empty, using unknown@example.com\" );     } else {         com.example.smtp.MockEmailAddress address = new com.example.smtp.MockEmailAddress( fromAddress );         message.setFromAddress( address );         if (log.isDebugEnabled()) {             log.debug( \"MAIL FROM: \" + fromAddress );         }     }     write( MESSAGE_OK );     return true; } catch ( com.example.smtp.MockInvalidAddressException iae ) {     log.debug( \"Unable to parse From Address: \" + fromAddress );     write( MESSAGE_USER_INVALID );     return false; }  =>   try {     write( MESSAGE_OK );     return true; }
SDL_142:369:boolean_handleMailFrom(java.lang.String): try {     if (fromAddress == null || fromAddress.trim().equals( \"\" )) {         message.setFromAddress( new com.example.smtp.MockEmailAddress() );         message.setFromAddress( new com.example.smtp.MockEmailAddress( \"unknown@example.com\" ) );         log.debug( \"MAIL FROM is empty, using unknown@example.com\" );     } else {         com.example.smtp.MockEmailAddress address = new com.example.smtp.MockEmailAddress( fromAddress );         message.setFromAddress( address );         if (log.isDebugEnabled()) {             log.debug( \"MAIL FROM: \" + fromAddress );         }     }     write( MESSAGE_OK );     return true; } catch ( com.example.smtp.MockInvalidAddressException iae ) {     log.debug( \"Unable to parse From Address: \" + fromAddress );     write( MESSAGE_USER_INVALID );     return false; }  =>   try {     if (fromAddress == null || fromAddress.trim().equals( \"\" )) {         message.setFromAddress( new com.example.smtp.MockEmailAddress() );         message.setFromAddress( new com.example.smtp.MockEmailAddress( \"unknown@example.com\" ) );         log.debug( \"MAIL FROM is empty, using unknown@example.com\" );     } else {         com.example.smtp.MockEmailAddress address = new com.example.smtp.MockEmailAddress( fromAddress );         message.setFromAddress( address );         if (log.isDebugEnabled()) {             log.debug( \"MAIL FROM: \" + fromAddress );         }     }     return true; }
SDL_143:359:boolean_handleMailFrom(java.lang.String): message.setFromAddress( new com.example.smtp.MockEmailAddress() ); message.setFromAddress( new com.example.smtp.MockEmailAddress( \"unknown@example.com\" ) ); log.debug( \"MAIL FROM is empty, using unknown@example.com\" );  =>   message.setFromAddress( new com.example.smtp.MockEmailAddress( \"unknown@example.com\" ) ); log.debug( \"MAIL FROM is empty, using unknown@example.com\" );
SDL_144:359:boolean_handleMailFrom(java.lang.String): message.setFromAddress( new com.example.smtp.MockEmailAddress() ); message.setFromAddress( new com.example.smtp.MockEmailAddress( \"unknown@example.com\" ) ); log.debug( \"MAIL FROM is empty, using unknown@example.com\" );  =>   message.setFromAddress( new com.example.smtp.MockEmailAddress() ); log.debug( \"MAIL FROM is empty, using unknown@example.com\" );
SDL_145:359:boolean_handleMailFrom(java.lang.String): message.setFromAddress( new com.example.smtp.MockEmailAddress() ); message.setFromAddress( new com.example.smtp.MockEmailAddress( \"unknown@example.com\" ) ); log.debug( \"MAIL FROM is empty, using unknown@example.com\" );  =>   message.setFromAddress( new com.example.smtp.MockEmailAddress() ); message.setFromAddress( new com.example.smtp.MockEmailAddress( \"unknown@example.com\" ) );
SDL_146:367:boolean_handleMailFrom(java.lang.String): if (fromAddress == null || fromAddress.trim().equals( \"\" )) {     message.setFromAddress( new com.example.smtp.MockEmailAddress() );     message.setFromAddress( new com.example.smtp.MockEmailAddress( \"unknown@example.com\" ) );     log.debug( \"MAIL FROM is empty, using unknown@example.com\" ); } else {     com.example.smtp.MockEmailAddress address = new com.example.smtp.MockEmailAddress( fromAddress );     message.setFromAddress( address );     if (log.isDebugEnabled()) {         log.debug( \"MAIL FROM: \" + fromAddress );     } }  =>   if (true) {     message.setFromAddress( new com.example.smtp.MockEmailAddress() );     message.setFromAddress( new com.example.smtp.MockEmailAddress( \"unknown@example.com\" ) );     log.debug( \"MAIL FROM is empty, using unknown@example.com\" ); } else {     com.example.smtp.MockEmailAddress address = new com.example.smtp.MockEmailAddress( fromAddress );     message.setFromAddress( address );     if (log.isDebugEnabled()) {         log.debug( \"MAIL FROM: \" + fromAddress );     } }
SDL_147:365:boolean_handleMailFrom(java.lang.String): com.example.smtp.MockEmailAddress address = new com.example.smtp.MockEmailAddress( fromAddress ); message.setFromAddress( address ); if (log.isDebugEnabled()) {     log.debug( \"MAIL FROM: \" + fromAddress ); }  =>   com.example.smtp.MockEmailAddress address = new com.example.smtp.MockEmailAddress( fromAddress ); if (log.isDebugEnabled()) {     log.debug( \"MAIL FROM: \" + fromAddress ); }
SDL_148:363:boolean_handleMailFrom(java.lang.String): com.example.smtp.MockEmailAddress address = new com.example.smtp.MockEmailAddress( fromAddress ); message.setFromAddress( address ); if (log.isDebugEnabled()) {     log.debug( \"MAIL FROM: \" + fromAddress ); }  =>   com.example.smtp.MockEmailAddress address = new com.example.smtp.MockEmailAddress( fromAddress ); message.setFromAddress( address );
SDL_149:364:boolean_handleMailFrom(java.lang.String): log.debug( \"MAIL FROM: \" + fromAddress );  =>  
SDL_150:366:boolean_handleMailFrom(java.lang.String): if (log.isDebugEnabled()) {     log.debug( \"MAIL FROM: \" + fromAddress ); }  =>   if (true) {     log.debug( \"MAIL FROM: \" + fromAddress ); }
SDL_151:369:boolean_handleMailFrom(java.lang.String): return true;  =>   return false;
SDL_152:383:void_handleRcptTo(java.lang.String): try {     com.example.smtp.MockEmailAddress address = new com.example.smtp.MockEmailAddress( toAddress );     com.example.smtp.MockDeliveryService deliveryService = MockDeliveryService.getDeliveryService();     if (deliveryService.acceptAddress( address, clientIp, message.getFromAddress() )) {         com.example.smtp.MockUser localUser = configurationManager.getUser( address );         if (localUser != null) {             com.example.smtp.MockEmailAddress[] addresses = localUser.getDeliveryAddresses();             for (int index = 0; index < addresses.length; index++) {                 message.addToAddress( addresses[index] );             }         } else {             message.addToAddress( address );         }         write( MESSAGE_OK );         if (log.isDebugEnabled()) {             log.debug( \"RCTP TO: \" + address.getAddress() + \" accepted.\" );         }     } else {         if (log.isInfoEnabled()) {             log.info( \"Invalid delivery address for incoming mail: \" + toAddress + \" from client: \" + clientIp + \" / \" + message.getFromAddress() );         }         throw new com.example.smtp.MockInvalidAddressException();     } } catch ( com.example.smtp.MockInvalidAddressException iae ) {     write( MESSAGE_USER_NOT_LOCAL );     log.debug( \"RCTP TO: \" + toAddress + \" rejected.\" );     return; }  =>   try {     com.example.smtp.MockEmailAddress address = new com.example.smtp.MockEmailAddress( toAddress );     com.example.smtp.MockDeliveryService deliveryService = MockDeliveryService.getDeliveryService(); }
SDL_153:388:void_handleRcptTo(java.lang.String): com.example.smtp.MockUser localUser = configurationManager.getUser( address ); if (localUser != null) {     com.example.smtp.MockEmailAddress[] addresses = localUser.getDeliveryAddresses();     for (int index = 0; index < addresses.length; index++) {         message.addToAddress( addresses[index] );     } } else {     message.addToAddress( address ); } write( MESSAGE_OK ); if (log.isDebugEnabled()) {     log.debug( \"RCTP TO: \" + address.getAddress() + \" accepted.\" ); }  =>   com.example.smtp.MockUser localUser = configurationManager.getUser( address ); write( MESSAGE_OK ); if (log.isDebugEnabled()) {     log.debug( \"RCTP TO: \" + address.getAddress() + \" accepted.\" ); }
SDL_154:395:void_handleRcptTo(java.lang.String): com.example.smtp.MockUser localUser = configurationManager.getUser( address ); if (localUser != null) {     com.example.smtp.MockEmailAddress[] addresses = localUser.getDeliveryAddresses();     for (int index = 0; index < addresses.length; index++) {         message.addToAddress( addresses[index] );     } } else {     message.addToAddress( address ); } write( MESSAGE_OK ); if (log.isDebugEnabled()) {     log.debug( \"RCTP TO: \" + address.getAddress() + \" accepted.\" ); }  =>   com.example.smtp.MockUser localUser = configurationManager.getUser( address ); if (localUser != null) {     com.example.smtp.MockEmailAddress[] addresses = localUser.getDeliveryAddresses();     for (int index = 0; index < addresses.length; index++) {         message.addToAddress( addresses[index] );     } } else {     message.addToAddress( address ); } if (log.isDebugEnabled()) {     log.debug( \"RCTP TO: \" + address.getAddress() + \" accepted.\" ); }
SDL_155:393:void_handleRcptTo(java.lang.String): com.example.smtp.MockUser localUser = configurationManager.getUser( address ); if (localUser != null) {     com.example.smtp.MockEmailAddress[] addresses = localUser.getDeliveryAddresses();     for (int index = 0; index < addresses.length; index++) {         message.addToAddress( addresses[index] );     } } else {     message.addToAddress( address ); } write( MESSAGE_OK ); if (log.isDebugEnabled()) {     log.debug( \"RCTP TO: \" + address.getAddress() + \" accepted.\" ); }  =>   com.example.smtp.MockUser localUser = configurationManager.getUser( address ); if (localUser != null) {     com.example.smtp.MockEmailAddress[] addresses = localUser.getDeliveryAddresses();     for (int index = 0; index < addresses.length; index++) {         message.addToAddress( addresses[index] );     } } else {     message.addToAddress( address ); } write( MESSAGE_OK );
SDL_156:402:void_handleRcptTo(java.lang.String): if (deliveryService.acceptAddress( address, clientIp, message.getFromAddress() )) {     com.example.smtp.MockUser localUser = configurationManager.getUser( address );     if (localUser != null) {         com.example.smtp.MockEmailAddress[] addresses = localUser.getDeliveryAddresses();         for (int index = 0; index < addresses.length; index++) {             message.addToAddress( addresses[index] );         }     } else {         message.addToAddress( address );     }     write( MESSAGE_OK );     if (log.isDebugEnabled()) {         log.debug( \"RCTP TO: \" + address.getAddress() + \" accepted.\" );     } } else {     if (log.isInfoEnabled()) {         log.info( \"Invalid delivery address for incoming mail: \" + toAddress + \" from client: \" + clientIp + \" / \" + message.getFromAddress() );     }     throw new com.example.smtp.MockInvalidAddressException(); }  =>   if (true) {     com.example.smtp.MockUser localUser = configurationManager.getUser( address );     if (localUser != null) {         com.example.smtp.MockEmailAddress[] addresses = localUser.getDeliveryAddresses();         for (int index = 0; index < addresses.length; index++) {             message.addToAddress( addresses[index] );         }     } else {         message.addToAddress( address );     }     write( MESSAGE_OK );     if (log.isDebugEnabled()) {         log.debug( \"RCTP TO: \" + address.getAddress() + \" accepted.\" );     } } else {     if (log.isInfoEnabled()) {         log.info( \"Invalid delivery address for incoming mail: \" + toAddress + \" from client: \" + clientIp + \" / \" + message.getFromAddress() );     }     throw new com.example.smtp.MockInvalidAddressException(); }
SDL_157:398:void_handleRcptTo(java.lang.String): if (log.isInfoEnabled()) {     log.info( \"Invalid delivery address for incoming mail: \" + toAddress + \" from client: \" + clientIp + \" / \" + message.getFromAddress() ); } throw new com.example.smtp.MockInvalidAddressException();  =>   throw new com.example.smtp.MockInvalidAddressException();
SDL_158:400:void_handleRcptTo(java.lang.String): if (log.isInfoEnabled()) {     log.info( \"Invalid delivery address for incoming mail: \" + toAddress + \" from client: \" + clientIp + \" / \" + message.getFromAddress() ); } throw new com.example.smtp.MockInvalidAddressException();  =>   if (log.isInfoEnabled()) {     log.info( \"Invalid delivery address for incoming mail: \" + toAddress + \" from client: \" + clientIp + \" / \" + message.getFromAddress() ); }
SDL_159:386:void_handleRcptTo(java.lang.String): com.example.smtp.MockEmailAddress[] addresses = localUser.getDeliveryAddresses(); for (int index = 0; index < addresses.length; index++) {     message.addToAddress( addresses[index] ); }  =>   com.example.smtp.MockEmailAddress[] addresses = localUser.getDeliveryAddresses();
SDL_160:392:void_handleRcptTo(java.lang.String): if (localUser != null) {     com.example.smtp.MockEmailAddress[] addresses = localUser.getDeliveryAddresses();     for (int index = 0; index < addresses.length; index++) {         message.addToAddress( addresses[index] );     } } else {     message.addToAddress( address ); }  =>   if (true) {     com.example.smtp.MockEmailAddress[] addresses = localUser.getDeliveryAddresses();     for (int index = 0; index < addresses.length; index++) {         message.addToAddress( addresses[index] );     } } else {     message.addToAddress( address ); }
SDL_161:390:void_handleRcptTo(java.lang.String): message.addToAddress( address );  =>  
SDL_162:387:void_handleRcptTo(java.lang.String): message.addToAddress( addresses[index] );  =>  
SDL_163:389:void_handleRcptTo(java.lang.String): for (int index = 0; index < addresses.length; index++) {     message.addToAddress( addresses[index] ); }  =>   for (int index = 0;; index++) {     message.addToAddress( addresses[index] ); }
SDL_164:389:void_handleRcptTo(java.lang.String): for (int index = 0; index < addresses.length; index++) {     message.addToAddress( addresses[index] ); }  =>   for (int index = 0; index < addresses.length;) {     message.addToAddress( addresses[index] ); }
SDL_165:394:void_handleRcptTo(java.lang.String): log.debug( \"RCTP TO: \" + address.getAddress() + \" accepted.\" );  =>  
SDL_166:396:void_handleRcptTo(java.lang.String): if (log.isDebugEnabled()) {     log.debug( \"RCTP TO: \" + address.getAddress() + \" accepted.\" ); }  =>   if (true) {     log.debug( \"RCTP TO: \" + address.getAddress() + \" accepted.\" ); }
SDL_167:398:void_handleRcptTo(java.lang.String): log.info( \"Invalid delivery address for incoming mail: \" + toAddress + \" from client: \" + clientIp + \" / \" + message.getFromAddress() );  =>  
SDL_168:400:void_handleRcptTo(java.lang.String): if (log.isInfoEnabled()) {     log.info( \"Invalid delivery address for incoming mail: \" + toAddress + \" from client: \" + clientIp + \" / \" + message.getFromAddress() ); }  =>   if (true) {     log.info( \"Invalid delivery address for incoming mail: \" + toAddress + \" from client: \" + clientIp + \" / \" + message.getFromAddress() ); }
SDL_169:443:void_handleData(): long maxSize = configurationManager.getMaximumMessageSize() * 1024 * 1024; write( MESSAGE_SEND_DATA ); message.addDataLine( \"X-RecievedDate: \" + new java.util.Date() ); message.addDataLine( \"Received: by EricDaugherty's JES SMTP \" + configurationManager.getLocalDomains()[0] + \" from client: \" + clientIp ); try {     java.lang.String inputString = in.readLine();     while (!inputString.equals( \".\" )) {         if (log.isDebugEnabled()) {             log.debug( \"Read Data: \" + inputString );         }         message.addDataLine( inputString );         inputString = in.readLine();         if (message.getSize() > maxSize) {             log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );             write( MESSAGE_MESSAGE_TOO_LARGE );             throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );         }     }     log.debug( \"Data Input Complete.\" ); } catch ( com.example.smtp.MockIOException ioe ) {     log.error( \"An error occured while retrieving the message data.\", ioe );     throw new java.lang.RuntimeException(); } try {     message.save();     write( MESSAGE_OK ); } catch ( java.lang.Exception se ) {     write( MESSAGE_SAVE_MESSAGE_ERROR );     throw new java.lang.RuntimeException( se.getMessage() ); } if (log.isInfoEnabled()) {     log.info( \"Message \" + message.getMessageLocation().getName() + \" accepted for delivery.\" ); }  =>   long maxSize = configurationManager.getMaximumMessageSize() * 1024 * 1024; message.addDataLine( \"X-RecievedDate: \" + new java.util.Date() ); message.addDataLine( \"Received: by EricDaugherty's JES SMTP \" + configurationManager.getLocalDomains()[0] + \" from client: \" + clientIp ); try {     java.lang.String inputString = in.readLine();     while (!inputString.equals( \".\" )) {         if (log.isDebugEnabled()) {             log.debug( \"Read Data: \" + inputString );         }         message.addDataLine( inputString );         inputString = in.readLine();         if (message.getSize() > maxSize) {             log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );             write( MESSAGE_MESSAGE_TOO_LARGE );             throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );         }     }     log.debug( \"Data Input Complete.\" ); } catch ( com.example.smtp.MockIOException ioe ) {     log.error( \"An error occured while retrieving the message data.\", ioe );     throw new java.lang.RuntimeException(); } try {     message.save();     write( MESSAGE_OK ); } catch ( java.lang.Exception se ) {     write( MESSAGE_SAVE_MESSAGE_ERROR );     throw new java.lang.RuntimeException( se.getMessage() ); } if (log.isInfoEnabled()) {     log.info( \"Message \" + message.getMessageLocation().getName() + \" accepted for delivery.\" ); }
SDL_170:443:void_handleData(): long maxSize = configurationManager.getMaximumMessageSize() * 1024 * 1024; write( MESSAGE_SEND_DATA ); message.addDataLine( \"X-RecievedDate: \" + new java.util.Date() ); message.addDataLine( \"Received: by EricDaugherty's JES SMTP \" + configurationManager.getLocalDomains()[0] + \" from client: \" + clientIp ); try {     java.lang.String inputString = in.readLine();     while (!inputString.equals( \".\" )) {         if (log.isDebugEnabled()) {             log.debug( \"Read Data: \" + inputString );         }         message.addDataLine( inputString );         inputString = in.readLine();         if (message.getSize() > maxSize) {             log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );             write( MESSAGE_MESSAGE_TOO_LARGE );             throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );         }     }     log.debug( \"Data Input Complete.\" ); } catch ( com.example.smtp.MockIOException ioe ) {     log.error( \"An error occured while retrieving the message data.\", ioe );     throw new java.lang.RuntimeException(); } try {     message.save();     write( MESSAGE_OK ); } catch ( java.lang.Exception se ) {     write( MESSAGE_SAVE_MESSAGE_ERROR );     throw new java.lang.RuntimeException( se.getMessage() ); } if (log.isInfoEnabled()) {     log.info( \"Message \" + message.getMessageLocation().getName() + \" accepted for delivery.\" ); }  =>   long maxSize = configurationManager.getMaximumMessageSize() * 1024 * 1024; write( MESSAGE_SEND_DATA ); message.addDataLine( \"Received: by EricDaugherty's JES SMTP \" + configurationManager.getLocalDomains()[0] + \" from client: \" + clientIp ); try {     java.lang.String inputString = in.readLine();     while (!inputString.equals( \".\" )) {         if (log.isDebugEnabled()) {             log.debug( \"Read Data: \" + inputString );         }         message.addDataLine( inputString );         inputString = in.readLine();         if (message.getSize() > maxSize) {             log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );             write( MESSAGE_MESSAGE_TOO_LARGE );             throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );         }     }     log.debug( \"Data Input Complete.\" ); } catch ( com.example.smtp.MockIOException ioe ) {     log.error( \"An error occured while retrieving the message data.\", ioe );     throw new java.lang.RuntimeException(); } try {     message.save();     write( MESSAGE_OK ); } catch ( java.lang.Exception se ) {     write( MESSAGE_SAVE_MESSAGE_ERROR );     throw new java.lang.RuntimeException( se.getMessage() ); } if (log.isInfoEnabled()) {     log.info( \"Message \" + message.getMessageLocation().getName() + \" accepted for delivery.\" ); }
SDL_171:443:void_handleData(): long maxSize = configurationManager.getMaximumMessageSize() * 1024 * 1024; write( MESSAGE_SEND_DATA ); message.addDataLine( \"X-RecievedDate: \" + new java.util.Date() ); message.addDataLine( \"Received: by EricDaugherty's JES SMTP \" + configurationManager.getLocalDomains()[0] + \" from client: \" + clientIp ); try {     java.lang.String inputString = in.readLine();     while (!inputString.equals( \".\" )) {         if (log.isDebugEnabled()) {             log.debug( \"Read Data: \" + inputString );         }         message.addDataLine( inputString );         inputString = in.readLine();         if (message.getSize() > maxSize) {             log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );             write( MESSAGE_MESSAGE_TOO_LARGE );             throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );         }     }     log.debug( \"Data Input Complete.\" ); } catch ( com.example.smtp.MockIOException ioe ) {     log.error( \"An error occured while retrieving the message data.\", ioe );     throw new java.lang.RuntimeException(); } try {     message.save();     write( MESSAGE_OK ); } catch ( java.lang.Exception se ) {     write( MESSAGE_SAVE_MESSAGE_ERROR );     throw new java.lang.RuntimeException( se.getMessage() ); } if (log.isInfoEnabled()) {     log.info( \"Message \" + message.getMessageLocation().getName() + \" accepted for delivery.\" ); }  =>   long maxSize = configurationManager.getMaximumMessageSize() * 1024 * 1024; write( MESSAGE_SEND_DATA ); message.addDataLine( \"X-RecievedDate: \" + new java.util.Date() ); try {     java.lang.String inputString = in.readLine();     while (!inputString.equals( \".\" )) {         if (log.isDebugEnabled()) {             log.debug( \"Read Data: \" + inputString );         }         message.addDataLine( inputString );         inputString = in.readLine();         if (message.getSize() > maxSize) {             log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );             write( MESSAGE_MESSAGE_TOO_LARGE );             throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );         }     }     log.debug( \"Data Input Complete.\" ); } catch ( com.example.smtp.MockIOException ioe ) {     log.error( \"An error occured while retrieving the message data.\", ioe );     throw new java.lang.RuntimeException(); } try {     message.save();     write( MESSAGE_OK ); } catch ( java.lang.Exception se ) {     write( MESSAGE_SAVE_MESSAGE_ERROR );     throw new java.lang.RuntimeException( se.getMessage() ); } if (log.isInfoEnabled()) {     log.info( \"Message \" + message.getMessageLocation().getName() + \" accepted for delivery.\" ); }
SDL_172:441:void_handleData(): long maxSize = configurationManager.getMaximumMessageSize() * 1024 * 1024; write( MESSAGE_SEND_DATA ); message.addDataLine( \"X-RecievedDate: \" + new java.util.Date() ); message.addDataLine( \"Received: by EricDaugherty's JES SMTP \" + configurationManager.getLocalDomains()[0] + \" from client: \" + clientIp ); try {     java.lang.String inputString = in.readLine();     while (!inputString.equals( \".\" )) {         if (log.isDebugEnabled()) {             log.debug( \"Read Data: \" + inputString );         }         message.addDataLine( inputString );         inputString = in.readLine();         if (message.getSize() > maxSize) {             log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );             write( MESSAGE_MESSAGE_TOO_LARGE );             throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );         }     }     log.debug( \"Data Input Complete.\" ); } catch ( com.example.smtp.MockIOException ioe ) {     log.error( \"An error occured while retrieving the message data.\", ioe );     throw new java.lang.RuntimeException(); } try {     message.save();     write( MESSAGE_OK ); } catch ( java.lang.Exception se ) {     write( MESSAGE_SAVE_MESSAGE_ERROR );     throw new java.lang.RuntimeException( se.getMessage() ); } if (log.isInfoEnabled()) {     log.info( \"Message \" + message.getMessageLocation().getName() + \" accepted for delivery.\" ); }  =>   long maxSize = configurationManager.getMaximumMessageSize() * 1024 * 1024; write( MESSAGE_SEND_DATA ); message.addDataLine( \"X-RecievedDate: \" + new java.util.Date() ); message.addDataLine( \"Received: by EricDaugherty's JES SMTP \" + configurationManager.getLocalDomains()[0] + \" from client: \" + clientIp ); try {     java.lang.String inputString = in.readLine();     while (!inputString.equals( \".\" )) {         if (log.isDebugEnabled()) {             log.debug( \"Read Data: \" + inputString );         }         message.addDataLine( inputString );         inputString = in.readLine();         if (message.getSize() > maxSize) {             log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );             write( MESSAGE_MESSAGE_TOO_LARGE );             throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );         }     }     log.debug( \"Data Input Complete.\" ); } catch ( com.example.smtp.MockIOException ioe ) {     log.error( \"An error occured while retrieving the message data.\", ioe );     throw new java.lang.RuntimeException(); } try {     message.save();     write( MESSAGE_OK ); } catch ( java.lang.Exception se ) {     write( MESSAGE_SAVE_MESSAGE_ERROR );     throw new java.lang.RuntimeException( se.getMessage() ); }
SDL_173:419:void_handleData(): try {     java.lang.String inputString = in.readLine();     while (!inputString.equals( \".\" )) {         if (log.isDebugEnabled()) {             log.debug( \"Read Data: \" + inputString );         }         message.addDataLine( inputString );         inputString = in.readLine();         if (message.getSize() > maxSize) {             log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );             write( MESSAGE_MESSAGE_TOO_LARGE );             throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );         }     }     log.debug( \"Data Input Complete.\" ); } catch ( com.example.smtp.MockIOException ioe ) {     log.error( \"An error occured while retrieving the message data.\", ioe );     throw new java.lang.RuntimeException(); }  =>   try {     java.lang.String inputString = in.readLine();     log.debug( \"Data Input Complete.\" ); }
SDL_174:430:void_handleData(): try {     java.lang.String inputString = in.readLine();     while (!inputString.equals( \".\" )) {         if (log.isDebugEnabled()) {             log.debug( \"Read Data: \" + inputString );         }         message.addDataLine( inputString );         inputString = in.readLine();         if (message.getSize() > maxSize) {             log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );             write( MESSAGE_MESSAGE_TOO_LARGE );             throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );         }     }     log.debug( \"Data Input Complete.\" ); } catch ( com.example.smtp.MockIOException ioe ) {     log.error( \"An error occured while retrieving the message data.\", ioe );     throw new java.lang.RuntimeException(); }  =>   try {     java.lang.String inputString = in.readLine();     while (!inputString.equals( \".\" )) {         if (log.isDebugEnabled()) {             log.debug( \"Read Data: \" + inputString );         }         message.addDataLine( inputString );         inputString = in.readLine();         if (message.getSize() > maxSize) {             log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );             write( MESSAGE_MESSAGE_TOO_LARGE );             throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );         }     } }
SDL_175:425:void_handleData(): if (log.isDebugEnabled()) {     log.debug( \"Read Data: \" + inputString ); } message.addDataLine( inputString ); inputString = in.readLine(); if (message.getSize() > maxSize) {     log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );     write( MESSAGE_MESSAGE_TOO_LARGE );     throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" ); }  =>   message.addDataLine( inputString ); inputString = in.readLine(); if (message.getSize() > maxSize) {     log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );     write( MESSAGE_MESSAGE_TOO_LARGE );     throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" ); }
SDL_176:427:void_handleData(): if (log.isDebugEnabled()) {     log.debug( \"Read Data: \" + inputString ); } message.addDataLine( inputString ); inputString = in.readLine(); if (message.getSize() > maxSize) {     log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );     write( MESSAGE_MESSAGE_TOO_LARGE );     throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" ); }  =>   if (log.isDebugEnabled()) {     log.debug( \"Read Data: \" + inputString ); } inputString = in.readLine(); if (message.getSize() > maxSize) {     log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );     write( MESSAGE_MESSAGE_TOO_LARGE );     throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" ); }
SDL_177:427:void_handleData(): if (log.isDebugEnabled()) {     log.debug( \"Read Data: \" + inputString ); } message.addDataLine( inputString ); inputString = in.readLine(); if (message.getSize() > maxSize) {     log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );     write( MESSAGE_MESSAGE_TOO_LARGE );     throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" ); }  =>   if (log.isDebugEnabled()) {     log.debug( \"Read Data: \" + inputString ); } message.addDataLine( inputString ); if (message.getSize() > maxSize) {     log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );     write( MESSAGE_MESSAGE_TOO_LARGE );     throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" ); }
SDL_178:423:void_handleData(): if (log.isDebugEnabled()) {     log.debug( \"Read Data: \" + inputString ); } message.addDataLine( inputString ); inputString = in.readLine(); if (message.getSize() > maxSize) {     log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );     write( MESSAGE_MESSAGE_TOO_LARGE );     throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" ); }  =>   if (log.isDebugEnabled()) {     log.debug( \"Read Data: \" + inputString ); } message.addDataLine( inputString ); inputString = in.readLine();
SDL_179:429:void_handleData(): while (!inputString.equals( \".\" )) {     if (log.isDebugEnabled()) {         log.debug( \"Read Data: \" + inputString );     }     message.addDataLine( inputString );     inputString = in.readLine();     if (message.getSize() > maxSize) {         log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );         write( MESSAGE_MESSAGE_TOO_LARGE );         throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );     } }  =>   while (true) {     if (log.isDebugEnabled()) {         log.debug( \"Read Data: \" + inputString );     }     message.addDataLine( inputString );     inputString = in.readLine();     if (message.getSize() > maxSize) {         log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );         write( MESSAGE_MESSAGE_TOO_LARGE );         throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );     } }
SDL_180:419:void_handleData(): log.debug( \"Read Data: \" + inputString );  =>  
SDL_181:421:void_handleData(): if (log.isDebugEnabled()) {     log.debug( \"Read Data: \" + inputString ); }  =>   if (true) {     log.debug( \"Read Data: \" + inputString ); }
SDL_182:426:void_handleData(): log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" ); write( MESSAGE_MESSAGE_TOO_LARGE ); throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );  =>   write( MESSAGE_MESSAGE_TOO_LARGE ); throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );
SDL_183:426:void_handleData(): log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" ); write( MESSAGE_MESSAGE_TOO_LARGE ); throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );  =>   log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" ); throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );
SDL_184:426:void_handleData(): log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" ); write( MESSAGE_MESSAGE_TOO_LARGE ); throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" );  =>   log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" ); write( MESSAGE_MESSAGE_TOO_LARGE );
SDL_185:428:void_handleData(): if (message.getSize() > maxSize) {     log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );     write( MESSAGE_MESSAGE_TOO_LARGE );     throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" ); }  =>   if (true) {     log.warn( \"Message Rejected.  Message larger than max allowed size (\" + configurationManager.getMaximumMessageSize() + \" MB)\" );     write( MESSAGE_MESSAGE_TOO_LARGE );     throw new java.lang.RuntimeException( \"Aborting Connection.  Message size too large.\" ); }
SDL_186:437:void_handleData(): try {     message.save();     write( MESSAGE_OK ); } catch ( java.lang.Exception se ) {     write( MESSAGE_SAVE_MESSAGE_ERROR );     throw new java.lang.RuntimeException( se.getMessage() ); }  =>   try {     write( MESSAGE_OK ); }
SDL_187:437:void_handleData(): try {     message.save();     write( MESSAGE_OK ); } catch ( java.lang.Exception se ) {     write( MESSAGE_SAVE_MESSAGE_ERROR );     throw new java.lang.RuntimeException( se.getMessage() ); }  =>   try {     message.save(); }
SDL_188:442:void_handleData(): log.info( \"Message \" + message.getMessageLocation().getName() + \" accepted for delivery.\" );  =>  
SDL_189:444:void_handleData(): if (log.isInfoEnabled()) {     log.info( \"Message \" + message.getMessageLocation().getName() + \" accepted for delivery.\" ); }  =>   if (true) {     log.info( \"Message \" + message.getMessageLocation().getName() + \" accepted for delivery.\" ); }
SDL_190:452:java.lang.String_read(): try {     java.lang.String inputLine = in.readLine().trim();     if (log.isDebugEnabled()) {         log.debug( \"Read Input: \" + inputLine );     }     return inputLine; } catch ( com.example.smtp.MockIOException ioe ) {     log.error( \"Error reading from socket.\", ioe );     throw new java.lang.RuntimeException(); }  =>   try {     java.lang.String inputLine = in.readLine().trim();     return inputLine; }
SDL_191:451:java.lang.String_read(): log.debug( \"Read Input: \" + inputLine );  =>  
SDL_192:453:java.lang.String_read(): if (log.isDebugEnabled()) {     log.debug( \"Read Input: \" + inputLine ); }  =>   if (true) {     log.debug( \"Read Input: \" + inputLine ); }
SDL_193:454:java.lang.String_read(): return inputLine;  =>   return \"\";
SDL_194:464:void_write(java.lang.String): if (log.isDebugEnabled()) {     log.debug( \"Writing: \" + message ); } out.print( message + \"\\r\\n\" ); out.flush();  =>   out.print( message + \"\\r\\n\" ); out.flush();
SDL_195:466:void_write(java.lang.String): if (log.isDebugEnabled()) {     log.debug( \"Writing: \" + message ); } out.print( message + \"\\r\\n\" ); out.flush();  =>   if (log.isDebugEnabled()) {     log.debug( \"Writing: \" + message ); } out.flush();
SDL_196:466:void_write(java.lang.String): if (log.isDebugEnabled()) {     log.debug( \"Writing: \" + message ); } out.print( message + \"\\r\\n\" ); out.flush();  =>   if (log.isDebugEnabled()) {     log.debug( \"Writing: \" + message ); } out.print( message + \"\\r\\n\" );
SDL_197:463:void_write(java.lang.String): log.debug( \"Writing: \" + message );  =>  
SDL_198:465:void_write(java.lang.String): if (log.isDebugEnabled()) {     log.debug( \"Writing: \" + message ); }  =>   if (true) {     log.debug( \"Writing: \" + message ); }
SDL_199:472:java.lang.String_parseCommand(java.lang.String): int index = inputString.indexOf( \" \" ); if (index == -1) {     java.lang.String command = inputString.toUpperCase();     checkQuit( command );     return command; } else {     java.lang.String command = inputString.substring( 0, index ).toUpperCase();     checkQuit( command );     return command; }  =>   int index = inputString.indexOf( \" \" );
SDL_200:475:java.lang.String_parseCommand(java.lang.String): java.lang.String command = inputString.toUpperCase(); checkQuit( command ); return command;  =>   java.lang.String command = inputString.toUpperCase(); return command;
SDL_201:481:java.lang.String_parseCommand(java.lang.String): if (index == -1) {     java.lang.String command = inputString.toUpperCase();     checkQuit( command );     return command; } else {     java.lang.String command = inputString.substring( 0, index ).toUpperCase();     checkQuit( command );     return command; }  =>   if (true) {     java.lang.String command = inputString.toUpperCase();     checkQuit( command );     return command; } else {     java.lang.String command = inputString.substring( 0, index ).toUpperCase();     checkQuit( command );     return command; }
SDL_202:479:java.lang.String_parseCommand(java.lang.String): java.lang.String command = inputString.substring( 0, index ).toUpperCase(); checkQuit( command ); return command;  =>   java.lang.String command = inputString.substring( 0, index ).toUpperCase(); return command;
SDL_203:476:java.lang.String_parseCommand(java.lang.String): return command;  =>   return \"\";
SDL_204:480:java.lang.String_parseCommand(java.lang.String): return command;  =>   return \"\";
SDL_205:486:java.lang.String_parseArgument(java.lang.String): int index = inputString.indexOf( \" \" ); if (index == -1) {     return \"\"; } else {     return inputString.substring( index + 1 ); }  =>   int index = inputString.indexOf( \" \" );
SDL_206:491:java.lang.String_parseArgument(java.lang.String): if (index == -1) {     return \"\"; } else {     return inputString.substring( index + 1 ); }  =>   if (true) {     return \"\"; } else {     return inputString.substring( index + 1 ); }
SDL_207:490:java.lang.String_parseArgument(java.lang.String): return inputString.substring( index + 1 );  =>   return \"\";
SDL_208:501:java.lang.String_parseAddress(java.lang.String): int index = address.indexOf( \"<\" ); if (index != -1) {     address = address.substring( index + 1 ); } index = address.indexOf( \">\" ); if (index != -1) {     address = address.substring( 0, index ); } return address;  =>   int index = address.indexOf( \"<\" ); index = address.indexOf( \">\" ); if (index != -1) {     address = address.substring( 0, index ); } return address;
SDL_209:503:java.lang.String_parseAddress(java.lang.String): int index = address.indexOf( \"<\" ); if (index != -1) {     address = address.substring( index + 1 ); } index = address.indexOf( \">\" ); if (index != -1) {     address = address.substring( 0, index ); } return address;  =>   int index = address.indexOf( \"<\" ); if (index != -1) {     address = address.substring( index + 1 ); } if (index != -1) {     address = address.substring( 0, index ); } return address;
SDL_210:501:java.lang.String_parseAddress(java.lang.String): int index = address.indexOf( \"<\" ); if (index != -1) {     address = address.substring( index + 1 ); } index = address.indexOf( \">\" ); if (index != -1) {     address = address.substring( 0, index ); } return address;  =>   int index = address.indexOf( \"<\" ); if (index != -1) {     address = address.substring( index + 1 ); } index = address.indexOf( \">\" ); return address;
SDL_211:497:java.lang.String_parseAddress(java.lang.String): address = address.substring( index + 1 );  =>  
SDL_212:499:java.lang.String_parseAddress(java.lang.String): if (index != -1) {     address = address.substring( index + 1 ); }  =>   if (true) {     address = address.substring( index + 1 ); }
SDL_213:501:java.lang.String_parseAddress(java.lang.String): address = address.substring( 0, index );  =>  
SDL_214:503:java.lang.String_parseAddress(java.lang.String): if (index != -1) {     address = address.substring( 0, index ); }  =>   if (true) {     address = address.substring( 0, index ); }
SDL_215:504:java.lang.String_parseAddress(java.lang.String): return address;  =>   return \"\";
VDL_1:55:void_setSocket(com.example.smtp.MockServerSocket):remoteAddress.getHostName() + "(" + clientIp => remoteAddress.getHostName() + "("
VDL_2:75:void_disconnect():socket != null => null
VDL_3:123:void_helo0(java.lang.String):COMMAND_HELO + " " => " "
VDL_4:123:void_helo0(java.lang.String):COMMAND_HELO + " " + argument => COMMAND_HELO + " "
VDL_5:183:void_mail0(java.lang.String):COMMAND_MAIL_FROM + " FROM:" => " FROM:"
VDL_6:183:void_mail0(java.lang.String):COMMAND_MAIL_FROM + " FROM:" + emailAddress => COMMAND_MAIL_FROM + " FROM:"
VDL_7:203:void_rcptTo0(java.lang.String):COMMAND_RCPT_TO + " TO:" => " TO:"
VDL_8:203:void_rcptTo0(java.lang.String):COMMAND_RCPT_TO + " TO:" + emailAddress => COMMAND_RCPT_TO + " TO:"
VDL_9:225:void_data0(java.lang.String):i < lines.length => lines.length
VDL_10:225:void_data0(java.lang.String):++i =>  
VDL_11:264:boolean_HELO_pre():socket != null => null
VDL_12:269:boolean_NOOP_pre():socket != null => null
VDL_13:274:boolean_RSET_pre():socket != null => null
VDL_14:279:boolean_QUIT_pre():socket != null => null
VDL_15:284:boolean_MAIL_pre():socket != null => null
VDL_16:284:boolean_MAIL_pre():lastCommand == HELO => HELO
VDL_17:284:boolean_MAIL_pre():lastCommand == HELO => lastCommand
VDL_18:284:boolean_MAIL_pre():lastCommand == NONE => NONE
VDL_19:284:boolean_MAIL_pre():lastCommand == NONE => lastCommand
VDL_20:284:boolean_MAIL_pre():lastCommand == RSET => RSET
VDL_21:284:boolean_MAIL_pre():lastCommand == RSET => lastCommand
VDL_22:284:boolean_MAIL_pre():lastCommand == EHLO => EHLO
VDL_23:284:boolean_MAIL_pre():lastCommand == EHLO => lastCommand
VDL_24:289:boolean_RCPT_TO_pre():socket != null => null
VDL_25:289:boolean_RCPT_TO_pre():lastCommand == MAIL_FROM => MAIL_FROM
VDL_26:289:boolean_RCPT_TO_pre():lastCommand == MAIL_FROM => lastCommand
VDL_27:289:boolean_RCPT_TO_pre():lastCommand == RCPT_TO => RCPT_TO
VDL_28:289:boolean_RCPT_TO_pre():lastCommand == RCPT_TO => lastCommand
VDL_29:294:boolean_DATA_pre():socket != null => null
VDL_30:294:boolean_DATA_pre():lastCommand == RCPT_TO => RCPT_TO
VDL_31:294:boolean_DATA_pre():lastCommand == RCPT_TO => lastCommand
VDL_32:306:void_handleCommand():"250 Hello " + argument => "250 Hello "
VDL_33:318:void_handleCommand():lastCommand == HELO => HELO
VDL_34:318:void_handleCommand():lastCommand == HELO => lastCommand
VDL_35:318:void_handleCommand():lastCommand == NONE => NONE
VDL_36:318:void_handleCommand():lastCommand == NONE => lastCommand
VDL_37:318:void_handleCommand():lastCommand == RSET => RSET
VDL_38:318:void_handleCommand():lastCommand == RSET => lastCommand
VDL_39:318:void_handleCommand():lastCommand == EHLO => EHLO
VDL_40:318:void_handleCommand():lastCommand == EHLO => lastCommand
VDL_41:327:void_handleCommand():lastCommand == MAIL_FROM => MAIL_FROM
VDL_42:327:void_handleCommand():lastCommand == MAIL_FROM => lastCommand
VDL_43:327:void_handleCommand():lastCommand == RCPT_TO => RCPT_TO
VDL_44:327:void_handleCommand():lastCommand == RCPT_TO => lastCommand
VDL_45:335:void_handleCommand():lastCommand == RCPT_TO => RCPT_TO
VDL_46:335:void_handleCommand():lastCommand == RCPT_TO => lastCommand
VDL_47:343:void_handleCommand():MESSAGE_INVALID_COMMAND + command => command
VDL_48:343:void_handleCommand():MESSAGE_INVALID_COMMAND + command => MESSAGE_INVALID_COMMAND
VDL_49:356:boolean_handleMailFrom(java.lang.String):fromAddress == null => null
VDL_50:364:boolean_handleMailFrom(java.lang.String):"MAIL FROM: " + fromAddress => "MAIL FROM: "
VDL_51:370:boolean_handleMailFrom(java.lang.String):"Unable to parse From Address: " + fromAddress => "Unable to parse From Address: "
VDL_52:384:void_handleRcptTo(java.lang.String):localUser != null => null
VDL_53:386:void_handleRcptTo(java.lang.String):index < addresses.length => addresses.length
VDL_54:386:void_handleRcptTo(java.lang.String):index++ =>  
VDL_55:398:void_handleRcptTo(java.lang.String):"Invalid delivery address for incoming mail: " + toAddress => "Invalid delivery address for incoming mail: "
VDL_56:398:void_handleRcptTo(java.lang.String):"Invalid delivery address for incoming mail: " + toAddress + " from client: " + clientIp => "Invalid delivery address for incoming mail: " + toAddress + " from client: "
VDL_57:404:void_handleRcptTo(java.lang.String):"RCTP TO: " + toAddress => "RCTP TO: "
VDL_58:414:void_handleData():"Received: by EricDaugherty's JES SMTP " + configurationManager.getLocalDomains()[0] => "Received: by EricDaugherty's JES SMTP "
VDL_59:414:void_handleData():"Received: by EricDaugherty's JES SMTP " + configurationManager.getLocalDomains()[0] + " from client: " + clientIp => "Received: by EricDaugherty's JES SMTP " + configurationManager.getLocalDomains()[0] + " from client: "
VDL_60:419:void_handleData():"Read Data: " + inputString => "Read Data: "
VDL_61:423:void_handleData():message.getSize() > maxSize => message.getSize()
VDL_62:451:java.lang.String_read():"Read Input: " + inputLine => "Read Input: "
VDL_63:463:void_write(java.lang.String):"Writing: " + message => "Writing: "
VDL_64:465:void_write(java.lang.String):message + "\r\n" => "\r\n"
VDL_65:472:java.lang.String_parseCommand(java.lang.String):index == -1 => -1
VDL_66:486:java.lang.String_parseArgument(java.lang.String):index == -1 => -1
VDL_67:489:java.lang.String_parseArgument(java.lang.String):index + 1 => 1
VDL_68:496:java.lang.String_parseAddress(java.lang.String):index != -1 => -1
VDL_69:497:java.lang.String_parseAddress(java.lang.String):index + 1 => 1
VDL_70:500:java.lang.String_parseAddress(java.lang.String):index != -1 => -1
ODL_1:43:void_setSocket(com.example.smtp.MockServerSocket):10 * 1000 => 10
ODL_2:43:void_setSocket(com.example.smtp.MockServerSocket):10 * 1000 => 1000
ODL_3:49:void_setSocket(com.example.smtp.MockServerSocket):10 * 1000 => 10
ODL_4:49:void_setSocket(com.example.smtp.MockServerSocket):10 * 1000 => 1000
ODL_5:55:void_setSocket(com.example.smtp.MockServerSocket):remoteAddress.getHostName() + "(" => remoteAddress.getHostName()
ODL_6:55:void_setSocket(com.example.smtp.MockServerSocket):remoteAddress.getHostName() + "(" => "("
ODL_7:55:void_setSocket(com.example.smtp.MockServerSocket):remoteAddress.getHostName() + "(" + clientIp => remoteAddress.getHostName() + "("
ODL_8:55:void_setSocket(com.example.smtp.MockServerSocket):remoteAddress.getHostName() + "(" + clientIp => clientIp
ODL_9:55:void_setSocket(com.example.smtp.MockServerSocket):remoteAddress.getHostName() + "(" + clientIp + ") socket connected via SMTP." => remoteAddress.getHostName() + "(" + clientIp
ODL_10:55:void_setSocket(com.example.smtp.MockServerSocket):remoteAddress.getHostName() + "(" + clientIp + ") socket connected via SMTP." => ") socket connected via SMTP."
ODL_11:75:void_disconnect():socket != null => socket
ODL_12:75:void_disconnect():socket != null => null
ODL_13:120:void_helo0(java.lang.String):!HELO_pre() => HELO_pre()
ODL_14:123:void_helo0(java.lang.String):COMMAND_HELO + " " => COMMAND_HELO
ODL_15:123:void_helo0(java.lang.String):COMMAND_HELO + " " => " "
ODL_16:123:void_helo0(java.lang.String):COMMAND_HELO + " " + argument => COMMAND_HELO + " "
ODL_17:123:void_helo0(java.lang.String):COMMAND_HELO + " " + argument => argument
ODL_18:140:void_noop0():!NOOP_pre() => NOOP_pre()
ODL_19:160:void_rset0():!RSET_pre() => RSET_pre()
ODL_20:180:void_mail0(java.lang.String):!MAIL_pre() => MAIL_pre()
ODL_21:183:void_mail0(java.lang.String):COMMAND_MAIL_FROM + " FROM:" => COMMAND_MAIL_FROM
ODL_22:183:void_mail0(java.lang.String):COMMAND_MAIL_FROM + " FROM:" => " FROM:"
ODL_23:183:void_mail0(java.lang.String):COMMAND_MAIL_FROM + " FROM:" + emailAddress => COMMAND_MAIL_FROM + " FROM:"
ODL_24:183:void_mail0(java.lang.String):COMMAND_MAIL_FROM + " FROM:" + emailAddress => emailAddress
ODL_25:200:void_rcptTo0(java.lang.String):!RCPT_TO_pre() => RCPT_TO_pre()
ODL_26:203:void_rcptTo0(java.lang.String):COMMAND_RCPT_TO + " TO:" => COMMAND_RCPT_TO
ODL_27:203:void_rcptTo0(java.lang.String):COMMAND_RCPT_TO + " TO:" => " TO:"
ODL_28:203:void_rcptTo0(java.lang.String):COMMAND_RCPT_TO + " TO:" + emailAddress => COMMAND_RCPT_TO + " TO:"
ODL_29:203:void_rcptTo0(java.lang.String):COMMAND_RCPT_TO + " TO:" + emailAddress => emailAddress
ODL_30:220:void_data0(java.lang.String):!DATA_pre() => DATA_pre()
ODL_31:225:void_data0(java.lang.String):i < lines.length => i
ODL_32:225:void_data0(java.lang.String):i < lines.length => lines.length
ODL_33:225:void_data0(java.lang.String):++i => i
ODL_34:255:void_quit0():!QUIT_pre() => QUIT_pre()
ODL_35:264:boolean_HELO_pre():socket != null => socket
ODL_36:264:boolean_HELO_pre():socket != null => null
ODL_37:264:boolean_HELO_pre():!socket.isClosed() => socket.isClosed()
ODL_38:264:boolean_HELO_pre():socket != null && !socket.isClosed() => socket != null
ODL_39:264:boolean_HELO_pre():socket != null && !socket.isClosed() => !socket.isClosed()
ODL_40:269:boolean_NOOP_pre():socket != null => socket
ODL_41:269:boolean_NOOP_pre():socket != null => null
ODL_42:269:boolean_NOOP_pre():!socket.isClosed() => socket.isClosed()
ODL_43:269:boolean_NOOP_pre():socket != null && !socket.isClosed() => socket != null
ODL_44:269:boolean_NOOP_pre():socket != null && !socket.isClosed() => !socket.isClosed()
ODL_45:274:boolean_RSET_pre():socket != null => socket
ODL_46:274:boolean_RSET_pre():socket != null => null
ODL_47:274:boolean_RSET_pre():!socket.isClosed() => socket.isClosed()
ODL_48:274:boolean_RSET_pre():socket != null && !socket.isClosed() => socket != null
ODL_49:274:boolean_RSET_pre():socket != null && !socket.isClosed() => !socket.isClosed()
ODL_50:279:boolean_QUIT_pre():socket != null => socket
ODL_51:279:boolean_QUIT_pre():socket != null => null
ODL_52:279:boolean_QUIT_pre():!socket.isClosed() => socket.isClosed()
ODL_53:279:boolean_QUIT_pre():socket != null && !socket.isClosed() => socket != null
ODL_54:279:boolean_QUIT_pre():socket != null && !socket.isClosed() => !socket.isClosed()
ODL_55:284:boolean_MAIL_pre():socket != null => socket
ODL_56:284:boolean_MAIL_pre():socket != null => null
ODL_57:284:boolean_MAIL_pre():!socket.isClosed() => socket.isClosed()
ODL_58:284:boolean_MAIL_pre():socket != null && !socket.isClosed() => socket != null
ODL_59:284:boolean_MAIL_pre():socket != null && !socket.isClosed() => !socket.isClosed()
ODL_60:284:boolean_MAIL_pre():lastCommand == HELO => lastCommand
ODL_61:284:boolean_MAIL_pre():lastCommand == HELO => HELO
ODL_62:284:boolean_MAIL_pre():lastCommand == NONE => lastCommand
ODL_63:284:boolean_MAIL_pre():lastCommand == NONE => NONE
ODL_64:284:boolean_MAIL_pre():lastCommand == HELO || lastCommand == NONE => lastCommand == HELO
ODL_65:284:boolean_MAIL_pre():lastCommand == HELO || lastCommand == NONE => lastCommand == NONE
ODL_66:284:boolean_MAIL_pre():lastCommand == RSET => lastCommand
ODL_67:284:boolean_MAIL_pre():lastCommand == RSET => RSET
ODL_68:284:boolean_MAIL_pre():lastCommand == HELO || lastCommand == NONE || lastCommand == RSET => lastCommand == HELO || lastCommand == NONE
ODL_69:284:boolean_MAIL_pre():lastCommand == HELO || lastCommand == NONE || lastCommand == RSET => lastCommand == RSET
ODL_70:284:boolean_MAIL_pre():lastCommand == EHLO => lastCommand
ODL_71:284:boolean_MAIL_pre():lastCommand == EHLO => EHLO
ODL_72:284:boolean_MAIL_pre():lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO => lastCommand == HELO || lastCommand == NONE || lastCommand == RSET
ODL_73:284:boolean_MAIL_pre():lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO => lastCommand == EHLO
ODL_74:284:boolean_MAIL_pre():socket != null && !socket.isClosed() && (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) => socket != null && !socket.isClosed()
ODL_75:284:boolean_MAIL_pre():socket != null && !socket.isClosed() && (lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO) => lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO
ODL_76:289:boolean_RCPT_TO_pre():socket != null => socket
ODL_77:289:boolean_RCPT_TO_pre():socket != null => null
ODL_78:289:boolean_RCPT_TO_pre():!socket.isClosed() => socket.isClosed()
ODL_79:289:boolean_RCPT_TO_pre():socket != null && !socket.isClosed() => socket != null
ODL_80:289:boolean_RCPT_TO_pre():socket != null && !socket.isClosed() => !socket.isClosed()
ODL_81:289:boolean_RCPT_TO_pre():lastCommand == MAIL_FROM => lastCommand
ODL_82:289:boolean_RCPT_TO_pre():lastCommand == MAIL_FROM => MAIL_FROM
ODL_83:289:boolean_RCPT_TO_pre():lastCommand == RCPT_TO => lastCommand
ODL_84:289:boolean_RCPT_TO_pre():lastCommand == RCPT_TO => RCPT_TO
ODL_85:289:boolean_RCPT_TO_pre():lastCommand == MAIL_FROM || lastCommand == RCPT_TO => lastCommand == MAIL_FROM
ODL_86:289:boolean_RCPT_TO_pre():lastCommand == MAIL_FROM || lastCommand == RCPT_TO => lastCommand == RCPT_TO
ODL_87:289:boolean_RCPT_TO_pre():socket != null && !socket.isClosed() && (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) => socket != null && !socket.isClosed()
ODL_88:289:boolean_RCPT_TO_pre():socket != null && !socket.isClosed() && (lastCommand == MAIL_FROM || lastCommand == RCPT_TO) => lastCommand == MAIL_FROM || lastCommand == RCPT_TO
ODL_89:294:boolean_DATA_pre():socket != null => socket
ODL_90:294:boolean_DATA_pre():socket != null => null
ODL_91:294:boolean_DATA_pre():!socket.isClosed() => socket.isClosed()
ODL_92:294:boolean_DATA_pre():socket != null && !socket.isClosed() => socket != null
ODL_93:294:boolean_DATA_pre():socket != null && !socket.isClosed() => !socket.isClosed()
ODL_94:294:boolean_DATA_pre():lastCommand == RCPT_TO => lastCommand
ODL_95:294:boolean_DATA_pre():lastCommand == RCPT_TO => RCPT_TO
ODL_96:294:boolean_DATA_pre():message.getToAddresses().size() > 0 => message.getToAddresses().size()
ODL_97:294:boolean_DATA_pre():message.getToAddresses().size() > 0 => 0
ODL_98:294:boolean_DATA_pre():lastCommand == RCPT_TO && message.getToAddresses().size() > 0 => lastCommand == RCPT_TO
ODL_99:294:boolean_DATA_pre():lastCommand == RCPT_TO && message.getToAddresses().size() > 0 => message.getToAddresses().size() > 0
ODL_100:294:boolean_DATA_pre():socket != null && !socket.isClosed() && (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) => socket != null && !socket.isClosed()
ODL_101:294:boolean_DATA_pre():socket != null && !socket.isClosed() && (lastCommand == RCPT_TO && message.getToAddresses().size() > 0) => lastCommand == RCPT_TO && message.getToAddresses().size() > 0
ODL_102:306:void_handleCommand():"250 Hello " + argument => "250 Hello "
ODL_103:306:void_handleCommand():"250 Hello " + argument => argument
ODL_104:317:void_handleCommand():command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( "MAIL FROM:" ) => command.equals( COMMAND_MAIL_FROM )
ODL_105:317:void_handleCommand():command.equals( COMMAND_MAIL_FROM ) && inputString.toUpperCase().startsWith( "MAIL FROM:" ) => inputString.toUpperCase().startsWith( "MAIL FROM:" )
ODL_106:318:void_handleCommand():lastCommand == HELO => lastCommand
ODL_107:318:void_handleCommand():lastCommand == HELO => HELO
ODL_108:318:void_handleCommand():lastCommand == NONE => lastCommand
ODL_109:318:void_handleCommand():lastCommand == NONE => NONE
ODL_110:318:void_handleCommand():lastCommand == HELO || lastCommand == NONE => lastCommand == HELO
ODL_111:318:void_handleCommand():lastCommand == HELO || lastCommand == NONE => lastCommand == NONE
ODL_112:318:void_handleCommand():lastCommand == RSET => lastCommand
ODL_113:318:void_handleCommand():lastCommand == RSET => RSET
ODL_114:318:void_handleCommand():lastCommand == HELO || lastCommand == NONE || lastCommand == RSET => lastCommand == HELO || lastCommand == NONE
ODL_115:318:void_handleCommand():lastCommand == HELO || lastCommand == NONE || lastCommand == RSET => lastCommand == RSET
ODL_116:318:void_handleCommand():lastCommand == EHLO => lastCommand
ODL_117:318:void_handleCommand():lastCommand == EHLO => EHLO
ODL_118:318:void_handleCommand():lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO => lastCommand == HELO || lastCommand == NONE || lastCommand == RSET
ODL_119:318:void_handleCommand():lastCommand == HELO || lastCommand == NONE || lastCommand == RSET || lastCommand == EHLO => lastCommand == EHLO
ODL_120:326:void_handleCommand():command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( "RCPT TO:" ) => command.equals( COMMAND_RCPT_TO )
ODL_121:326:void_handleCommand():command.equals( COMMAND_RCPT_TO ) && inputString.toUpperCase().startsWith( "RCPT TO:" ) => inputString.toUpperCase().startsWith( "RCPT TO:" )
ODL_122:327:void_handleCommand():lastCommand == MAIL_FROM => lastCommand
ODL_123:327:void_handleCommand():lastCommand == MAIL_FROM => MAIL_FROM
ODL_124:327:void_handleCommand():lastCommand == RCPT_TO => lastCommand
ODL_125:327:void_handleCommand():lastCommand == RCPT_TO => RCPT_TO
ODL_126:327:void_handleCommand():lastCommand == MAIL_FROM || lastCommand == RCPT_TO => lastCommand == MAIL_FROM
ODL_127:327:void_handleCommand():lastCommand == MAIL_FROM || lastCommand == RCPT_TO => lastCommand == RCPT_TO
ODL_128:335:void_handleCommand():lastCommand == RCPT_TO => lastCommand
ODL_129:335:void_handleCommand():lastCommand == RCPT_TO => RCPT_TO
ODL_130:335:void_handleCommand():message.getToAddresses().size() > 0 => message.getToAddresses().size()
ODL_131:335:void_handleCommand():message.getToAddresses().size() > 0 => 0
ODL_132:335:void_handleCommand():lastCommand == RCPT_TO && message.getToAddresses().size() > 0 => lastCommand == RCPT_TO
ODL_133:335:void_handleCommand():lastCommand == RCPT_TO && message.getToAddresses().size() > 0 => message.getToAddresses().size() > 0
ODL_134:343:void_handleCommand():MESSAGE_INVALID_COMMAND + command => MESSAGE_INVALID_COMMAND
ODL_135:343:void_handleCommand():MESSAGE_INVALID_COMMAND + command => command
ODL_136:356:boolean_handleMailFrom(java.lang.String):fromAddress == null => fromAddress
ODL_137:356:boolean_handleMailFrom(java.lang.String):fromAddress == null => null
ODL_138:356:boolean_handleMailFrom(java.lang.String):fromAddress == null || fromAddress.trim().equals( "" ) => fromAddress == null
ODL_139:356:boolean_handleMailFrom(java.lang.String):fromAddress == null || fromAddress.trim().equals( "" ) => fromAddress.trim().equals( "" )
ODL_140:364:boolean_handleMailFrom(java.lang.String):"MAIL FROM: " + fromAddress => "MAIL FROM: "
ODL_141:364:boolean_handleMailFrom(java.lang.String):"MAIL FROM: " + fromAddress => fromAddress
ODL_142:370:boolean_handleMailFrom(java.lang.String):"Unable to parse From Address: " + fromAddress => "Unable to parse From Address: "
ODL_143:370:boolean_handleMailFrom(java.lang.String):"Unable to parse From Address: " + fromAddress => fromAddress
ODL_144:384:void_handleRcptTo(java.lang.String):localUser != null => localUser
ODL_145:384:void_handleRcptTo(java.lang.String):localUser != null => null
ODL_146:386:void_handleRcptTo(java.lang.String):index < addresses.length => index
ODL_147:386:void_handleRcptTo(java.lang.String):index < addresses.length => addresses.length
ODL_148:386:void_handleRcptTo(java.lang.String):index++ => index
ODL_149:394:void_handleRcptTo(java.lang.String):"RCTP TO: " + address.getAddress() => "RCTP TO: "
ODL_150:394:void_handleRcptTo(java.lang.String):"RCTP TO: " + address.getAddress() => address.getAddress()
ODL_151:394:void_handleRcptTo(java.lang.String):"RCTP TO: " + address.getAddress() + " accepted." => "RCTP TO: " + address.getAddress()
ODL_152:394:void_handleRcptTo(java.lang.String):"RCTP TO: " + address.getAddress() + " accepted." => " accepted."
ODL_153:398:void_handleRcptTo(java.lang.String):"Invalid delivery address for incoming mail: " + toAddress => "Invalid delivery address for incoming mail: "
ODL_154:398:void_handleRcptTo(java.lang.String):"Invalid delivery address for incoming mail: " + toAddress => toAddress
ODL_155:398:void_handleRcptTo(java.lang.String):"Invalid delivery address for incoming mail: " + toAddress + " from client: " => "Invalid delivery address for incoming mail: " + toAddress
ODL_156:398:void_handleRcptTo(java.lang.String):"Invalid delivery address for incoming mail: " + toAddress + " from client: " => " from client: "
ODL_157:398:void_handleRcptTo(java.lang.String):"Invalid delivery address for incoming mail: " + toAddress + " from client: " + clientIp => "Invalid delivery address for incoming mail: " + toAddress + " from client: "
ODL_158:398:void_handleRcptTo(java.lang.String):"Invalid delivery address for incoming mail: " + toAddress + " from client: " + clientIp => clientIp
ODL_159:398:void_handleRcptTo(java.lang.String):"Invalid delivery address for incoming mail: " + toAddress + " from client: " + clientIp + " / " => "Invalid delivery address for incoming mail: " + toAddress + " from client: " + clientIp
ODL_160:398:void_handleRcptTo(java.lang.String):"Invalid delivery address for incoming mail: " + toAddress + " from client: " + clientIp + " / " => " / "
ODL_161:398:void_handleRcptTo(java.lang.String):"Invalid delivery address for incoming mail: " + toAddress + " from client: " + clientIp + " / " + message.getFromAddress() => "Invalid delivery address for incoming mail: " + toAddress + " from client: " + clientIp + " / "
ODL_162:398:void_handleRcptTo(java.lang.String):"Invalid delivery address for incoming mail: " + toAddress + " from client: " + clientIp + " / " + message.getFromAddress() => message.getFromAddress()
ODL_163:404:void_handleRcptTo(java.lang.String):"RCTP TO: " + toAddress => "RCTP TO: "
ODL_164:404:void_handleRcptTo(java.lang.String):"RCTP TO: " + toAddress => toAddress
ODL_165:404:void_handleRcptTo(java.lang.String):"RCTP TO: " + toAddress + " rejected." => "RCTP TO: " + toAddress
ODL_166:404:void_handleRcptTo(java.lang.String):"RCTP TO: " + toAddress + " rejected." => " rejected."
ODL_167:411:void_handleData():configurationManager.getMaximumMessageSize() * 1024 => configurationManager.getMaximumMessageSize()
ODL_168:411:void_handleData():configurationManager.getMaximumMessageSize() * 1024 => 1024
ODL_169:411:void_handleData():configurationManager.getMaximumMessageSize() * 1024 * 1024 => configurationManager.getMaximumMessageSize() * 1024
ODL_170:411:void_handleData():configurationManager.getMaximumMessageSize() * 1024 * 1024 => 1024
ODL_171:413:void_handleData():"X-RecievedDate: " + new java.util.Date() => "X-RecievedDate: "
ODL_172:413:void_handleData():"X-RecievedDate: " + new java.util.Date() => new java.util.Date()
ODL_173:414:void_handleData():"Received: by EricDaugherty's JES SMTP " + configurationManager.getLocalDomains()[0] => "Received: by EricDaugherty's JES SMTP "
ODL_174:414:void_handleData():"Received: by EricDaugherty's JES SMTP " + configurationManager.getLocalDomains()[0] => configurationManager.getLocalDomains()[0]
ODL_175:414:void_handleData():"Received: by EricDaugherty's JES SMTP " + configurationManager.getLocalDomains()[0] + " from client: " => "Received: by EricDaugherty's JES SMTP " + configurationManager.getLocalDomains()[0]
ODL_176:414:void_handleData():"Received: by EricDaugherty's JES SMTP " + configurationManager.getLocalDomains()[0] + " from client: " => " from client: "
ODL_177:414:void_handleData():"Received: by EricDaugherty's JES SMTP " + configurationManager.getLocalDomains()[0] + " from client: " + clientIp => "Received: by EricDaugherty's JES SMTP " + configurationManager.getLocalDomains()[0] + " from client: "
ODL_178:414:void_handleData():"Received: by EricDaugherty's JES SMTP " + configurationManager.getLocalDomains()[0] + " from client: " + clientIp => clientIp
ODL_179:417:void_handleData():!inputString.equals( "." ) => inputString.equals( "." )
ODL_180:419:void_handleData():"Read Data: " + inputString => "Read Data: "
ODL_181:419:void_handleData():"Read Data: " + inputString => inputString
ODL_182:423:void_handleData():message.getSize() > maxSize => message.getSize()
ODL_183:423:void_handleData():message.getSize() > maxSize => maxSize
ODL_184:424:void_handleData():"Message Rejected.  Message larger than max allowed size (" + configurationManager.getMaximumMessageSize() => "Message Rejected.  Message larger than max allowed size ("
ODL_185:424:void_handleData():"Message Rejected.  Message larger than max allowed size (" + configurationManager.getMaximumMessageSize() => configurationManager.getMaximumMessageSize()
ODL_186:424:void_handleData():"Message Rejected.  Message larger than max allowed size (" + configurationManager.getMaximumMessageSize() + " MB)" => "Message Rejected.  Message larger than max allowed size (" + configurationManager.getMaximumMessageSize()
ODL_187:424:void_handleData():"Message Rejected.  Message larger than max allowed size (" + configurationManager.getMaximumMessageSize() + " MB)" => " MB)"
ODL_188:442:void_handleData():"Message " + message.getMessageLocation().getName() => "Message "
ODL_189:442:void_handleData():"Message " + message.getMessageLocation().getName() => message.getMessageLocation().getName()
ODL_190:442:void_handleData():"Message " + message.getMessageLocation().getName() + " accepted for delivery." => "Message " + message.getMessageLocation().getName()
ODL_191:442:void_handleData():"Message " + message.getMessageLocation().getName() + " accepted for delivery." => " accepted for delivery."
ODL_192:451:java.lang.String_read():"Read Input: " + inputLine => "Read Input: "
ODL_193:451:java.lang.String_read():"Read Input: " + inputLine => inputLine
ODL_194:463:void_write(java.lang.String):"Writing: " + message => "Writing: "
ODL_195:463:void_write(java.lang.String):"Writing: " + message => message
ODL_196:465:void_write(java.lang.String):message + "\r\n" => message
ODL_197:465:void_write(java.lang.String):message + "\r\n" => "\r\n"
ODL_198:472:java.lang.String_parseCommand(java.lang.String):-1 => 1
ODL_199:472:java.lang.String_parseCommand(java.lang.String):index == -1 => index
ODL_200:472:java.lang.String_parseCommand(java.lang.String):index == -1 => -1
ODL_201:486:java.lang.String_parseArgument(java.lang.String):-1 => 1
ODL_202:486:java.lang.String_parseArgument(java.lang.String):index == -1 => index
ODL_203:486:java.lang.String_parseArgument(java.lang.String):index == -1 => -1
ODL_204:489:java.lang.String_parseArgument(java.lang.String):index + 1 => index
ODL_205:489:java.lang.String_parseArgument(java.lang.String):index + 1 => 1
ODL_206:496:java.lang.String_parseAddress(java.lang.String):-1 => 1
ODL_207:496:java.lang.String_parseAddress(java.lang.String):index != -1 => index
ODL_208:496:java.lang.String_parseAddress(java.lang.String):index != -1 => -1
ODL_209:497:java.lang.String_parseAddress(java.lang.String):index + 1 => index
ODL_210:497:java.lang.String_parseAddress(java.lang.String):index + 1 => 1
ODL_211:500:java.lang.String_parseAddress(java.lang.String):-1 => 1
ODL_212:500:java.lang.String_parseAddress(java.lang.String):index != -1 => index
ODL_213:500:java.lang.String_parseAddress(java.lang.String):index != -1 => -1
CDL_1:43:void_setSocket(com.example.smtp.MockServerSocket):10 * 1000 => 1000
CDL_2:43:void_setSocket(com.example.smtp.MockServerSocket):10 * 1000 => 10
CDL_3:49:void_setSocket(com.example.smtp.MockServerSocket):10 * 1000 => 1000
CDL_4:49:void_setSocket(com.example.smtp.MockServerSocket):10 * 1000 => 10
CDL_5:55:void_setSocket(com.example.smtp.MockServerSocket):remoteAddress.getHostName() + "(" => remoteAddress.getHostName()
CDL_6:55:void_setSocket(com.example.smtp.MockServerSocket):remoteAddress.getHostName() + "(" + clientIp + ") socket connected via SMTP." => remoteAddress.getHostName() + "(" + clientIp
CDL_7:75:void_disconnect():socket != null => socket
CDL_8:123:void_helo0(java.lang.String):COMMAND_HELO + " " => COMMAND_HELO
CDL_9:183:void_mail0(java.lang.String):COMMAND_MAIL_FROM + " FROM:" => COMMAND_MAIL_FROM
CDL_10:203:void_rcptTo0(java.lang.String):COMMAND_RCPT_TO + " TO:" => COMMAND_RCPT_TO
CDL_11:264:boolean_HELO_pre():socket != null => socket
CDL_12:269:boolean_NOOP_pre():socket != null => socket
CDL_13:274:boolean_RSET_pre():socket != null => socket
CDL_14:279:boolean_QUIT_pre():socket != null => socket
CDL_15:284:boolean_MAIL_pre():socket != null => socket
CDL_16:289:boolean_RCPT_TO_pre():socket != null => socket
CDL_17:294:boolean_DATA_pre():socket != null => socket
CDL_18:294:boolean_DATA_pre():message.getToAddresses().size() > 0 => message.getToAddresses().size()
CDL_19:306:void_handleCommand():"250 Hello " + argument => argument
CDL_20:335:void_handleCommand():message.getToAddresses().size() > 0 => message.getToAddresses().size()
CDL_21:356:boolean_handleMailFrom(java.lang.String):fromAddress == null => fromAddress
CDL_22:364:boolean_handleMailFrom(java.lang.String):"MAIL FROM: " + fromAddress => fromAddress
CDL_23:370:boolean_handleMailFrom(java.lang.String):"Unable to parse From Address: " + fromAddress => fromAddress
CDL_24:384:void_handleRcptTo(java.lang.String):localUser != null => localUser
CDL_25:394:void_handleRcptTo(java.lang.String):"RCTP TO: " + address.getAddress() => address.getAddress()
CDL_26:394:void_handleRcptTo(java.lang.String):"RCTP TO: " + address.getAddress() + " accepted." => "RCTP TO: " + address.getAddress()
CDL_27:398:void_handleRcptTo(java.lang.String):"Invalid delivery address for incoming mail: " + toAddress => toAddress
CDL_28:398:void_handleRcptTo(java.lang.String):"Invalid delivery address for incoming mail: " + toAddress + " from client: " => "Invalid delivery address for incoming mail: " + toAddress
CDL_29:398:void_handleRcptTo(java.lang.String):"Invalid delivery address for incoming mail: " + toAddress + " from client: " + clientIp + " / " => "Invalid delivery address for incoming mail: " + toAddress + " from client: " + clientIp
CDL_30:404:void_handleRcptTo(java.lang.String):"RCTP TO: " + toAddress => toAddress
CDL_31:404:void_handleRcptTo(java.lang.String):"RCTP TO: " + toAddress + " rejected." => "RCTP TO: " + toAddress
CDL_32:411:void_handleData():configurationManager.getMaximumMessageSize() * 1024 => configurationManager.getMaximumMessageSize()
CDL_33:411:void_handleData():configurationManager.getMaximumMessageSize() * 1024 * 1024 => configurationManager.getMaximumMessageSize() * 1024
CDL_34:413:void_handleData():"X-RecievedDate: " + new java.util.Date() => new java.util.Date()
CDL_35:414:void_handleData():"Received: by EricDaugherty's JES SMTP " + configurationManager.getLocalDomains()[0] => configurationManager.getLocalDomains()[0]
CDL_36:414:void_handleData():"Received: by EricDaugherty's JES SMTP " + configurationManager.getLocalDomains()[0] + " from client: " => "Received: by EricDaugherty's JES SMTP " + configurationManager.getLocalDomains()[0]
CDL_37:419:void_handleData():"Read Data: " + inputString => inputString
CDL_38:424:void_handleData():"Message Rejected.  Message larger than max allowed size (" + configurationManager.getMaximumMessageSize() => configurationManager.getMaximumMessageSize()
CDL_39:424:void_handleData():"Message Rejected.  Message larger than max allowed size (" + configurationManager.getMaximumMessageSize() + " MB)" => "Message Rejected.  Message larger than max allowed size (" + configurationManager.getMaximumMessageSize()
CDL_40:442:void_handleData():"Message " + message.getMessageLocation().getName() => message.getMessageLocation().getName()
CDL_41:442:void_handleData():"Message " + message.getMessageLocation().getName() + " accepted for delivery." => "Message " + message.getMessageLocation().getName()
CDL_42:451:java.lang.String_read():"Read Input: " + inputLine => inputLine
CDL_43:463:void_write(java.lang.String):"Writing: " + message => message
CDL_44:465:void_write(java.lang.String):message + "\r\n" => message
CDL_45:472:java.lang.String_parseCommand(java.lang.String):-1 =>  
CDL_46:486:java.lang.String_parseArgument(java.lang.String):-1 =>  
CDL_47:489:java.lang.String_parseArgument(java.lang.String):index + 1 => index
CDL_48:496:java.lang.String_parseAddress(java.lang.String):-1 =>  
CDL_49:497:java.lang.String_parseAddress(java.lang.String):index + 1 => index
CDL_50:500:java.lang.String_parseAddress(java.lang.String):-1 =>  
