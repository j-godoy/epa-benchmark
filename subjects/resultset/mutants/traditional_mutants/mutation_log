AORB_1:372:int_getRow0():navigator.getRowNumber() + 1 => navigator.getRowNumber() * 1
AORB_2:372:int_getRow0():navigator.getRowNumber() + 1 => navigator.getRowNumber() / 1
AORB_3:372:int_getRow0():navigator.getRowNumber() + 1 => navigator.getRowNumber() % 1
AORB_4:372:int_getRow0():navigator.getRowNumber() + 1 => navigator.getRowNumber() - 1
AORB_5:953:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length + 1 => columnLabels.length * 1
AORB_6:953:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length + 1 => columnLabels.length / 1
AORB_7:953:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length + 1 => columnLabels.length % 1
AORB_8:953:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length + 1 => columnLabels.length - 1
AORB_9:955:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i + 1 => i * 1
AORB_10:955:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i + 1 => i / 1
AORB_11:955:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i + 1 => i % 1
AORB_12:955:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i + 1 => i - 1
AORB_13:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length + 1 => columnLabels.length * 1
AORB_14:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length + 1 => columnLabels.length / 1
AORB_15:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length + 1 => columnLabels.length % 1
AORB_16:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length + 1 => columnLabels.length - 1
AORS_1:132:int_findColumn0(java.lang.String):i++ => i--
AORS_2:140:int_findColumn0(java.lang.String):i++ => i--
AORS_3:152:int_findColumn0(java.lang.String):i++ => i--
AORS_4:176:int_findColumn0(java.lang.String):columnIndex++ => columnIndex--
AORS_5:395:boolean_absolute0(int):row-- => row++
AORS_6:703:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):--columnIndex => columnIndex--
AORS_7:703:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):--columnIndex => columnIndex++
AORS_8:703:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):--columnIndex => ++columnIndex
AORS_9:753:void_checkUpdatable(int):--columnIndex => columnIndex--
AORS_10:753:void_checkUpdatable(int):--columnIndex => columnIndex++
AORS_11:753:void_checkUpdatable(int):--columnIndex => ++columnIndex
AORS_12:799:void_performUpdate():i++ => i--
AORS_13:815:void_performInsert():i++ => i--
AORS_14:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i++ => i--
AORS_15:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i++ => i--
AORS_16:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i++ => i--
AORS_17:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i++ => i--
AORS_18:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i++ => i--
AORS_19:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i++ => i--
AORS_20:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i++ => i--
AODU_1:125:int_findColumn0(java.lang.String):-1 => 1
AODU_2:131:int_findColumn0(java.lang.String):-1 => 1
AODU_3:957:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):-1 => 1
AODS_1:176:int_findColumn0(java.lang.String):columnIndex++ => columnIndex
AODS_2:395:boolean_absolute0(int):row-- => row
AODS_3:703:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):--columnIndex => columnIndex
AODS_4:753:void_checkUpdatable(int):--columnIndex => columnIndex
AOIU_1:74:int_getInt(int):columnIndex => -columnIndex
AOIU_2:75:int_getInt(int):rv => -rv
AOIU_3:84:int_getInt0(int):columnIndex => -columnIndex
AOIU_4:93:int_getInt(java.lang.String):rv => -rv
AOIU_5:110:int_findColumn(java.lang.String):rv => -rv
AOIU_6:126:int_findColumn0(java.lang.String):columnIndex => -columnIndex
AOIU_7:127:int_findColumn0(java.lang.String):columnIndex => -columnIndex
AOIU_8:132:int_findColumn0(java.lang.String):i => -i
AOIU_9:132:int_findColumn0(java.lang.String):columnCount => -columnCount
AOIU_10:133:int_findColumn0(java.lang.String):i => -i
AOIU_11:134:int_findColumn0(java.lang.String):i => -i
AOIU_12:139:int_findColumn0(java.lang.String):columnIndex => -columnIndex
AOIU_13:140:int_findColumn0(java.lang.String):i => -i
AOIU_14:140:int_findColumn0(java.lang.String):columnCount => -columnCount
AOIU_15:141:int_findColumn0(java.lang.String):i => -i
AOIU_16:142:int_findColumn0(java.lang.String):i => -i
AOIU_17:147:int_findColumn0(java.lang.String):columnIndex => -columnIndex
AOIU_18:149:int_findColumn0(java.lang.String):position => -position
AOIU_19:152:int_findColumn0(java.lang.String):i => -i
AOIU_20:152:int_findColumn0(java.lang.String):columnCount => -columnCount
AOIU_21:153:int_findColumn0(java.lang.String):i => -i
AOIU_22:157:int_findColumn0(java.lang.String):i => -i
AOIU_23:159:int_findColumn0(java.lang.String):i => -i
AOIU_24:162:int_findColumn0(java.lang.String):i => -i
AOIU_25:168:int_findColumn0(java.lang.String):i => -i
AOIU_26:173:int_findColumn0(java.lang.String):columnIndex => -columnIndex
AOIU_27:180:int_findColumn0(java.lang.String):columnIndex => -columnIndex
AOIU_28:181:int_findColumn0(java.lang.String):columnIndex => -columnIndex
AOIU_29:359:int_getRow():rv => -rv
AOIU_30:379:boolean_absolute(int):row => -row
AOIU_31:394:boolean_absolute0(int):row => -row
AOIU_32:397:boolean_absolute0(int):row => -row
AOIU_33:401:boolean_absolute0(int):row => -row
AOIU_34:408:boolean_relative(int):rows => -rows
AOIU_35:423:boolean_relative0(int):rows => -rows
AOIU_36:453:void_updateInt(int,int):columnIndex => -columnIndex
AOIU_37:453:void_updateInt(int,int):x => -x
AOIU_38:462:void_updateInt0(int,int):columnIndex => -columnIndex
AOIU_39:463:void_updateInt0(int,int):columnIndex => -columnIndex
AOIU_40:463:void_updateInt0(int,int):x => -x
AOIU_41:470:void_updateInt(java.lang.String,int):x => -x
AOIU_42:479:void_updateInt0(java.lang.String,int):x => -x
AOIU_43:687:void_checkColumn(int):columnIndex => -columnIndex
AOIU_44:702:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):columnIndex => -columnIndex
AOIU_45:704:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):columnIndex => -columnIndex
AOIU_46:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):sourceType.typeCode => -sourceType.typeCode
AOIU_47:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):targetType.typeCode => -targetType.typeCode
AOIU_48:749:void_checkUpdatable(int):columnIndex => -columnIndex
AOIU_49:764:void_startUpdate(int):columnIndex => -columnIndex
AOIU_50:765:void_startUpdate(int):currentUpdateRowNumber => -currentUpdateRowNumber
AOIU_51:798:void_performUpdate():columnCount => -columnCount
AOIU_52:799:void_performUpdate():i => -i
AOIU_53:799:void_performUpdate():columnCount => -columnCount
AOIU_54:801:void_performUpdate():i => -i
AOIU_55:803:void_performUpdate():MockResultConstants.UPDATE_CURSOR => -MockResultConstants.UPDATE_CURSOR
AOIU_56:815:void_performInsert():i => -i
AOIU_57:815:void_performInsert():columnCount => -columnCount
AOIU_58:820:void_performInsert():i => -i
AOIU_59:822:void_performInsert():MockResultConstants.INSERT_CURSOR => -MockResultConstants.INSERT_CURSOR
AOIU_60:833:void_performDelete():columnCount => -columnCount
AOIU_61:834:void_performDelete():columnCount => -columnCount
AOIU_62:835:void_performDelete():MockResultConstants.DELETE_CURSOR => -MockResultConstants.DELETE_CURSOR
AOIU_63:849:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):r.rsProperties => -r.rsProperties
AOIU_64:853:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):rsProperties => -rsProperties
AOIU_65:854:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):rsProperties => -rsProperties
AOIU_66:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i => -i
AOIU_67:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):metaData.colIndexes.length => -metaData.colIndexes.length
AOIU_68:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i => -i
AOIU_69:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => -columnsCount
AOIU_70:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => -columnsCount
AOIU_71:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows => -rows
AOIU_72:897:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => -columnsCount
AOIU_73:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => -i
AOIU_74:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => -columnsCount
AOIU_75:901:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows => -rows
AOIU_76:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => -i
AOIU_77:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows => -rows
AOIU_78:903:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => -columnsCount
AOIU_79:915:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):r.rsProperties => -r.rsProperties
AOIU_80:920:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):rsProperties => -rsProperties
AOIU_81:921:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):rsProperties => -rsProperties
AOIU_82:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i => -i
AOIU_83:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):metaData.colIndexes.length => -metaData.colIndexes.length
AOIU_84:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i => -i
AOIU_85:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => -i
AOIU_86:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => -columnLabels.length
AOIU_87:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => -i
AOIU_88:945:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => -i
AOIU_89:951:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):r.rsProperties => -r.rsProperties
AOIU_90:952:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):r.rsProperties => -r.rsProperties
AOIU_91:953:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => -columnLabels.length
AOIU_92:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => -i
AOIU_93:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => -columnLabels.length
AOIU_94:955:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => -i
AOIU_95:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => -columnLabels.length
AOIU_96:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => -columnLabels.length
AOIU_97:973:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):values.length => -values.length
AOIU_98:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i => -i
AOIU_99:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):values.length => -values.length
AOIU_100:975:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i => -i
AOIS_1:74:int_getInt(int):columnIndex => columnIndex++
AOIS_2:74:int_getInt(int):columnIndex => columnIndex--
AOIS_3:75:int_getInt(int):rv => rv++
AOIS_4:75:int_getInt(int):rv => rv--
AOIS_5:84:int_getInt0(int):columnIndex => columnIndex++
AOIS_6:84:int_getInt0(int):columnIndex => columnIndex--
AOIS_7:93:int_getInt(java.lang.String):rv => rv++
AOIS_8:93:int_getInt(java.lang.String):rv => rv--
AOIS_9:110:int_findColumn(java.lang.String):rv => rv++
AOIS_10:110:int_findColumn(java.lang.String):rv => rv--
AOIS_11:126:int_findColumn0(java.lang.String):columnIndex => ++columnIndex
AOIS_12:126:int_findColumn0(java.lang.String):columnIndex => --columnIndex
AOIS_13:126:int_findColumn0(java.lang.String):columnIndex => columnIndex++
AOIS_14:126:int_findColumn0(java.lang.String):columnIndex => columnIndex--
AOIS_15:127:int_findColumn0(java.lang.String):columnIndex => columnIndex++
AOIS_16:127:int_findColumn0(java.lang.String):columnIndex => columnIndex--
AOIS_17:132:int_findColumn0(java.lang.String):i => ++i
AOIS_18:132:int_findColumn0(java.lang.String):i => --i
AOIS_19:132:int_findColumn0(java.lang.String):i => i++
AOIS_20:132:int_findColumn0(java.lang.String):i => i--
AOIS_21:132:int_findColumn0(java.lang.String):columnCount => ++columnCount
AOIS_22:132:int_findColumn0(java.lang.String):columnCount => --columnCount
AOIS_23:132:int_findColumn0(java.lang.String):columnCount => columnCount++
AOIS_24:132:int_findColumn0(java.lang.String):columnCount => columnCount--
AOIS_25:133:int_findColumn0(java.lang.String):i => i++
AOIS_26:133:int_findColumn0(java.lang.String):i => i--
AOIS_27:134:int_findColumn0(java.lang.String):i => ++i
AOIS_28:134:int_findColumn0(java.lang.String):i => --i
AOIS_29:134:int_findColumn0(java.lang.String):i => i++
AOIS_30:134:int_findColumn0(java.lang.String):i => i--
AOIS_31:139:int_findColumn0(java.lang.String):columnIndex => ++columnIndex
AOIS_32:139:int_findColumn0(java.lang.String):columnIndex => --columnIndex
AOIS_33:139:int_findColumn0(java.lang.String):columnIndex => columnIndex++
AOIS_34:139:int_findColumn0(java.lang.String):columnIndex => columnIndex--
AOIS_35:140:int_findColumn0(java.lang.String):i => ++i
AOIS_36:140:int_findColumn0(java.lang.String):i => --i
AOIS_37:140:int_findColumn0(java.lang.String):i => i++
AOIS_38:140:int_findColumn0(java.lang.String):i => i--
AOIS_39:140:int_findColumn0(java.lang.String):columnCount => ++columnCount
AOIS_40:140:int_findColumn0(java.lang.String):columnCount => --columnCount
AOIS_41:140:int_findColumn0(java.lang.String):columnCount => columnCount++
AOIS_42:140:int_findColumn0(java.lang.String):columnCount => columnCount--
AOIS_43:141:int_findColumn0(java.lang.String):i => i++
AOIS_44:141:int_findColumn0(java.lang.String):i => i--
AOIS_45:142:int_findColumn0(java.lang.String):i => ++i
AOIS_46:142:int_findColumn0(java.lang.String):i => --i
AOIS_47:142:int_findColumn0(java.lang.String):i => i++
AOIS_48:142:int_findColumn0(java.lang.String):i => i--
AOIS_49:147:int_findColumn0(java.lang.String):columnIndex => ++columnIndex
AOIS_50:147:int_findColumn0(java.lang.String):columnIndex => --columnIndex
AOIS_51:147:int_findColumn0(java.lang.String):columnIndex => columnIndex++
AOIS_52:147:int_findColumn0(java.lang.String):columnIndex => columnIndex--
AOIS_53:149:int_findColumn0(java.lang.String):position => ++position
AOIS_54:149:int_findColumn0(java.lang.String):position => --position
AOIS_55:149:int_findColumn0(java.lang.String):position => position++
AOIS_56:149:int_findColumn0(java.lang.String):position => position--
AOIS_57:152:int_findColumn0(java.lang.String):i => ++i
AOIS_58:152:int_findColumn0(java.lang.String):i => --i
AOIS_59:152:int_findColumn0(java.lang.String):i => i++
AOIS_60:152:int_findColumn0(java.lang.String):i => i--
AOIS_61:152:int_findColumn0(java.lang.String):columnCount => ++columnCount
AOIS_62:152:int_findColumn0(java.lang.String):columnCount => --columnCount
AOIS_63:152:int_findColumn0(java.lang.String):columnCount => columnCount++
AOIS_64:152:int_findColumn0(java.lang.String):columnCount => columnCount--
AOIS_65:153:int_findColumn0(java.lang.String):i => i++
AOIS_66:153:int_findColumn0(java.lang.String):i => i--
AOIS_67:157:int_findColumn0(java.lang.String):i => i++
AOIS_68:157:int_findColumn0(java.lang.String):i => i--
AOIS_69:159:int_findColumn0(java.lang.String):i => ++i
AOIS_70:159:int_findColumn0(java.lang.String):i => --i
AOIS_71:159:int_findColumn0(java.lang.String):i => i++
AOIS_72:159:int_findColumn0(java.lang.String):i => i--
AOIS_73:162:int_findColumn0(java.lang.String):i => i++
AOIS_74:162:int_findColumn0(java.lang.String):i => i--
AOIS_75:168:int_findColumn0(java.lang.String):i => ++i
AOIS_76:168:int_findColumn0(java.lang.String):i => --i
AOIS_77:168:int_findColumn0(java.lang.String):i => i++
AOIS_78:168:int_findColumn0(java.lang.String):i => i--
AOIS_79:173:int_findColumn0(java.lang.String):columnIndex => ++columnIndex
AOIS_80:173:int_findColumn0(java.lang.String):columnIndex => --columnIndex
AOIS_81:173:int_findColumn0(java.lang.String):columnIndex => columnIndex++
AOIS_82:173:int_findColumn0(java.lang.String):columnIndex => columnIndex--
AOIS_83:180:int_findColumn0(java.lang.String):columnIndex => columnIndex++
AOIS_84:180:int_findColumn0(java.lang.String):columnIndex => columnIndex--
AOIS_85:181:int_findColumn0(java.lang.String):columnIndex => columnIndex++
AOIS_86:181:int_findColumn0(java.lang.String):columnIndex => columnIndex--
AOIS_87:359:int_getRow():rv => rv++
AOIS_88:359:int_getRow():rv => rv--
AOIS_89:379:boolean_absolute(int):row => row++
AOIS_90:379:boolean_absolute(int):row => row--
AOIS_91:394:boolean_absolute0(int):row => ++row
AOIS_92:394:boolean_absolute0(int):row => --row
AOIS_93:394:boolean_absolute0(int):row => row++
AOIS_94:394:boolean_absolute0(int):row => row--
AOIS_95:397:boolean_absolute0(int):row => ++row
AOIS_96:397:boolean_absolute0(int):row => --row
AOIS_97:397:boolean_absolute0(int):row => row++
AOIS_98:397:boolean_absolute0(int):row => row--
AOIS_99:401:boolean_absolute0(int):row => row++
AOIS_100:401:boolean_absolute0(int):row => row--
AOIS_101:408:boolean_relative(int):rows => rows++
AOIS_102:408:boolean_relative(int):rows => rows--
AOIS_103:423:boolean_relative0(int):rows => rows++
AOIS_104:423:boolean_relative0(int):rows => rows--
AOIS_105:453:void_updateInt(int,int):columnIndex => columnIndex++
AOIS_106:453:void_updateInt(int,int):columnIndex => columnIndex--
AOIS_107:453:void_updateInt(int,int):x => x++
AOIS_108:453:void_updateInt(int,int):x => x--
AOIS_109:462:void_updateInt0(int,int):columnIndex => columnIndex++
AOIS_110:462:void_updateInt0(int,int):columnIndex => columnIndex--
AOIS_111:463:void_updateInt0(int,int):columnIndex => columnIndex++
AOIS_112:463:void_updateInt0(int,int):columnIndex => columnIndex--
AOIS_113:463:void_updateInt0(int,int):x => x++
AOIS_114:463:void_updateInt0(int,int):x => x--
AOIS_115:470:void_updateInt(java.lang.String,int):x => x++
AOIS_116:470:void_updateInt(java.lang.String,int):x => x--
AOIS_117:479:void_updateInt0(java.lang.String,int):x => x++
AOIS_118:479:void_updateInt0(java.lang.String,int):x => x--
AOIS_119:686:void_checkColumn(int):columnIndex => ++columnIndex
AOIS_120:686:void_checkColumn(int):columnIndex => --columnIndex
AOIS_121:686:void_checkColumn(int):columnIndex => columnIndex++
AOIS_122:686:void_checkColumn(int):columnIndex => columnIndex--
AOIS_123:686:void_checkColumn(int):columnIndex => ++columnIndex
AOIS_124:686:void_checkColumn(int):columnIndex => --columnIndex
AOIS_125:686:void_checkColumn(int):columnIndex => columnIndex++
AOIS_126:686:void_checkColumn(int):columnIndex => columnIndex--
AOIS_127:686:void_checkColumn(int):columnCount => ++columnCount
AOIS_128:686:void_checkColumn(int):columnCount => --columnCount
AOIS_129:686:void_checkColumn(int):columnCount => columnCount++
AOIS_130:686:void_checkColumn(int):columnCount => columnCount--
AOIS_131:687:void_checkColumn(int):columnIndex => columnIndex++
AOIS_132:687:void_checkColumn(int):columnIndex => columnIndex--
AOIS_133:702:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):columnIndex => columnIndex++
AOIS_134:702:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):columnIndex => columnIndex--
AOIS_135:704:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):columnIndex => ++columnIndex
AOIS_136:704:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):columnIndex => --columnIndex
AOIS_137:704:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):columnIndex => columnIndex++
AOIS_138:704:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):columnIndex => columnIndex--
AOIS_139:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):sourceType.typeCode => ++sourceType.typeCode
AOIS_140:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):sourceType.typeCode => --sourceType.typeCode
AOIS_141:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):sourceType.typeCode => sourceType.typeCode++
AOIS_142:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):sourceType.typeCode => sourceType.typeCode--
AOIS_143:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):targetType.typeCode => ++targetType.typeCode
AOIS_144:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):targetType.typeCode => --targetType.typeCode
AOIS_145:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):targetType.typeCode => targetType.typeCode++
AOIS_146:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):targetType.typeCode => targetType.typeCode--
AOIS_147:749:void_checkUpdatable(int):columnIndex => columnIndex++
AOIS_148:749:void_checkUpdatable(int):columnIndex => columnIndex--
AOIS_149:764:void_startUpdate(int):columnIndex => columnIndex++
AOIS_150:764:void_startUpdate(int):columnIndex => columnIndex--
AOIS_151:765:void_startUpdate(int):currentUpdateRowNumber => ++currentUpdateRowNumber
AOIS_152:765:void_startUpdate(int):currentUpdateRowNumber => --currentUpdateRowNumber
AOIS_153:765:void_startUpdate(int):currentUpdateRowNumber => currentUpdateRowNumber++
AOIS_154:765:void_startUpdate(int):currentUpdateRowNumber => currentUpdateRowNumber--
AOIS_155:798:void_performUpdate():columnCount => ++columnCount
AOIS_156:798:void_performUpdate():columnCount => --columnCount
AOIS_157:798:void_performUpdate():columnCount => columnCount++
AOIS_158:798:void_performUpdate():columnCount => columnCount--
AOIS_159:799:void_performUpdate():i => ++i
AOIS_160:799:void_performUpdate():i => --i
AOIS_161:799:void_performUpdate():i => i++
AOIS_162:799:void_performUpdate():i => i--
AOIS_163:799:void_performUpdate():columnCount => ++columnCount
AOIS_164:799:void_performUpdate():columnCount => --columnCount
AOIS_165:799:void_performUpdate():columnCount => columnCount++
AOIS_166:799:void_performUpdate():columnCount => columnCount--
AOIS_167:800:void_performUpdate():i => ++i
AOIS_168:800:void_performUpdate():i => --i
AOIS_169:800:void_performUpdate():i => i++
AOIS_170:800:void_performUpdate():i => i--
AOIS_171:800:void_performUpdate():i => ++i
AOIS_172:800:void_performUpdate():i => --i
AOIS_173:800:void_performUpdate():i => i++
AOIS_174:800:void_performUpdate():i => i--
AOIS_175:801:void_performUpdate():i => ++i
AOIS_176:801:void_performUpdate():i => --i
AOIS_177:801:void_performUpdate():i => i++
AOIS_178:801:void_performUpdate():i => i--
AOIS_179:803:void_performUpdate():MockResultConstants.UPDATE_CURSOR => MockResultConstants.UPDATE_CURSOR++
AOIS_180:803:void_performUpdate():MockResultConstants.UPDATE_CURSOR => MockResultConstants.UPDATE_CURSOR--
AOIS_181:815:void_performInsert():i => ++i
AOIS_182:815:void_performInsert():i => --i
AOIS_183:815:void_performInsert():i => i++
AOIS_184:815:void_performInsert():i => i--
AOIS_185:815:void_performInsert():columnCount => ++columnCount
AOIS_186:815:void_performInsert():columnCount => --columnCount
AOIS_187:815:void_performInsert():columnCount => columnCount++
AOIS_188:815:void_performInsert():columnCount => columnCount--
AOIS_189:816:void_performInsert():i => ++i
AOIS_190:816:void_performInsert():i => --i
AOIS_191:816:void_performInsert():i => i++
AOIS_192:816:void_performInsert():i => i--
AOIS_193:816:void_performInsert():i => ++i
AOIS_194:816:void_performInsert():i => --i
AOIS_195:816:void_performInsert():i => i++
AOIS_196:816:void_performInsert():i => i--
AOIS_197:820:void_performInsert():i => ++i
AOIS_198:820:void_performInsert():i => --i
AOIS_199:820:void_performInsert():i => i++
AOIS_200:820:void_performInsert():i => i--
AOIS_201:822:void_performInsert():MockResultConstants.INSERT_CURSOR => MockResultConstants.INSERT_CURSOR++
AOIS_202:822:void_performInsert():MockResultConstants.INSERT_CURSOR => MockResultConstants.INSERT_CURSOR--
AOIS_203:833:void_performDelete():columnCount => ++columnCount
AOIS_204:833:void_performDelete():columnCount => --columnCount
AOIS_205:833:void_performDelete():columnCount => columnCount++
AOIS_206:833:void_performDelete():columnCount => columnCount--
AOIS_207:834:void_performDelete():columnCount => ++columnCount
AOIS_208:834:void_performDelete():columnCount => --columnCount
AOIS_209:834:void_performDelete():columnCount => columnCount++
AOIS_210:834:void_performDelete():columnCount => columnCount--
AOIS_211:835:void_performDelete():MockResultConstants.DELETE_CURSOR => MockResultConstants.DELETE_CURSOR++
AOIS_212:835:void_performDelete():MockResultConstants.DELETE_CURSOR => MockResultConstants.DELETE_CURSOR--
AOIS_213:849:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):r.rsProperties => ++r.rsProperties
AOIS_214:849:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):r.rsProperties => --r.rsProperties
AOIS_215:849:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):r.rsProperties => r.rsProperties++
AOIS_216:849:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):r.rsProperties => r.rsProperties--
AOIS_217:853:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):rsProperties => ++rsProperties
AOIS_218:853:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):rsProperties => --rsProperties
AOIS_219:853:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):rsProperties => rsProperties++
AOIS_220:853:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):rsProperties => rsProperties--
AOIS_221:854:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):rsProperties => rsProperties++
AOIS_222:854:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):rsProperties => rsProperties--
AOIS_223:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i => ++i
AOIS_224:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i => --i
AOIS_225:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i => i++
AOIS_226:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i => i--
AOIS_227:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):metaData.colIndexes.length => ++metaData.colIndexes.length
AOIS_228:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):metaData.colIndexes.length => --metaData.colIndexes.length
AOIS_229:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):metaData.colIndexes.length => metaData.colIndexes.length++
AOIS_230:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):metaData.colIndexes.length => metaData.colIndexes.length--
AOIS_231:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i => ++i
AOIS_232:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i => --i
AOIS_233:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i => i++
AOIS_234:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i => i--
AOIS_235:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => ++columnsCount
AOIS_236:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => --columnsCount
AOIS_237:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => columnsCount++
AOIS_238:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => columnsCount--
AOIS_239:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => ++columnsCount
AOIS_240:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => --columnsCount
AOIS_241:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => columnsCount++
AOIS_242:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => columnsCount--
AOIS_243:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows => ++rows
AOIS_244:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows => --rows
AOIS_245:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows => rows++
AOIS_246:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows => rows--
AOIS_247:897:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => columnsCount++
AOIS_248:897:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => columnsCount--
AOIS_249:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => ++i
AOIS_250:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => --i
AOIS_251:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => i++
AOIS_252:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => i--
AOIS_253:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => ++columnsCount
AOIS_254:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => --columnsCount
AOIS_255:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => columnsCount++
AOIS_256:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => columnsCount--
AOIS_257:899:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => ++i
AOIS_258:899:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => --i
AOIS_259:899:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => i++
AOIS_260:899:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => i--
AOIS_261:901:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows => rows++
AOIS_262:901:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows => rows--
AOIS_263:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => ++i
AOIS_264:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => --i
AOIS_265:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => i++
AOIS_266:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => i--
AOIS_267:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows => ++rows
AOIS_268:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows => --rows
AOIS_269:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows => rows++
AOIS_270:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows => rows--
AOIS_271:903:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => ++columnsCount
AOIS_272:903:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => --columnsCount
AOIS_273:903:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => columnsCount++
AOIS_274:903:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => columnsCount--
AOIS_275:915:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):r.rsProperties => ++r.rsProperties
AOIS_276:915:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):r.rsProperties => --r.rsProperties
AOIS_277:915:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):r.rsProperties => r.rsProperties++
AOIS_278:915:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):r.rsProperties => r.rsProperties--
AOIS_279:920:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):rsProperties => ++rsProperties
AOIS_280:920:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):rsProperties => --rsProperties
AOIS_281:920:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):rsProperties => rsProperties++
AOIS_282:920:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):rsProperties => rsProperties--
AOIS_283:921:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):rsProperties => rsProperties++
AOIS_284:921:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):rsProperties => rsProperties--
AOIS_285:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i => ++i
AOIS_286:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i => --i
AOIS_287:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i => i++
AOIS_288:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i => i--
AOIS_289:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):metaData.colIndexes.length => ++metaData.colIndexes.length
AOIS_290:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):metaData.colIndexes.length => --metaData.colIndexes.length
AOIS_291:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):metaData.colIndexes.length => metaData.colIndexes.length++
AOIS_292:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):metaData.colIndexes.length => metaData.colIndexes.length--
AOIS_293:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i => ++i
AOIS_294:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i => --i
AOIS_295:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i => i++
AOIS_296:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i => i--
AOIS_297:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => ++i
AOIS_298:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => --i
AOIS_299:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => i++
AOIS_300:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => i--
AOIS_301:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => ++columnLabels.length
AOIS_302:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => --columnLabels.length
AOIS_303:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => columnLabels.length++
AOIS_304:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => columnLabels.length--
AOIS_305:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => ++i
AOIS_306:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => --i
AOIS_307:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => i++
AOIS_308:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => i--
AOIS_309:945:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => ++i
AOIS_310:945:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => --i
AOIS_311:945:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => i++
AOIS_312:945:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => i--
AOIS_313:951:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):r.rsProperties => ++r.rsProperties
AOIS_314:951:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):r.rsProperties => --r.rsProperties
AOIS_315:951:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):r.rsProperties => r.rsProperties++
AOIS_316:951:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):r.rsProperties => r.rsProperties--
AOIS_317:952:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):r.rsProperties => ++r.rsProperties
AOIS_318:952:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):r.rsProperties => --r.rsProperties
AOIS_319:952:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):r.rsProperties => r.rsProperties++
AOIS_320:952:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):r.rsProperties => r.rsProperties--
AOIS_321:953:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => ++columnLabels.length
AOIS_322:953:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => --columnLabels.length
AOIS_323:953:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => columnLabels.length++
AOIS_324:953:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => columnLabels.length--
AOIS_325:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => ++i
AOIS_326:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => --i
AOIS_327:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => i++
AOIS_328:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => i--
AOIS_329:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => ++columnLabels.length
AOIS_330:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => --columnLabels.length
AOIS_331:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => columnLabels.length++
AOIS_332:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => columnLabels.length--
AOIS_333:955:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => ++i
AOIS_334:955:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => --i
AOIS_335:955:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => i++
AOIS_336:955:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => i--
AOIS_337:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => columnLabels.length++
AOIS_338:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => columnLabels.length--
AOIS_339:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => ++columnLabels.length
AOIS_340:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => --columnLabels.length
AOIS_341:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => columnLabels.length++
AOIS_342:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => columnLabels.length--
AOIS_343:973:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):values.length => values.length++
AOIS_344:973:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):values.length => values.length--
AOIS_345:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i => ++i
AOIS_346:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i => --i
AOIS_347:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i => i++
AOIS_348:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i => i--
AOIS_349:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):values.length => ++values.length
AOIS_350:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):values.length => --values.length
AOIS_351:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):values.length => values.length++
AOIS_352:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):values.length => values.length--
AOIS_353:975:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i => ++i
AOIS_354:975:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i => --i
AOIS_355:975:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i => i++
AOIS_356:975:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i => i--
ROR_1:42:void_close0(): navigator == null  =>   navigator != null
ROR_2:47:void_close0(): statement != null  =>   statement == null
ROR_3:85:int_getInt0(int): o == null  =>   o != null
ROR_4:120:int_findColumn0(java.lang.String): columnLabel == null  =>   columnLabel != null
ROR_5:124:int_findColumn0(java.lang.String): columnMap != null  =>   columnMap == null
ROR_6:126:int_findColumn0(java.lang.String): columnIndex != -1  =>   columnIndex > -1
ROR_7:126:int_findColumn0(java.lang.String): columnIndex != -1  =>   columnIndex >= -1
ROR_8:126:int_findColumn0(java.lang.String): columnIndex != -1  =>   columnIndex < -1
ROR_9:126:int_findColumn0(java.lang.String): columnIndex != -1  =>   columnIndex <= -1
ROR_10:126:int_findColumn0(java.lang.String): columnIndex != -1  =>   columnIndex == -1
ROR_11:126:int_findColumn0(java.lang.String): columnIndex != -1  =>   true
ROR_12:126:int_findColumn0(java.lang.String): columnIndex != -1  =>   false
ROR_13:132:int_findColumn0(java.lang.String): i < columnCount  =>   i > columnCount
ROR_14:132:int_findColumn0(java.lang.String): i < columnCount  =>   i >= columnCount
ROR_15:132:int_findColumn0(java.lang.String): i < columnCount  =>   i <= columnCount
ROR_16:132:int_findColumn0(java.lang.String): i < columnCount  =>   i == columnCount
ROR_17:132:int_findColumn0(java.lang.String): i < columnCount  =>   i != columnCount
ROR_18:132:int_findColumn0(java.lang.String): i < columnCount  =>   true
ROR_19:132:int_findColumn0(java.lang.String): i < columnCount  =>   false
ROR_20:139:int_findColumn0(java.lang.String): columnIndex < 0  =>   columnIndex > 0
ROR_21:139:int_findColumn0(java.lang.String): columnIndex < 0  =>   columnIndex >= 0
ROR_22:139:int_findColumn0(java.lang.String): columnIndex < 0  =>   columnIndex <= 0
ROR_23:139:int_findColumn0(java.lang.String): columnIndex < 0  =>   columnIndex == 0
ROR_24:139:int_findColumn0(java.lang.String): columnIndex < 0  =>   columnIndex != 0
ROR_25:139:int_findColumn0(java.lang.String): columnIndex < 0  =>   true
ROR_26:139:int_findColumn0(java.lang.String): columnIndex < 0  =>   false
ROR_27:140:int_findColumn0(java.lang.String): i < columnCount  =>   i > columnCount
ROR_28:140:int_findColumn0(java.lang.String): i < columnCount  =>   i >= columnCount
ROR_29:140:int_findColumn0(java.lang.String): i < columnCount  =>   i <= columnCount
ROR_30:140:int_findColumn0(java.lang.String): i < columnCount  =>   i == columnCount
ROR_31:140:int_findColumn0(java.lang.String): i < columnCount  =>   i != columnCount
ROR_32:140:int_findColumn0(java.lang.String): i < columnCount  =>   true
ROR_33:140:int_findColumn0(java.lang.String): i < columnCount  =>   false
ROR_34:147:int_findColumn0(java.lang.String): columnIndex < 0  =>   columnIndex > 0
ROR_35:147:int_findColumn0(java.lang.String): columnIndex < 0  =>   columnIndex >= 0
ROR_36:147:int_findColumn0(java.lang.String): columnIndex < 0  =>   columnIndex <= 0
ROR_37:147:int_findColumn0(java.lang.String): columnIndex < 0  =>   columnIndex == 0
ROR_38:147:int_findColumn0(java.lang.String): columnIndex < 0  =>   columnIndex != 0
ROR_39:147:int_findColumn0(java.lang.String): columnIndex < 0  =>   true
ROR_40:147:int_findColumn0(java.lang.String): columnIndex < 0  =>   false
ROR_41:149:int_findColumn0(java.lang.String): position < 0  =>   position > 0
ROR_42:149:int_findColumn0(java.lang.String): position < 0  =>   position >= 0
ROR_43:149:int_findColumn0(java.lang.String): position < 0  =>   position <= 0
ROR_44:149:int_findColumn0(java.lang.String): position < 0  =>   position == 0
ROR_45:149:int_findColumn0(java.lang.String): position < 0  =>   position != 0
ROR_46:149:int_findColumn0(java.lang.String): position < 0  =>   true
ROR_47:149:int_findColumn0(java.lang.String): position < 0  =>   false
ROR_48:152:int_findColumn0(java.lang.String): i < columnCount  =>   i > columnCount
ROR_49:152:int_findColumn0(java.lang.String): i < columnCount  =>   i >= columnCount
ROR_50:152:int_findColumn0(java.lang.String): i < columnCount  =>   i <= columnCount
ROR_51:152:int_findColumn0(java.lang.String): i < columnCount  =>   i == columnCount
ROR_52:152:int_findColumn0(java.lang.String): i < columnCount  =>   i != columnCount
ROR_53:152:int_findColumn0(java.lang.String): i < columnCount  =>   true
ROR_54:152:int_findColumn0(java.lang.String): i < columnCount  =>   false
ROR_55:154:int_findColumn0(java.lang.String): tabName == null  =>   tabName != null
ROR_56:154:int_findColumn0(java.lang.String): tabName.length() == 0  =>   tabName.length() > 0
ROR_57:154:int_findColumn0(java.lang.String): tabName.length() == 0  =>   tabName.length() >= 0
ROR_58:154:int_findColumn0(java.lang.String): tabName.length() == 0  =>   tabName.length() < 0
ROR_59:154:int_findColumn0(java.lang.String): tabName.length() == 0  =>   tabName.length() <= 0
ROR_60:154:int_findColumn0(java.lang.String): tabName.length() == 0  =>   tabName.length() != 0
ROR_61:154:int_findColumn0(java.lang.String): tabName.length() == 0  =>   true
ROR_62:154:int_findColumn0(java.lang.String): tabName.length() == 0  =>   false
ROR_63:163:int_findColumn0(java.lang.String): schemName == null  =>   schemName != null
ROR_64:163:int_findColumn0(java.lang.String): schemName.length() == 0  =>   schemName.length() > 0
ROR_65:163:int_findColumn0(java.lang.String): schemName.length() == 0  =>   schemName.length() >= 0
ROR_66:163:int_findColumn0(java.lang.String): schemName.length() == 0  =>   schemName.length() < 0
ROR_67:163:int_findColumn0(java.lang.String): schemName.length() == 0  =>   schemName.length() <= 0
ROR_68:163:int_findColumn0(java.lang.String): schemName.length() == 0  =>   schemName.length() != 0
ROR_69:163:int_findColumn0(java.lang.String): schemName.length() == 0  =>   true
ROR_70:163:int_findColumn0(java.lang.String): schemName.length() == 0  =>   false
ROR_71:173:int_findColumn0(java.lang.String): columnIndex < 0  =>   columnIndex > 0
ROR_72:173:int_findColumn0(java.lang.String): columnIndex < 0  =>   columnIndex >= 0
ROR_73:173:int_findColumn0(java.lang.String): columnIndex < 0  =>   columnIndex <= 0
ROR_74:173:int_findColumn0(java.lang.String): columnIndex < 0  =>   columnIndex == 0
ROR_75:173:int_findColumn0(java.lang.String): columnIndex < 0  =>   columnIndex != 0
ROR_76:173:int_findColumn0(java.lang.String): columnIndex < 0  =>   true
ROR_77:173:int_findColumn0(java.lang.String): columnIndex < 0  =>   false
ROR_78:177:int_findColumn0(java.lang.String): columnMap == null  =>   columnMap != null
ROR_79:394:boolean_absolute0(int): row > 0  =>   row >= 0
ROR_80:394:boolean_absolute0(int): row > 0  =>   row < 0
ROR_81:394:boolean_absolute0(int): row > 0  =>   row <= 0
ROR_82:394:boolean_absolute0(int): row > 0  =>   row == 0
ROR_83:394:boolean_absolute0(int): row > 0  =>   row != 0
ROR_84:394:boolean_absolute0(int): row > 0  =>   true
ROR_85:394:boolean_absolute0(int): row > 0  =>   false
ROR_86:397:boolean_absolute0(int): row == 0  =>   row > 0
ROR_87:397:boolean_absolute0(int): row == 0  =>   row >= 0
ROR_88:397:boolean_absolute0(int): row == 0  =>   row < 0
ROR_89:397:boolean_absolute0(int): row == 0  =>   row <= 0
ROR_90:397:boolean_absolute0(int): row == 0  =>   row != 0
ROR_91:397:boolean_absolute0(int): row == 0  =>   true
ROR_92:397:boolean_absolute0(int): row == 0  =>   false
ROR_93:650:java.lang.Object[]_getCurrent(): lnavigator == null  =>   lnavigator != null
ROR_94:666:java.lang.Object[]_getCurrent(): data == null  =>   data != null
ROR_95:675:void_checkClosed(): navigator == null  =>   navigator != null
ROR_96:683:void_checkColumn(int): navigator == null  =>   navigator != null
ROR_97:686:void_checkColumn(int): columnIndex < 1  =>   columnIndex > 1
ROR_98:686:void_checkColumn(int): columnIndex < 1  =>   columnIndex >= 1
ROR_99:686:void_checkColumn(int): columnIndex < 1  =>   columnIndex <= 1
ROR_100:686:void_checkColumn(int): columnIndex < 1  =>   columnIndex == 1
ROR_101:686:void_checkColumn(int): columnIndex < 1  =>   columnIndex != 1
ROR_102:686:void_checkColumn(int): columnIndex < 1  =>   true
ROR_103:686:void_checkColumn(int): columnIndex < 1  =>   false
ROR_104:686:void_checkColumn(int): columnIndex > columnCount  =>   columnIndex >= columnCount
ROR_105:686:void_checkColumn(int): columnIndex > columnCount  =>   columnIndex < columnCount
ROR_106:686:void_checkColumn(int): columnIndex > columnCount  =>   columnIndex <= columnCount
ROR_107:686:void_checkColumn(int): columnIndex > columnCount  =>   columnIndex == columnCount
ROR_108:686:void_checkColumn(int): columnIndex > columnCount  =>   columnIndex != columnCount
ROR_109:686:void_checkColumn(int): columnIndex > columnCount  =>   true
ROR_110:686:void_checkColumn(int): columnIndex > columnCount  =>   false
ROR_111:693:boolean_trackNull(java.lang.Object): o == null  =>   o != null
ROR_112:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): sourceType.typeCode != targetType.typeCode  =>   sourceType.typeCode > targetType.typeCode
ROR_113:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): sourceType.typeCode != targetType.typeCode  =>   sourceType.typeCode >= targetType.typeCode
ROR_114:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): sourceType.typeCode != targetType.typeCode  =>   sourceType.typeCode < targetType.typeCode
ROR_115:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): sourceType.typeCode != targetType.typeCode  =>   sourceType.typeCode <= targetType.typeCode
ROR_116:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): sourceType.typeCode != targetType.typeCode  =>   sourceType.typeCode == targetType.typeCode
ROR_117:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): sourceType.typeCode != targetType.typeCode  =>   true
ROR_118:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): sourceType.typeCode != targetType.typeCode  =>   false
ROR_119:753:void_checkUpdatable(int): resultMetaData.colIndexes[--columnIndex] == -1  =>   resultMetaData.colIndexes[--columnIndex] > -1
ROR_120:753:void_checkUpdatable(int): resultMetaData.colIndexes[--columnIndex] == -1  =>   resultMetaData.colIndexes[--columnIndex] >= -1
ROR_121:753:void_checkUpdatable(int): resultMetaData.colIndexes[--columnIndex] == -1  =>   resultMetaData.colIndexes[--columnIndex] < -1
ROR_122:753:void_checkUpdatable(int): resultMetaData.colIndexes[--columnIndex] == -1  =>   resultMetaData.colIndexes[--columnIndex] <= -1
ROR_123:753:void_checkUpdatable(int): resultMetaData.colIndexes[--columnIndex] == -1  =>   resultMetaData.colIndexes[--columnIndex] != -1
ROR_124:753:void_checkUpdatable(int): resultMetaData.colIndexes[--columnIndex] == -1  =>   true
ROR_125:753:void_checkUpdatable(int): resultMetaData.colIndexes[--columnIndex] == -1  =>   false
ROR_126:765:void_startUpdate(int): currentUpdateRowNumber != navigator.getRowNumber()  =>   currentUpdateRowNumber > navigator.getRowNumber()
ROR_127:765:void_startUpdate(int): currentUpdateRowNumber != navigator.getRowNumber()  =>   currentUpdateRowNumber >= navigator.getRowNumber()
ROR_128:765:void_startUpdate(int): currentUpdateRowNumber != navigator.getRowNumber()  =>   currentUpdateRowNumber < navigator.getRowNumber()
ROR_129:765:void_startUpdate(int): currentUpdateRowNumber != navigator.getRowNumber()  =>   currentUpdateRowNumber <= navigator.getRowNumber()
ROR_130:765:void_startUpdate(int): currentUpdateRowNumber != navigator.getRowNumber()  =>   currentUpdateRowNumber == navigator.getRowNumber()
ROR_131:765:void_startUpdate(int): currentUpdateRowNumber != navigator.getRowNumber()  =>   true
ROR_132:765:void_startUpdate(int): currentUpdateRowNumber != navigator.getRowNumber()  =>   false
ROR_133:799:void_performUpdate(): i < columnCount  =>   i > columnCount
ROR_134:799:void_performUpdate(): i < columnCount  =>   i >= columnCount
ROR_135:799:void_performUpdate(): i < columnCount  =>   i <= columnCount
ROR_136:799:void_performUpdate(): i < columnCount  =>   i == columnCount
ROR_137:799:void_performUpdate(): i < columnCount  =>   i != columnCount
ROR_138:799:void_performUpdate(): i < columnCount  =>   true
ROR_139:799:void_performUpdate(): i < columnCount  =>   false
ROR_140:815:void_performInsert(): i < columnCount  =>   i > columnCount
ROR_141:815:void_performInsert(): i < columnCount  =>   i >= columnCount
ROR_142:815:void_performInsert(): i < columnCount  =>   i <= columnCount
ROR_143:815:void_performInsert(): i < columnCount  =>   i == columnCount
ROR_144:815:void_performInsert(): i < columnCount  =>   i != columnCount
ROR_145:815:void_performInsert(): i < columnCount  =>   true
ROR_146:815:void_performInsert(): i < columnCount  =>   false
ROR_147:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): i < metaData.colIndexes.length  =>   i > metaData.colIndexes.length
ROR_148:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): i < metaData.colIndexes.length  =>   i >= metaData.colIndexes.length
ROR_149:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): i < metaData.colIndexes.length  =>   i <= metaData.colIndexes.length
ROR_150:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): i < metaData.colIndexes.length  =>   i == metaData.colIndexes.length
ROR_151:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): i < metaData.colIndexes.length  =>   i != metaData.colIndexes.length
ROR_152:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): i < metaData.colIndexes.length  =>   true
ROR_153:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): i < metaData.colIndexes.length  =>   false
ROR_154:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): metaData.colIndexes[i] < 0  =>   metaData.colIndexes[i] > 0
ROR_155:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): metaData.colIndexes[i] < 0  =>   metaData.colIndexes[i] >= 0
ROR_156:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): metaData.colIndexes[i] < 0  =>   metaData.colIndexes[i] <= 0
ROR_157:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): metaData.colIndexes[i] < 0  =>   metaData.colIndexes[i] == 0
ROR_158:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): metaData.colIndexes[i] < 0  =>   metaData.colIndexes[i] != 0
ROR_159:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): metaData.colIndexes[i] < 0  =>   true
ROR_160:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): metaData.colIndexes[i] < 0  =>   false
ROR_161:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnsCount < 1  =>   columnsCount > 1
ROR_162:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnsCount < 1  =>   columnsCount >= 1
ROR_163:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnsCount < 1  =>   columnsCount <= 1
ROR_164:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnsCount < 1  =>   columnsCount == 1
ROR_165:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnsCount < 1  =>   columnsCount != 1
ROR_166:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnsCount < 1  =>   true
ROR_167:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnsCount < 1  =>   false
ROR_168:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnsCount > 5  =>   columnsCount >= 5
ROR_169:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnsCount > 5  =>   columnsCount < 5
ROR_170:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnsCount > 5  =>   columnsCount <= 5
ROR_171:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnsCount > 5  =>   columnsCount == 5
ROR_172:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnsCount > 5  =>   columnsCount != 5
ROR_173:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnsCount > 5  =>   true
ROR_174:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnsCount > 5  =>   false
ROR_175:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): rows < 0  =>   rows > 0
ROR_176:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): rows < 0  =>   rows >= 0
ROR_177:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): rows < 0  =>   rows <= 0
ROR_178:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): rows < 0  =>   rows == 0
ROR_179:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): rows < 0  =>   rows != 0
ROR_180:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): rows < 0  =>   true
ROR_181:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): rows < 0  =>   false
ROR_182:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): i < columnsCount  =>   i > columnsCount
ROR_183:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): i < columnsCount  =>   i >= columnsCount
ROR_184:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): i < columnsCount  =>   i <= columnsCount
ROR_185:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): i < columnsCount  =>   i == columnsCount
ROR_186:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): i < columnsCount  =>   i != columnsCount
ROR_187:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): i < columnsCount  =>   true
ROR_188:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): i < columnsCount  =>   false
ROR_189:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): i < rows  =>   i > rows
ROR_190:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): i < rows  =>   i >= rows
ROR_191:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): i < rows  =>   i <= rows
ROR_192:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): i < rows  =>   i == rows
ROR_193:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): i < rows  =>   i != rows
ROR_194:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): i < rows  =>   true
ROR_195:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): i < rows  =>   false
ROR_196:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): i < metaData.colIndexes.length  =>   i > metaData.colIndexes.length
ROR_197:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): i < metaData.colIndexes.length  =>   i >= metaData.colIndexes.length
ROR_198:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): i < metaData.colIndexes.length  =>   i <= metaData.colIndexes.length
ROR_199:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): i < metaData.colIndexes.length  =>   i == metaData.colIndexes.length
ROR_200:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): i < metaData.colIndexes.length  =>   i != metaData.colIndexes.length
ROR_201:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): i < metaData.colIndexes.length  =>   true
ROR_202:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): i < metaData.colIndexes.length  =>   false
ROR_203:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): metaData.colIndexes[i] < 0  =>   metaData.colIndexes[i] > 0
ROR_204:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): metaData.colIndexes[i] < 0  =>   metaData.colIndexes[i] >= 0
ROR_205:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): metaData.colIndexes[i] < 0  =>   metaData.colIndexes[i] <= 0
ROR_206:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): metaData.colIndexes[i] < 0  =>   metaData.colIndexes[i] == 0
ROR_207:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): metaData.colIndexes[i] < 0  =>   metaData.colIndexes[i] != 0
ROR_208:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): metaData.colIndexes[i] < 0  =>   true
ROR_209:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): metaData.colIndexes[i] < 0  =>   false
ROR_210:937:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): columnLabels == null  =>   columnLabels != null
ROR_211:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i < columnLabels.length  =>   i > columnLabels.length
ROR_212:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i < columnLabels.length  =>   i >= columnLabels.length
ROR_213:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i < columnLabels.length  =>   i <= columnLabels.length
ROR_214:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i < columnLabels.length  =>   i == columnLabels.length
ROR_215:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i < columnLabels.length  =>   i != columnLabels.length
ROR_216:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i < columnLabels.length  =>   true
ROR_217:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i < columnLabels.length  =>   false
ROR_218:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i > 0  =>   i >= 0
ROR_219:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i > 0  =>   i < 0
ROR_220:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i > 0  =>   i <= 0
ROR_221:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i > 0  =>   i == 0
ROR_222:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i > 0  =>   i != 0
ROR_223:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i > 0  =>   true
ROR_224:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i > 0  =>   false
ROR_225:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i < columnLabels.length  =>   i > columnLabels.length
ROR_226:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i < columnLabels.length  =>   i >= columnLabels.length
ROR_227:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i < columnLabels.length  =>   i <= columnLabels.length
ROR_228:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i < columnLabels.length  =>   i == columnLabels.length
ROR_229:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i < columnLabels.length  =>   i != columnLabels.length
ROR_230:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i < columnLabels.length  =>   true
ROR_231:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i < columnLabels.length  =>   false
ROR_232:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int): i < values.length  =>   i > values.length
ROR_233:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int): i < values.length  =>   i >= values.length
ROR_234:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int): i < values.length  =>   i <= values.length
ROR_235:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int): i < values.length  =>   i == values.length
ROR_236:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int): i < values.length  =>   i != values.length
ROR_237:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int): i < values.length  =>   true
ROR_238:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int): i < values.length  =>   false
COR_1:47:void_close0(): autoClose && statement != null  =>   autoClose || statement != null
COR_2:47:void_close0(): autoClose && statement != null  =>   autoClose ^ statement != null
COR_3:154:int_findColumn0(java.lang.String): tabName == null || tabName.length() == 0  =>   tabName == null && tabName.length() == 0
COR_4:154:int_findColumn0(java.lang.String): tabName == null || tabName.length() == 0  =>   tabName == null ^ tabName.length() == 0
COR_5:163:int_findColumn0(java.lang.String): schemName == null || schemName.length() == 0  =>   schemName == null && schemName.length() == 0
COR_6:163:int_findColumn0(java.lang.String): schemName == null || schemName.length() == 0  =>   schemName == null ^ schemName.length() == 0
COR_7:283:void_beforeFirst0(): isOnInsertRow || isRowUpdated  =>   isOnInsertRow && isRowUpdated
COR_8:283:void_beforeFirst0(): isOnInsertRow || isRowUpdated  =>   isOnInsertRow ^ isRowUpdated
COR_9:304:void_afterLast0(): isOnInsertRow || isRowUpdated  =>   isOnInsertRow && isRowUpdated
COR_10:304:void_afterLast0(): isOnInsertRow || isRowUpdated  =>   isOnInsertRow ^ isRowUpdated
COR_11:326:boolean_first0(): isOnInsertRow || isRowUpdated  =>   isOnInsertRow && isRowUpdated
COR_12:326:boolean_first0(): isOnInsertRow || isRowUpdated  =>   isOnInsertRow ^ isRowUpdated
COR_13:348:boolean_last0(): isOnInsertRow || isRowUpdated  =>   isOnInsertRow && isRowUpdated
COR_14:348:boolean_last0(): isOnInsertRow || isRowUpdated  =>   isOnInsertRow ^ isRowUpdated
COR_15:391:boolean_absolute0(int): isOnInsertRow || isRowUpdated  =>   isOnInsertRow && isRowUpdated
COR_16:391:boolean_absolute0(int): isOnInsertRow || isRowUpdated  =>   isOnInsertRow ^ isRowUpdated
COR_17:420:boolean_relative0(int): isOnInsertRow || isRowUpdated  =>   isOnInsertRow && isRowUpdated
COR_18:420:boolean_relative0(int): isOnInsertRow || isRowUpdated  =>   isOnInsertRow ^ isRowUpdated
COR_19:442:boolean_previous0(): isOnInsertRow || isRowUpdated  =>   isOnInsertRow && isRowUpdated
COR_20:442:boolean_previous0(): isOnInsertRow || isRowUpdated  =>   isOnInsertRow ^ isRowUpdated
COR_21:686:void_checkColumn(int): columnIndex < 1 || columnIndex > columnCount  =>   columnIndex < 1 && columnIndex > columnCount
COR_22:686:void_checkColumn(int): columnIndex < 1 || columnIndex > columnCount  =>   columnIndex < 1 ^ columnIndex > columnCount
COR_23:712:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): value instanceof java.lang.Number || value instanceof java.lang.String  =>   value instanceof java.lang.Number && value instanceof java.lang.String
COR_24:712:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): value instanceof java.lang.Number || value instanceof java.lang.String  =>   value instanceof java.lang.Number ^ value instanceof java.lang.String
COD_1:723:void_checkNotForwardOnly():!isScrollable => isScrollable
COD_2:740:void_checkUpdatable():!isUpdatable => isUpdatable
COD_3:750:void_checkUpdatable(int):!isUpdatable => isUpdatable
COD_4:756:void_checkUpdatable(int):!resultMetaData.columns[columnIndex].isWriteable() => resultMetaData.columns[columnIndex].isWriteable()
COD_5:817:void_performInsert():!set => set
COI_1:15:boolean_next(): rv  =>  !rv
COI_2:42:void_close0(): navigator == null  =>  !(navigator == null)
COI_3:47:void_close0(): autoClose  =>  !autoClose
COI_4:47:void_close0(): statement != null  =>  !(statement != null)
COI_5:47:void_close0(): autoClose && statement != null  =>  !(autoClose && statement != null)
COI_6:57:boolean_wasNull(): rv  =>  !rv
COI_7:67:boolean_wasNull0(): wasNullValue  =>  !wasNullValue
COI_8:85:int_getInt0(int): o == null  =>  !(o == null)
COI_9:120:int_findColumn0(java.lang.String): columnLabel == null  =>  !(columnLabel == null)
COI_10:124:int_findColumn0(java.lang.String): columnMap != null  =>  !(columnMap != null)
COI_11:126:int_findColumn0(java.lang.String): columnIndex != -1  =>  !(columnIndex != -1)
COI_12:132:int_findColumn0(java.lang.String): i < columnCount  =>  !(i < columnCount)
COI_13:139:int_findColumn0(java.lang.String): columnIndex < 0  =>  !(columnIndex < 0)
COI_14:140:int_findColumn0(java.lang.String): i < columnCount  =>  !(i < columnCount)
COI_15:147:int_findColumn0(java.lang.String): columnIndex < 0  =>  !(columnIndex < 0)
COI_16:149:int_findColumn0(java.lang.String): position < 0  =>  !(position < 0)
COI_17:152:int_findColumn0(java.lang.String): i < columnCount  =>  !(i < columnCount)
COI_18:154:int_findColumn0(java.lang.String): tabName == null  =>  !(tabName == null)
COI_19:154:int_findColumn0(java.lang.String): tabName.length() == 0  =>  !(tabName.length() == 0)
COI_20:154:int_findColumn0(java.lang.String): tabName == null || tabName.length() == 0  =>  !(tabName == null || tabName.length() == 0)
COI_21:163:int_findColumn0(java.lang.String): schemName == null  =>  !(schemName == null)
COI_22:163:int_findColumn0(java.lang.String): schemName.length() == 0  =>  !(schemName.length() == 0)
COI_23:163:int_findColumn0(java.lang.String): schemName == null || schemName.length() == 0  =>  !(schemName == null || schemName.length() == 0)
COI_24:173:int_findColumn0(java.lang.String): columnIndex < 0  =>  !(columnIndex < 0)
COI_25:177:int_findColumn0(java.lang.String): columnMap == null  =>  !(columnMap == null)
COI_26:189:boolean_isBeforeFirst(): rv  =>  !rv
COI_27:199:boolean_isBeforeFirst0(): isOnInsertRow  =>  !isOnInsertRow
COI_28:210:boolean_isAfterLast(): rv  =>  !rv
COI_29:220:boolean_isAfterLast0(): isOnInsertRow  =>  !isOnInsertRow
COI_30:231:boolean_isFirst(): rv  =>  !rv
COI_31:241:boolean_isFirst0(): isOnInsertRow  =>  !isOnInsertRow
COI_32:252:boolean_isLast(): rv  =>  !rv
COI_33:262:boolean_isLast0(): isOnInsertRow  =>  !isOnInsertRow
COI_34:283:void_beforeFirst0(): isOnInsertRow  =>  !isOnInsertRow
COI_35:283:void_beforeFirst0(): isRowUpdated  =>  !isRowUpdated
COI_36:283:void_beforeFirst0(): isOnInsertRow || isRowUpdated  =>  !(isOnInsertRow || isRowUpdated)
COI_37:304:void_afterLast0(): isOnInsertRow  =>  !isOnInsertRow
COI_38:304:void_afterLast0(): isRowUpdated  =>  !isRowUpdated
COI_39:304:void_afterLast0(): isOnInsertRow || isRowUpdated  =>  !(isOnInsertRow || isRowUpdated)
COI_40:315:boolean_first(): rv  =>  !rv
COI_41:326:boolean_first0(): isOnInsertRow  =>  !isOnInsertRow
COI_42:326:boolean_first0(): isRowUpdated  =>  !isRowUpdated
COI_43:326:boolean_first0(): isOnInsertRow || isRowUpdated  =>  !(isOnInsertRow || isRowUpdated)
COI_44:337:boolean_last(): rv  =>  !rv
COI_45:348:boolean_last0(): isOnInsertRow  =>  !isOnInsertRow
COI_46:348:boolean_last0(): isRowUpdated  =>  !isRowUpdated
COI_47:348:boolean_last0(): isOnInsertRow || isRowUpdated  =>  !(isOnInsertRow || isRowUpdated)
COI_48:380:boolean_absolute(int): rv  =>  !rv
COI_49:391:boolean_absolute0(int): isOnInsertRow  =>  !isOnInsertRow
COI_50:391:boolean_absolute0(int): isRowUpdated  =>  !isRowUpdated
COI_51:391:boolean_absolute0(int): isOnInsertRow || isRowUpdated  =>  !(isOnInsertRow || isRowUpdated)
COI_52:394:boolean_absolute0(int): row > 0  =>  !(row > 0)
COI_53:397:boolean_absolute0(int): row == 0  =>  !(row == 0)
COI_54:409:boolean_relative(int): rv  =>  !rv
COI_55:420:boolean_relative0(int): isOnInsertRow  =>  !isOnInsertRow
COI_56:420:boolean_relative0(int): isRowUpdated  =>  !isRowUpdated
COI_57:420:boolean_relative0(int): isOnInsertRow || isRowUpdated  =>  !(isOnInsertRow || isRowUpdated)
COI_58:431:boolean_previous(): rv  =>  !rv
COI_59:442:boolean_previous0(): isOnInsertRow  =>  !isOnInsertRow
COI_60:442:boolean_previous0(): isRowUpdated  =>  !isRowUpdated
COI_61:442:boolean_previous0(): isOnInsertRow || isRowUpdated  =>  !(isOnInsertRow || isRowUpdated)
COI_62:650:java.lang.Object[]_getCurrent(): lnavigator == null  =>  !(lnavigator == null)
COI_63:666:java.lang.Object[]_getCurrent(): data == null  =>  !(data == null)
COI_64:675:void_checkClosed(): navigator == null  =>  !(navigator == null)
COI_65:683:void_checkColumn(int): navigator == null  =>  !(navigator == null)
COI_66:686:void_checkColumn(int): columnIndex < 1  =>  !(columnIndex < 1)
COI_67:686:void_checkColumn(int): columnIndex > columnCount  =>  !(columnIndex > columnCount)
COI_68:686:void_checkColumn(int): columnIndex < 1 || columnIndex > columnCount  =>  !(columnIndex < 1 || columnIndex > columnCount)
COI_69:693:boolean_trackNull(java.lang.Object): wasNullValue  =>  !wasNullValue
COI_70:693:boolean_trackNull(java.lang.Object): o == null  =>  !(o == null)
COI_71:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): sourceType.typeCode != targetType.typeCode  =>  !(sourceType.typeCode != targetType.typeCode)
COI_72:712:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): value instanceof java.lang.Number || value instanceof java.lang.String  =>  !(value instanceof java.lang.Number || value instanceof java.lang.String)
COI_73:753:void_checkUpdatable(int): resultMetaData.colIndexes[--columnIndex] == -1  =>  !(resultMetaData.colIndexes[--columnIndex] == -1)
COI_74:765:void_startUpdate(int): currentUpdateRowNumber != navigator.getRowNumber()  =>  !(currentUpdateRowNumber != navigator.getRowNumber())
COI_75:769:void_startUpdate(int): isRowUpdated  =>  !isRowUpdated
COI_76:777:void_clearUpdates(): isRowUpdated  =>  !isRowUpdated
COI_77:784:void_startInsert(): isOnInsertRow  =>  !isOnInsertRow
COI_78:792:void_endInsert(): isOnInsertRow  =>  !isOnInsertRow
COI_79:799:void_performUpdate(): i < columnCount  =>  !(i < columnCount)
COI_80:800:void_performUpdate(): preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i]  =>  !(preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i])
COI_81:801:void_performUpdate(): set  =>  !set
COI_82:808:void_performUpdate(): isRowUpdated  =>  !isRowUpdated
COI_83:815:void_performInsert(): i < columnCount  =>  !(i < columnCount)
COI_84:816:void_performInsert(): preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i]  =>  !(preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i])
COI_85:853:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): isScrollable  =>  !isScrollable
COI_86:855:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): isUpdatable  =>  !isUpdatable
COI_87:856:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): isInsertable  =>  !isInsertable
COI_88:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): i < metaData.colIndexes.length  =>  !(i < metaData.colIndexes.length)
COI_89:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): metaData.colIndexes[i] < 0  =>  !(metaData.colIndexes[i] < 0)
COI_90:859:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): isInsertable  =>  !isInsertable
COI_91:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnsCount < 1  =>  !(columnsCount < 1)
COI_92:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnsCount > 5  =>  !(columnsCount > 5)
COI_93:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): rows < 0  =>  !(rows < 0)
COI_94:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): i < columnsCount  =>  !(i < columnsCount)
COI_95:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): i < rows  =>  !(i < rows)
COI_96:920:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): isScrollable  =>  !isScrollable
COI_97:922:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): isUpdatable  =>  !isUpdatable
COI_98:923:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): isInsertable  =>  !isInsertable
COI_99:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): i < metaData.colIndexes.length  =>  !(i < metaData.colIndexes.length)
COI_100:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): metaData.colIndexes[i] < 0  =>  !(metaData.colIndexes[i] < 0)
COI_101:926:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): isInsertable  =>  !isInsertable
COI_102:937:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): columnLabels == null  =>  !(columnLabels == null)
COI_103:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i < columnLabels.length  =>  !(i < columnLabels.length)
COI_104:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i > 0  =>  !(i > 0)
COI_105:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): i < columnLabels.length  =>  !(i < columnLabels.length)
COI_106:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int): i < values.length  =>  !(i < values.length)
LOI_1:74:int_getInt(int):columnIndex => ~columnIndex
LOI_2:75:int_getInt(int):rv => ~rv
LOI_3:84:int_getInt0(int):columnIndex => ~columnIndex
LOI_4:93:int_getInt(java.lang.String):rv => ~rv
LOI_5:110:int_findColumn(java.lang.String):rv => ~rv
LOI_6:126:int_findColumn0(java.lang.String):columnIndex => ~columnIndex
LOI_7:127:int_findColumn0(java.lang.String):columnIndex => ~columnIndex
LOI_8:132:int_findColumn0(java.lang.String):i => ~i
LOI_9:132:int_findColumn0(java.lang.String):columnCount => ~columnCount
LOI_10:132:int_findColumn0(java.lang.String):i => ~i
LOI_11:133:int_findColumn0(java.lang.String):i => ~i
LOI_12:134:int_findColumn0(java.lang.String):i => ~i
LOI_13:139:int_findColumn0(java.lang.String):columnIndex => ~columnIndex
LOI_14:140:int_findColumn0(java.lang.String):i => ~i
LOI_15:140:int_findColumn0(java.lang.String):columnCount => ~columnCount
LOI_16:140:int_findColumn0(java.lang.String):i => ~i
LOI_17:141:int_findColumn0(java.lang.String):i => ~i
LOI_18:142:int_findColumn0(java.lang.String):i => ~i
LOI_19:147:int_findColumn0(java.lang.String):columnIndex => ~columnIndex
LOI_20:149:int_findColumn0(java.lang.String):position => ~position
LOI_21:152:int_findColumn0(java.lang.String):i => ~i
LOI_22:152:int_findColumn0(java.lang.String):columnCount => ~columnCount
LOI_23:152:int_findColumn0(java.lang.String):i => ~i
LOI_24:153:int_findColumn0(java.lang.String):i => ~i
LOI_25:157:int_findColumn0(java.lang.String):i => ~i
LOI_26:159:int_findColumn0(java.lang.String):i => ~i
LOI_27:162:int_findColumn0(java.lang.String):i => ~i
LOI_28:168:int_findColumn0(java.lang.String):i => ~i
LOI_29:173:int_findColumn0(java.lang.String):columnIndex => ~columnIndex
LOI_30:176:int_findColumn0(java.lang.String):columnIndex => ~columnIndex
LOI_31:180:int_findColumn0(java.lang.String):columnIndex => ~columnIndex
LOI_32:181:int_findColumn0(java.lang.String):columnIndex => ~columnIndex
LOI_33:359:int_getRow():rv => ~rv
LOI_34:379:boolean_absolute(int):row => ~row
LOI_35:394:boolean_absolute0(int):row => ~row
LOI_36:395:boolean_absolute0(int):row => ~row
LOI_37:397:boolean_absolute0(int):row => ~row
LOI_38:401:boolean_absolute0(int):row => ~row
LOI_39:408:boolean_relative(int):rows => ~rows
LOI_40:423:boolean_relative0(int):rows => ~rows
LOI_41:453:void_updateInt(int,int):columnIndex => ~columnIndex
LOI_42:453:void_updateInt(int,int):x => ~x
LOI_43:462:void_updateInt0(int,int):columnIndex => ~columnIndex
LOI_44:463:void_updateInt0(int,int):columnIndex => ~columnIndex
LOI_45:463:void_updateInt0(int,int):x => ~x
LOI_46:470:void_updateInt(java.lang.String,int):x => ~x
LOI_47:479:void_updateInt0(java.lang.String,int):x => ~x
LOI_48:686:void_checkColumn(int):columnIndex => ~columnIndex
LOI_49:686:void_checkColumn(int):columnIndex => ~columnIndex
LOI_50:686:void_checkColumn(int):columnCount => ~columnCount
LOI_51:687:void_checkColumn(int):columnIndex => ~columnIndex
LOI_52:702:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):columnIndex => ~columnIndex
LOI_53:703:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):columnIndex => ~columnIndex
LOI_54:704:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):columnIndex => ~columnIndex
LOI_55:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):sourceType.typeCode => ~sourceType.typeCode
LOI_56:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):targetType.typeCode => ~targetType.typeCode
LOI_57:749:void_checkUpdatable(int):columnIndex => ~columnIndex
LOI_58:753:void_checkUpdatable(int):columnIndex => ~columnIndex
LOI_59:756:void_checkUpdatable(int):columnIndex => ~columnIndex
LOI_60:764:void_startUpdate(int):columnIndex => ~columnIndex
LOI_61:765:void_startUpdate(int):currentUpdateRowNumber => ~currentUpdateRowNumber
LOI_62:798:void_performUpdate():columnCount => ~columnCount
LOI_63:798:void_performUpdate():columnCount => ~columnCount
LOI_64:799:void_performUpdate():i => ~i
LOI_65:799:void_performUpdate():columnCount => ~columnCount
LOI_66:799:void_performUpdate():i => ~i
LOI_67:800:void_performUpdate():i => ~i
LOI_68:800:void_performUpdate():i => ~i
LOI_69:801:void_performUpdate():i => ~i
LOI_70:801:void_performUpdate():i => ~i
LOI_71:803:void_performUpdate():MockResultConstants.UPDATE_CURSOR => ~MockResultConstants.UPDATE_CURSOR
LOI_72:815:void_performInsert():i => ~i
LOI_73:815:void_performInsert():columnCount => ~columnCount
LOI_74:815:void_performInsert():i => ~i
LOI_75:816:void_performInsert():i => ~i
LOI_76:816:void_performInsert():i => ~i
LOI_77:820:void_performInsert():i => ~i
LOI_78:820:void_performInsert():i => ~i
LOI_79:822:void_performInsert():MockResultConstants.INSERT_CURSOR => ~MockResultConstants.INSERT_CURSOR
LOI_80:833:void_performDelete():columnCount => ~columnCount
LOI_81:833:void_performDelete():columnCount => ~columnCount
LOI_82:834:void_performDelete():columnCount => ~columnCount
LOI_83:834:void_performDelete():columnCount => ~columnCount
LOI_84:835:void_performDelete():MockResultConstants.DELETE_CURSOR => ~MockResultConstants.DELETE_CURSOR
LOI_85:849:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):r.rsProperties => ~r.rsProperties
LOI_86:853:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):rsProperties => ~rsProperties
LOI_87:854:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):rsProperties => ~rsProperties
LOI_88:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i => ~i
LOI_89:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):metaData.colIndexes.length => ~metaData.colIndexes.length
LOI_90:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i => ~i
LOI_91:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i => ~i
LOI_92:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => ~columnsCount
LOI_93:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => ~columnsCount
LOI_94:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows => ~rows
LOI_95:897:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => ~columnsCount
LOI_96:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => ~i
LOI_97:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => ~columnsCount
LOI_98:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => ~i
LOI_99:899:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => ~i
LOI_100:899:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => ~i
LOI_101:901:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows => ~rows
LOI_102:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => ~i
LOI_103:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows => ~rows
LOI_104:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => ~i
LOI_105:903:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i => ~i
LOI_106:903:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount => ~columnsCount
LOI_107:915:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):r.rsProperties => ~r.rsProperties
LOI_108:920:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):rsProperties => ~rsProperties
LOI_109:921:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):rsProperties => ~rsProperties
LOI_110:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i => ~i
LOI_111:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):metaData.colIndexes.length => ~metaData.colIndexes.length
LOI_112:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i => ~i
LOI_113:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i => ~i
LOI_114:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => ~i
LOI_115:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => ~columnLabels.length
LOI_116:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => ~i
LOI_117:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => ~i
LOI_118:945:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => ~i
LOI_119:951:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):r.rsProperties => ~r.rsProperties
LOI_120:952:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):r.rsProperties => ~r.rsProperties
LOI_121:953:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => ~columnLabels.length
LOI_122:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => ~i
LOI_123:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => ~columnLabels.length
LOI_124:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => ~i
LOI_125:955:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => ~i
LOI_126:955:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i => ~i
LOI_127:957:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => ~columnLabels.length
LOI_128:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => ~columnLabels.length
LOI_129:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length => ~columnLabels.length
LOI_130:973:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):values.length => ~values.length
LOI_131:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i => ~i
LOI_132:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):values.length => ~values.length
LOI_133:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i => ~i
LOI_134:975:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i => ~i
LOI_135:975:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i => ~i
ASRS_1:943:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):query += "," => query /= ","
ASRS_2:943:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):query += "," => query *= ","
ASRS_3:943:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):query += "," => query -= ","
ASRS_4:943:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):query += "," => query %= ","
ASRS_5:945:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):query += columnLabels[i] => query /= columnLabels[i]
ASRS_6:945:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):query += columnLabels[i] => query *= columnLabels[i]
ASRS_7:945:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):query += columnLabels[i] => query -= columnLabels[i]
ASRS_8:945:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):query += columnLabels[i] => query %= columnLabels[i]
ASRS_9:947:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):query += " from TABLE" => query /= " from TABLE"
ASRS_10:947:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):query += " from TABLE" => query *= " from TABLE"
ASRS_11:947:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):query += " from TABLE" => query -= " from TABLE"
ASRS_12:947:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):query += " from TABLE" => query %= " from TABLE"
SDL_1:16:boolean_next(): return rv;  =>   return true;
SDL_2:16:boolean_next(): return rv;  =>   return false;
SDL_3:26:boolean_next0(): checkClosed(); rootWarning = null; return navigator.next();  =>   rootWarning = null; return navigator.next();
SDL_4:26:boolean_next0(): checkClosed(); rootWarning = null; return navigator.next();  =>   checkClosed(); return navigator.next();
SDL_5:27:boolean_next0(): return navigator.next();  =>   return true;
SDL_6:27:boolean_next0(): return navigator.next();  =>   return false;
SDL_7:34:void_close(): try {     this.close0(); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_8:47:void_close0(): if (navigator == null) {     return; } navigator.close(); navigator = null; if (autoClose && statement != null) {     statement.close(); }  =>   navigator.close(); navigator = null; if (autoClose && statement != null) {     statement.close(); }
SDL_9:49:void_close0(): if (navigator == null) {     return; } navigator.close(); navigator = null; if (autoClose && statement != null) {     statement.close(); }  =>   if (navigator == null) {     return; } navigator = null; if (autoClose && statement != null) {     statement.close(); }
SDL_10:49:void_close0(): if (navigator == null) {     return; } navigator.close(); navigator = null; if (autoClose && statement != null) {     statement.close(); }  =>   if (navigator == null) {     return; } navigator.close(); if (autoClose && statement != null) {     statement.close(); }
SDL_11:47:void_close0(): if (navigator == null) {     return; } navigator.close(); navigator = null; if (autoClose && statement != null) {     statement.close(); }  =>   if (navigator == null) {     return; } navigator.close(); navigator = null;
SDL_12:45:void_close0(): if (navigator == null) {     return; }  =>   if (true) {     return; }
SDL_13:48:void_close0(): statement.close();  =>  
SDL_14:50:void_close0(): if (autoClose && statement != null) {     statement.close(); }  =>   if (true) {     statement.close(); }
SDL_15:58:boolean_wasNull(): return rv;  =>   return true;
SDL_16:58:boolean_wasNull(): return rv;  =>   return false;
SDL_17:67:boolean_wasNull0(): checkClosed(); return wasNullValue;  =>   return wasNullValue;
SDL_18:68:boolean_wasNull0(): return wasNullValue;  =>   return true;
SDL_19:68:boolean_wasNull0(): return wasNullValue;  =>   return false;
SDL_20:76:int_getInt(int): return rv;  =>   return 0;
SDL_21:86:int_getInt0(int): return o == null ? 0 : ((java.lang.Number) o).intValue();  =>   return 0;
SDL_22:94:int_getInt(java.lang.String): return rv;  =>   return 0;
SDL_23:103:int_getInt0(java.lang.String): return getInt0( findColumn( columnLabel ) );  =>   return 0;
SDL_24:111:int_findColumn(java.lang.String): return rv;  =>   return 0;
SDL_25:181:int_findColumn0(java.lang.String): checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;  =>   if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;
SDL_26:179:int_findColumn0(java.lang.String): checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;  =>   checkClosed(); int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;
SDL_27:176:int_findColumn0(java.lang.String): checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;  =>   checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;
SDL_28:181:int_findColumn0(java.lang.String): checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;  =>   checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;
SDL_29:176:int_findColumn0(java.lang.String): checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;  =>   checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;
SDL_30:174:int_findColumn0(java.lang.String): checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;  =>   checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;
SDL_31:156:int_findColumn0(java.lang.String): checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;  =>   checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;
SDL_32:179:int_findColumn0(java.lang.String): checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;  =>   checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;
SDL_33:181:int_findColumn0(java.lang.String): checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;  =>   checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;
SDL_34:179:int_findColumn0(java.lang.String): checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;  =>   checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; columnMap.put( columnLabel, columnIndex ); return columnIndex;
SDL_35:181:int_findColumn0(java.lang.String): checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } columnMap.put( columnLabel, columnIndex ); return columnIndex;  =>   checkClosed(); if (columnLabel == null) {     throw MockUtil.nullArgument(); } int columnIndex; if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } } final java.lang.String[] colLabels = resultMetaData.columnLabels; columnIndex = -1; for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } } final com.example.resultset.MockColumnBase[] columns = resultMetaData.columns; if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } } if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } columnIndex++; if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); } return columnIndex;
SDL_36:121:int_findColumn0(java.lang.String): throw MockUtil.nullArgument();  =>  
SDL_37:123:int_findColumn0(java.lang.String): if (columnLabel == null) {     throw MockUtil.nullArgument(); }  =>   if (true) {     throw MockUtil.nullArgument(); }
SDL_38:128:int_findColumn0(java.lang.String): columnIndex = columnMap.get( columnLabel, -1 ); if (columnIndex != -1) {     return columnIndex; }  =>   if (columnIndex != -1) {     return columnIndex; }
SDL_39:126:int_findColumn0(java.lang.String): columnIndex = columnMap.get( columnLabel, -1 ); if (columnIndex != -1) {     return columnIndex; }  =>   columnIndex = columnMap.get( columnLabel, -1 );
SDL_40:130:int_findColumn0(java.lang.String): if (columnMap != null) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } }  =>   if (true) {     columnIndex = columnMap.get( columnLabel, -1 );     if (columnIndex != -1) {         return columnIndex;     } }
SDL_41:129:int_findColumn0(java.lang.String): if (columnIndex != -1) {     return columnIndex; }  =>   if (true) {     return columnIndex; }
SDL_42:128:int_findColumn0(java.lang.String): return columnIndex;  =>   return 0;
SDL_43:133:int_findColumn0(java.lang.String): if (columnLabel.equalsIgnoreCase( colLabels[i] )) {     columnIndex = i;     break; }  =>  
SDL_44:138:int_findColumn0(java.lang.String): for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } }  =>   for (int i = 0;; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } }
SDL_45:138:int_findColumn0(java.lang.String): for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } }  =>   for (int i = 0; i < columnCount;) {     if (columnLabel.equalsIgnoreCase( colLabels[i] )) {         columnIndex = i;         break;     } }
SDL_46:135:int_findColumn0(java.lang.String): columnIndex = i; break;  =>   break;
SDL_47:135:int_findColumn0(java.lang.String): columnIndex = i; break;  =>   columnIndex = i;
SDL_48:137:int_findColumn0(java.lang.String): if (columnLabel.equalsIgnoreCase( colLabels[i] )) {     columnIndex = i;     break; }  =>   if (true) {     columnIndex = i;     break; }
SDL_49:140:int_findColumn0(java.lang.String): for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {         columnIndex = i;         break;     } }  =>  
SDL_50:147:int_findColumn0(java.lang.String): if (columnIndex < 0) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } }  =>   if (true) {     for (int i = 0; i < columnCount; i++) {         if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {             columnIndex = i;             break;         }     } }
SDL_51:141:int_findColumn0(java.lang.String): if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {     columnIndex = i;     break; }  =>  
SDL_52:146:int_findColumn0(java.lang.String): for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {         columnIndex = i;         break;     } }  =>   for (int i = 0;; i++) {     if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {         columnIndex = i;         break;     } }
SDL_53:146:int_findColumn0(java.lang.String): for (int i = 0; i < columnCount; i++) {     if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {         columnIndex = i;         break;     } }  =>   for (int i = 0; i < columnCount;) {     if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {         columnIndex = i;         break;     } }
SDL_54:143:int_findColumn0(java.lang.String): columnIndex = i; break;  =>   break;
SDL_55:143:int_findColumn0(java.lang.String): columnIndex = i; break;  =>   columnIndex = i;
SDL_56:145:int_findColumn0(java.lang.String): if (columnLabel.equalsIgnoreCase( columns[i].getNameString() )) {     columnIndex = i;     break; }  =>   if (true) {     columnIndex = i;     break; }
SDL_57:169:int_findColumn0(java.lang.String): int position = columnLabel.indexOf( '.' ); if (position < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } for (int i = 0; i < columnCount; i++) {     final java.lang.String tabName = columns[i].getTableNameString();     if (tabName == null || tabName.length() == 0) {         continue;     }     final java.lang.String colName = columns[i].getNameString();     if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {         columnIndex = i;         break;     }     final java.lang.String schemName = columns[i].getSchemaNameString();     if (schemName == null || schemName.length() == 0) {         continue;     }     java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();     if (columnLabel.equalsIgnoreCase( match )) {         columnIndex = i;         break;     } }  =>   int position = columnLabel.indexOf( '.' ); for (int i = 0; i < columnCount; i++) {     final java.lang.String tabName = columns[i].getTableNameString();     if (tabName == null || tabName.length() == 0) {         continue;     }     final java.lang.String colName = columns[i].getNameString();     if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {         columnIndex = i;         break;     }     final java.lang.String schemName = columns[i].getSchemaNameString();     if (schemName == null || schemName.length() == 0) {         continue;     }     java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();     if (columnLabel.equalsIgnoreCase( match )) {         columnIndex = i;         break;     } }
SDL_58:152:int_findColumn0(java.lang.String): int position = columnLabel.indexOf( '.' ); if (position < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); } for (int i = 0; i < columnCount; i++) {     final java.lang.String tabName = columns[i].getTableNameString();     if (tabName == null || tabName.length() == 0) {         continue;     }     final java.lang.String colName = columns[i].getNameString();     if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {         columnIndex = i;         break;     }     final java.lang.String schemName = columns[i].getSchemaNameString();     if (schemName == null || schemName.length() == 0) {         continue;     }     java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();     if (columnLabel.equalsIgnoreCase( match )) {         columnIndex = i;         break;     } }  =>   int position = columnLabel.indexOf( '.' ); if (position < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); }
SDL_59:173:int_findColumn0(java.lang.String): if (columnIndex < 0) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } }  =>   if (true) {     int position = columnLabel.indexOf( '.' );     if (position < 0) {         throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );     }     for (int i = 0; i < columnCount; i++) {         final java.lang.String tabName = columns[i].getTableNameString();         if (tabName == null || tabName.length() == 0) {             continue;         }         final java.lang.String colName = columns[i].getNameString();         if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {             columnIndex = i;             break;         }         final java.lang.String schemName = columns[i].getSchemaNameString();         if (schemName == null || schemName.length() == 0) {             continue;         }         java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();         if (columnLabel.equalsIgnoreCase( match )) {             columnIndex = i;             break;         }     } }
SDL_60:150:int_findColumn0(java.lang.String): throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );  =>  
SDL_61:152:int_findColumn0(java.lang.String): if (position < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); }  =>   if (true) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); }
SDL_62:168:int_findColumn0(java.lang.String): final java.lang.String tabName = columns[i].getTableNameString(); if (tabName == null || tabName.length() == 0) {     continue; } final java.lang.String colName = columns[i].getNameString(); if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {     columnIndex = i;     break; } final java.lang.String schemName = columns[i].getSchemaNameString(); if (schemName == null || schemName.length() == 0) {     continue; } java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString(); if (columnLabel.equalsIgnoreCase( match )) {     columnIndex = i;     break; }  =>   final java.lang.String tabName = columns[i].getTableNameString(); final java.lang.String colName = columns[i].getNameString(); if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {     columnIndex = i;     break; } final java.lang.String schemName = columns[i].getSchemaNameString(); if (schemName == null || schemName.length() == 0) {     continue; } java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString(); if (columnLabel.equalsIgnoreCase( match )) {     columnIndex = i;     break; }
SDL_63:167:int_findColumn0(java.lang.String): final java.lang.String tabName = columns[i].getTableNameString(); if (tabName == null || tabName.length() == 0) {     continue; } final java.lang.String colName = columns[i].getNameString(); if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {     columnIndex = i;     break; } final java.lang.String schemName = columns[i].getSchemaNameString(); if (schemName == null || schemName.length() == 0) {     continue; } java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString(); if (columnLabel.equalsIgnoreCase( match )) {     columnIndex = i;     break; }  =>   final java.lang.String tabName = columns[i].getTableNameString(); if (tabName == null || tabName.length() == 0) {     continue; } final java.lang.String colName = columns[i].getNameString(); final java.lang.String schemName = columns[i].getSchemaNameString(); if (schemName == null || schemName.length() == 0) {     continue; } java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString(); if (columnLabel.equalsIgnoreCase( match )) {     columnIndex = i;     break; }
SDL_64:168:int_findColumn0(java.lang.String): final java.lang.String tabName = columns[i].getTableNameString(); if (tabName == null || tabName.length() == 0) {     continue; } final java.lang.String colName = columns[i].getNameString(); if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {     columnIndex = i;     break; } final java.lang.String schemName = columns[i].getSchemaNameString(); if (schemName == null || schemName.length() == 0) {     continue; } java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString(); if (columnLabel.equalsIgnoreCase( match )) {     columnIndex = i;     break; }  =>   final java.lang.String tabName = columns[i].getTableNameString(); if (tabName == null || tabName.length() == 0) {     continue; } final java.lang.String colName = columns[i].getNameString(); if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {     columnIndex = i;     break; } final java.lang.String schemName = columns[i].getSchemaNameString(); java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString(); if (columnLabel.equalsIgnoreCase( match )) {     columnIndex = i;     break; }
SDL_65:167:int_findColumn0(java.lang.String): final java.lang.String tabName = columns[i].getTableNameString(); if (tabName == null || tabName.length() == 0) {     continue; } final java.lang.String colName = columns[i].getNameString(); if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {     columnIndex = i;     break; } final java.lang.String schemName = columns[i].getSchemaNameString(); if (schemName == null || schemName.length() == 0) {     continue; } java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString(); if (columnLabel.equalsIgnoreCase( match )) {     columnIndex = i;     break; }  =>   final java.lang.String tabName = columns[i].getTableNameString(); if (tabName == null || tabName.length() == 0) {     continue; } final java.lang.String colName = columns[i].getNameString(); if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {     columnIndex = i;     break; } final java.lang.String schemName = columns[i].getSchemaNameString(); if (schemName == null || schemName.length() == 0) {     continue; } java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();
SDL_66:172:int_findColumn0(java.lang.String): for (int i = 0; i < columnCount; i++) {     final java.lang.String tabName = columns[i].getTableNameString();     if (tabName == null || tabName.length() == 0) {         continue;     }     final java.lang.String colName = columns[i].getNameString();     if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {         columnIndex = i;         break;     }     final java.lang.String schemName = columns[i].getSchemaNameString();     if (schemName == null || schemName.length() == 0) {         continue;     }     java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();     if (columnLabel.equalsIgnoreCase( match )) {         columnIndex = i;         break;     } }  =>   for (int i = 0;; i++) {     final java.lang.String tabName = columns[i].getTableNameString();     if (tabName == null || tabName.length() == 0) {         continue;     }     final java.lang.String colName = columns[i].getNameString();     if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {         columnIndex = i;         break;     }     final java.lang.String schemName = columns[i].getSchemaNameString();     if (schemName == null || schemName.length() == 0) {         continue;     }     java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();     if (columnLabel.equalsIgnoreCase( match )) {         columnIndex = i;         break;     } }
SDL_67:172:int_findColumn0(java.lang.String): for (int i = 0; i < columnCount; i++) {     final java.lang.String tabName = columns[i].getTableNameString();     if (tabName == null || tabName.length() == 0) {         continue;     }     final java.lang.String colName = columns[i].getNameString();     if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {         columnIndex = i;         break;     }     final java.lang.String schemName = columns[i].getSchemaNameString();     if (schemName == null || schemName.length() == 0) {         continue;     }     java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();     if (columnLabel.equalsIgnoreCase( match )) {         columnIndex = i;         break;     } }  =>   for (int i = 0; i < columnCount;) {     final java.lang.String tabName = columns[i].getTableNameString();     if (tabName == null || tabName.length() == 0) {         continue;     }     final java.lang.String colName = columns[i].getNameString();     if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {         columnIndex = i;         break;     }     final java.lang.String schemName = columns[i].getSchemaNameString();     if (schemName == null || schemName.length() == 0) {         continue;     }     java.lang.String match = (new java.lang.StringBuffer( schemName )).append( '.' ).append( tabName ).append( '.' ).append( colName ).toString();     if (columnLabel.equalsIgnoreCase( match )) {         columnIndex = i;         break;     } }
SDL_68:155:int_findColumn0(java.lang.String): continue;  =>  
SDL_69:157:int_findColumn0(java.lang.String): if (tabName == null || tabName.length() == 0) {     continue; }  =>   if (true) {     continue; }
SDL_70:160:int_findColumn0(java.lang.String): columnIndex = i; break;  =>   break;
SDL_71:160:int_findColumn0(java.lang.String): columnIndex = i; break;  =>   columnIndex = i;
SDL_72:162:int_findColumn0(java.lang.String): if (columnLabel.equalsIgnoreCase( tabName + '.' + colName )) {     columnIndex = i;     break; }  =>   if (true) {     columnIndex = i;     break; }
SDL_73:164:int_findColumn0(java.lang.String): continue;  =>  
SDL_74:166:int_findColumn0(java.lang.String): if (schemName == null || schemName.length() == 0) {     continue; }  =>   if (true) {     continue; }
SDL_75:169:int_findColumn0(java.lang.String): columnIndex = i; break;  =>   break;
SDL_76:169:int_findColumn0(java.lang.String): columnIndex = i; break;  =>   columnIndex = i;
SDL_77:171:int_findColumn0(java.lang.String): if (columnLabel.equalsIgnoreCase( match )) {     columnIndex = i;     break; }  =>   if (true) {     columnIndex = i;     break; }
SDL_78:174:int_findColumn0(java.lang.String): throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel );  =>  
SDL_79:176:int_findColumn0(java.lang.String): if (columnIndex < 0) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); }  =>   if (true) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, columnLabel ); }
SDL_80:178:int_findColumn0(java.lang.String): columnMap = new com.example.resultset.MockIntValueHashMap();  =>  
SDL_81:180:int_findColumn0(java.lang.String): if (columnMap == null) {     columnMap = new com.example.resultset.MockIntValueHashMap(); }  =>   if (true) {     columnMap = new com.example.resultset.MockIntValueHashMap(); }
SDL_82:182:int_findColumn0(java.lang.String): return columnIndex;  =>   return 0;
SDL_83:190:boolean_isBeforeFirst(): return rv;  =>   return true;
SDL_84:190:boolean_isBeforeFirst(): return rv;  =>   return false;
SDL_85:202:boolean_isBeforeFirst0(): checkClosed(); if (isOnInsertRow) {     return false; } return navigator.isBeforeFirst();  =>   if (isOnInsertRow) {     return false; } return navigator.isBeforeFirst();
SDL_86:200:boolean_isBeforeFirst0(): checkClosed(); if (isOnInsertRow) {     return false; } return navigator.isBeforeFirst();  =>   checkClosed(); return navigator.isBeforeFirst();
SDL_87:202:boolean_isBeforeFirst0(): if (isOnInsertRow) {     return false; }  =>   if (true) {     return false; }
SDL_88:201:boolean_isBeforeFirst0(): return false;  =>   return true;
SDL_89:203:boolean_isBeforeFirst0(): return navigator.isBeforeFirst();  =>   return true;
SDL_90:203:boolean_isBeforeFirst0(): return navigator.isBeforeFirst();  =>   return false;
SDL_91:211:boolean_isAfterLast(): return rv;  =>   return true;
SDL_92:211:boolean_isAfterLast(): return rv;  =>   return false;
SDL_93:223:boolean_isAfterLast0(): checkClosed(); if (isOnInsertRow) {     return false; } return navigator.isAfterLast();  =>   if (isOnInsertRow) {     return false; } return navigator.isAfterLast();
SDL_94:221:boolean_isAfterLast0(): checkClosed(); if (isOnInsertRow) {     return false; } return navigator.isAfterLast();  =>   checkClosed(); return navigator.isAfterLast();
SDL_95:223:boolean_isAfterLast0(): if (isOnInsertRow) {     return false; }  =>   if (true) {     return false; }
SDL_96:222:boolean_isAfterLast0(): return false;  =>   return true;
SDL_97:224:boolean_isAfterLast0(): return navigator.isAfterLast();  =>   return true;
SDL_98:224:boolean_isAfterLast0(): return navigator.isAfterLast();  =>   return false;
SDL_99:232:boolean_isFirst(): return rv;  =>   return true;
SDL_100:232:boolean_isFirst(): return rv;  =>   return false;
SDL_101:244:boolean_isFirst0(): checkClosed(); if (isOnInsertRow) {     return false; } return navigator.isFirst();  =>   if (isOnInsertRow) {     return false; } return navigator.isFirst();
SDL_102:242:boolean_isFirst0(): checkClosed(); if (isOnInsertRow) {     return false; } return navigator.isFirst();  =>   checkClosed(); return navigator.isFirst();
SDL_103:244:boolean_isFirst0(): if (isOnInsertRow) {     return false; }  =>   if (true) {     return false; }
SDL_104:243:boolean_isFirst0(): return false;  =>   return true;
SDL_105:245:boolean_isFirst0(): return navigator.isFirst();  =>   return true;
SDL_106:245:boolean_isFirst0(): return navigator.isFirst();  =>   return false;
SDL_107:253:boolean_isLast(): return rv;  =>   return true;
SDL_108:253:boolean_isLast(): return rv;  =>   return false;
SDL_109:265:boolean_isLast0(): checkClosed(); if (isOnInsertRow) {     return false; } return navigator.isLast();  =>   if (isOnInsertRow) {     return false; } return navigator.isLast();
SDL_110:263:boolean_isLast0(): checkClosed(); if (isOnInsertRow) {     return false; } return navigator.isLast();  =>   checkClosed(); return navigator.isLast();
SDL_111:265:boolean_isLast0(): if (isOnInsertRow) {     return false; }  =>   if (true) {     return false; }
SDL_112:264:boolean_isLast0(): return false;  =>   return true;
SDL_113:266:boolean_isLast0(): return navigator.isLast();  =>   return true;
SDL_114:266:boolean_isLast0(): return navigator.isLast();  =>   return false;
SDL_115:273:void_beforeFirst(): try {     this.beforeFirst0(); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_116:286:void_beforeFirst0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } navigator.beforeFirst();  =>   checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } navigator.beforeFirst();
SDL_117:286:void_beforeFirst0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } navigator.beforeFirst();  =>   checkClosed(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } navigator.beforeFirst();
SDL_118:284:void_beforeFirst0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } navigator.beforeFirst();  =>   checkClosed(); checkNotForwardOnly(); navigator.beforeFirst();
SDL_119:286:void_beforeFirst0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } navigator.beforeFirst();  =>   checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); }
SDL_120:284:void_beforeFirst0(): throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 );  =>  
SDL_121:286:void_beforeFirst0(): if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); }  =>   if (true) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); }
SDL_122:294:void_afterLast(): try {     this.afterLast0(); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_123:307:void_afterLast0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } navigator.afterLast();  =>   checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } navigator.afterLast();
SDL_124:307:void_afterLast0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } navigator.afterLast();  =>   checkClosed(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } navigator.afterLast();
SDL_125:305:void_afterLast0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } navigator.afterLast();  =>   checkClosed(); checkNotForwardOnly(); navigator.afterLast();
SDL_126:307:void_afterLast0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } navigator.afterLast();  =>   checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); }
SDL_127:305:void_afterLast0(): throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 );  =>  
SDL_128:307:void_afterLast0(): if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); }  =>   if (true) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); }
SDL_129:316:boolean_first(): return rv;  =>   return true;
SDL_130:316:boolean_first(): return rv;  =>   return false;
SDL_131:329:boolean_first0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.first();  =>   checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.first();
SDL_132:329:boolean_first0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.first();  =>   checkClosed(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.first();
SDL_133:327:boolean_first0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.first();  =>   checkClosed(); checkNotForwardOnly(); return navigator.first();
SDL_134:327:boolean_first0(): throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 );  =>  
SDL_135:329:boolean_first0(): if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); }  =>   if (true) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); }
SDL_136:330:boolean_first0(): return navigator.first();  =>   return true;
SDL_137:330:boolean_first0(): return navigator.first();  =>   return false;
SDL_138:338:boolean_last(): return rv;  =>   return true;
SDL_139:338:boolean_last(): return rv;  =>   return false;
SDL_140:351:boolean_last0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.last();  =>   checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.last();
SDL_141:351:boolean_last0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.last();  =>   checkClosed(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.last();
SDL_142:349:boolean_last0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.last();  =>   checkClosed(); checkNotForwardOnly(); return navigator.last();
SDL_143:349:boolean_last0(): throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 );  =>  
SDL_144:351:boolean_last0(): if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); }  =>   if (true) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); }
SDL_145:352:boolean_last0(): return navigator.last();  =>   return true;
SDL_146:352:boolean_last0(): return navigator.last();  =>   return false;
SDL_147:360:int_getRow(): return rv;  =>   return 0;
SDL_148:372:int_getRow0(): checkClosed(); if (navigator.isAfterLast()) {     return 0; } return navigator.getRowNumber() + 1;  =>   if (navigator.isAfterLast()) {     return 0; } return navigator.getRowNumber() + 1;
SDL_149:370:int_getRow0(): checkClosed(); if (navigator.isAfterLast()) {     return 0; } return navigator.getRowNumber() + 1;  =>   checkClosed(); return navigator.getRowNumber() + 1;
SDL_150:372:int_getRow0(): if (navigator.isAfterLast()) {     return 0; }  =>   if (true) {     return 0; }
SDL_151:373:int_getRow0(): return navigator.getRowNumber() + 1;  =>   return 0;
SDL_152:381:boolean_absolute(int): return rv;  =>   return true;
SDL_153:381:boolean_absolute(int): return rv;  =>   return false;
SDL_154:401:boolean_absolute0(int): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } if (row > 0) {     row--; } else {     if (row == 0) {         return navigator.beforeFirst();     } } return navigator.absolute( row );  =>   checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } if (row > 0) {     row--; } else {     if (row == 0) {         return navigator.beforeFirst();     } } return navigator.absolute( row );
SDL_155:401:boolean_absolute0(int): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } if (row > 0) {     row--; } else {     if (row == 0) {         return navigator.beforeFirst();     } } return navigator.absolute( row );  =>   checkClosed(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } if (row > 0) {     row--; } else {     if (row == 0) {         return navigator.beforeFirst();     } } return navigator.absolute( row );
SDL_156:399:boolean_absolute0(int): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } if (row > 0) {     row--; } else {     if (row == 0) {         return navigator.beforeFirst();     } } return navigator.absolute( row );  =>   checkClosed(); checkNotForwardOnly(); if (row > 0) {     row--; } else {     if (row == 0) {         return navigator.beforeFirst();     } } return navigator.absolute( row );
SDL_157:395:boolean_absolute0(int): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } if (row > 0) {     row--; } else {     if (row == 0) {         return navigator.beforeFirst();     } } return navigator.absolute( row );  =>   checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.absolute( row );
SDL_158:392:boolean_absolute0(int): throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 );  =>  
SDL_159:394:boolean_absolute0(int): if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); }  =>   if (true) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); }
SDL_160:395:boolean_absolute0(int): row--;  =>  
SDL_161:401:boolean_absolute0(int): if (row > 0) {     row--; } else {     if (row == 0) {         return navigator.beforeFirst();     } }  =>   if (true) {     row--; } else {     if (row == 0) {         return navigator.beforeFirst();     } }
SDL_162:397:boolean_absolute0(int): if (row == 0) {     return navigator.beforeFirst(); }  =>  
SDL_163:400:boolean_absolute0(int): if (row == 0) {     return navigator.beforeFirst(); }  =>   if (true) {     return navigator.beforeFirst(); }
SDL_164:399:boolean_absolute0(int): return navigator.beforeFirst();  =>   return true;
SDL_165:399:boolean_absolute0(int): return navigator.beforeFirst();  =>   return false;
SDL_166:402:boolean_absolute0(int): return navigator.absolute( row );  =>   return true;
SDL_167:402:boolean_absolute0(int): return navigator.absolute( row );  =>   return false;
SDL_168:410:boolean_relative(int): return rv;  =>   return true;
SDL_169:410:boolean_relative(int): return rv;  =>   return false;
SDL_170:423:boolean_relative0(int): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.relative( rows );  =>   checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.relative( rows );
SDL_171:423:boolean_relative0(int): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.relative( rows );  =>   checkClosed(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.relative( rows );
SDL_172:421:boolean_relative0(int): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.relative( rows );  =>   checkClosed(); checkNotForwardOnly(); return navigator.relative( rows );
SDL_173:421:boolean_relative0(int): throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 );  =>  
SDL_174:423:boolean_relative0(int): if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); }  =>   if (true) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); }
SDL_175:424:boolean_relative0(int): return navigator.relative( rows );  =>   return true;
SDL_176:424:boolean_relative0(int): return navigator.relative( rows );  =>   return false;
SDL_177:432:boolean_previous(): return rv;  =>   return true;
SDL_178:432:boolean_previous(): return rv;  =>   return false;
SDL_179:446:boolean_previous0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } rootWarning = null; return navigator.previous();  =>   checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } rootWarning = null; return navigator.previous();
SDL_180:446:boolean_previous0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } rootWarning = null; return navigator.previous();  =>   checkClosed(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } rootWarning = null; return navigator.previous();
SDL_181:444:boolean_previous0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } rootWarning = null; return navigator.previous();  =>   checkClosed(); checkNotForwardOnly(); rootWarning = null; return navigator.previous();
SDL_182:446:boolean_previous0(): checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } rootWarning = null; return navigator.previous();  =>   checkClosed(); checkNotForwardOnly(); if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); } return navigator.previous();
SDL_183:443:boolean_previous0(): throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 );  =>  
SDL_184:445:boolean_previous0(): if (isOnInsertRow || isRowUpdated) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); }  =>   if (true) {     throw MockUtil.sqlExceptionSQL( MockErrorCode.X_24513 ); }
SDL_185:447:boolean_previous0(): return navigator.previous();  =>   return true;
SDL_186:447:boolean_previous0(): return navigator.previous();  =>   return false;
SDL_187:454:void_updateInt(int,int): try {     this.updateInt0( columnIndex, x ); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_188:463:void_updateInt0(int,int): startUpdate( columnIndex ); preparedStatement.setIntParameter( columnIndex, x );  =>   preparedStatement.setIntParameter( columnIndex, x );
SDL_189:463:void_updateInt0(int,int): startUpdate( columnIndex ); preparedStatement.setIntParameter( columnIndex, x );  =>   startUpdate( columnIndex );
SDL_190:471:void_updateInt(java.lang.String,int): try {     this.updateInt0( columnLabel, x ); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_191:479:void_updateInt0(java.lang.String,int): updateInt( findColumn( columnLabel ), x );  =>  
SDL_192:487:void_insertRow(): try {     insertRow0(); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_193:495:void_insertRow0(): performInsert();  =>  
SDL_194:503:void_updateRow(): try {     this.updateRow0(); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_195:511:void_updateRow0(): performUpdate();  =>  
SDL_196:519:void_deleteRow(): try {     this.deleteRow0(); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_197:527:void_deleteRow0(): performDelete();  =>  
SDL_198:535:void_refreshRow(): try {     this.refreshRow0(); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_199:543:void_refreshRow0(): clearUpdates();  =>  
SDL_200:551:void_cancelRowUpdates(): try {     this.cancelRowUpdates0(); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_201:559:void_cancelRowUpdates0(): clearUpdates();  =>  
SDL_202:567:void_moveToInsertRow(): try {     moveToInsertRow0(); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_203:575:void_moveToInsertRow0(): startInsert();  =>  
SDL_204:583:void_moveToCurrentRow(): try {     this.moveToCurrentRow0(); } catch ( java.lang.Exception ex ) {     throw ex; }  =>   try { }
SDL_205:591:void_moveToCurrentRow0(): endInsert();  =>  
SDL_206:655:java.lang.Object[]_getCurrent(): final com.example.resultset.MockRowSetNavigator lnavigator = this.navigator; if (lnavigator == null) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); } else {     if (lnavigator.isEmpty()) {         throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_EMPTY );     } else {         if (lnavigator.isBeforeFirst()) {             throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_BEFORE_FIRST );         } else {             if (lnavigator.isAfterLast()) {                 throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_AFTER_LAST );             }         }     } } java.lang.Object[] data = lnavigator.getCurrent(); if (data == null) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); } return data;  =>   final com.example.resultset.MockRowSetNavigator lnavigator = this.navigator; java.lang.Object[] data = lnavigator.getCurrent(); if (data == null) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); } return data;
SDL_207:667:java.lang.Object[]_getCurrent(): final com.example.resultset.MockRowSetNavigator lnavigator = this.navigator; if (lnavigator == null) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); } else {     if (lnavigator.isEmpty()) {         throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_EMPTY );     } else {         if (lnavigator.isBeforeFirst()) {             throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_BEFORE_FIRST );         } else {             if (lnavigator.isAfterLast()) {                 throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_AFTER_LAST );             }         }     } } java.lang.Object[] data = lnavigator.getCurrent(); if (data == null) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); } return data;  =>   final com.example.resultset.MockRowSetNavigator lnavigator = this.navigator; if (lnavigator == null) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); } else {     if (lnavigator.isEmpty()) {         throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_EMPTY );     } else {         if (lnavigator.isBeforeFirst()) {             throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_BEFORE_FIRST );         } else {             if (lnavigator.isAfterLast()) {                 throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_AFTER_LAST );             }         }     } } java.lang.Object[] data = lnavigator.getCurrent(); return data;
SDL_208:651:java.lang.Object[]_getCurrent(): throw MockUtil.sqlException( MockErrorCode.X_24501 );  =>  
SDL_209:665:java.lang.Object[]_getCurrent(): if (lnavigator == null) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); } else {     if (lnavigator.isEmpty()) {         throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_EMPTY );     } else {         if (lnavigator.isBeforeFirst()) {             throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_BEFORE_FIRST );         } else {             if (lnavigator.isAfterLast()) {                 throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_AFTER_LAST );             }         }     } }  =>   if (true) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); } else {     if (lnavigator.isEmpty()) {         throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_EMPTY );     } else {         if (lnavigator.isBeforeFirst()) {             throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_BEFORE_FIRST );         } else {             if (lnavigator.isAfterLast()) {                 throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_AFTER_LAST );             }         }     } }
SDL_210:653:java.lang.Object[]_getCurrent(): if (lnavigator.isEmpty()) {     throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_EMPTY ); } else {     if (lnavigator.isBeforeFirst()) {         throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_BEFORE_FIRST );     } else {         if (lnavigator.isAfterLast()) {             throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_AFTER_LAST );         }     } }  =>  
SDL_211:654:java.lang.Object[]_getCurrent(): throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_EMPTY );  =>  
SDL_212:664:java.lang.Object[]_getCurrent(): if (lnavigator.isEmpty()) {     throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_EMPTY ); } else {     if (lnavigator.isBeforeFirst()) {         throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_BEFORE_FIRST );     } else {         if (lnavigator.isAfterLast()) {             throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_AFTER_LAST );         }     } }  =>   if (true) {     throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_EMPTY ); } else {     if (lnavigator.isBeforeFirst()) {         throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_BEFORE_FIRST );     } else {         if (lnavigator.isAfterLast()) {             throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_AFTER_LAST );         }     } }
SDL_213:656:java.lang.Object[]_getCurrent(): if (lnavigator.isBeforeFirst()) {     throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_BEFORE_FIRST ); } else {     if (lnavigator.isAfterLast()) {         throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_AFTER_LAST );     } }  =>  
SDL_214:657:java.lang.Object[]_getCurrent(): throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_BEFORE_FIRST );  =>  
SDL_215:663:java.lang.Object[]_getCurrent(): if (lnavigator.isBeforeFirst()) {     throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_BEFORE_FIRST ); } else {     if (lnavigator.isAfterLast()) {         throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_AFTER_LAST );     } }  =>   if (true) {     throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_BEFORE_FIRST ); } else {     if (lnavigator.isAfterLast()) {         throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_AFTER_LAST );     } }
SDL_216:659:java.lang.Object[]_getCurrent(): if (lnavigator.isAfterLast()) {     throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_AFTER_LAST ); }  =>  
SDL_217:660:java.lang.Object[]_getCurrent(): throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_AFTER_LAST );  =>  
SDL_218:662:java.lang.Object[]_getCurrent(): if (lnavigator.isAfterLast()) {     throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_AFTER_LAST ); }  =>   if (true) {     throw MockUtil.sqlException( MockErrorCode.X_24504, MockErrorCode.M_RS_AFTER_LAST ); }
SDL_219:667:java.lang.Object[]_getCurrent(): throw MockUtil.sqlException( MockErrorCode.X_24501 );  =>  
SDL_220:669:java.lang.Object[]_getCurrent(): if (data == null) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); }  =>   if (true) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); }
SDL_221:675:void_checkClosed(): if (navigator == null) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); }  =>  
SDL_222:676:void_checkClosed(): throw MockUtil.sqlException( MockErrorCode.X_24501 );  =>  
SDL_223:678:void_checkClosed(): if (navigator == null) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); }  =>   if (true) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); }
SDL_224:686:void_checkColumn(int): if (navigator == null) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); } if (columnIndex < 1 || columnIndex > columnCount) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, String.valueOf( columnIndex ) ); }  =>   if (columnIndex < 1 || columnIndex > columnCount) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, String.valueOf( columnIndex ) ); }
SDL_225:686:void_checkColumn(int): if (navigator == null) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); } if (columnIndex < 1 || columnIndex > columnCount) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, String.valueOf( columnIndex ) ); }  =>   if (navigator == null) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); }
SDL_226:684:void_checkColumn(int): throw MockUtil.sqlException( MockErrorCode.X_24501 );  =>  
SDL_227:686:void_checkColumn(int): if (navigator == null) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); }  =>   if (true) {     throw MockUtil.sqlException( MockErrorCode.X_24501 ); }
SDL_228:687:void_checkColumn(int): throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, String.valueOf( columnIndex ) );  =>  
SDL_229:689:void_checkColumn(int): if (columnIndex < 1 || columnIndex > columnCount) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, String.valueOf( columnIndex ) ); }  =>   if (true) {     throw MockUtil.sqlException( MockErrorCode.JDBC_COLUMN_NOT_FOUND, String.valueOf( columnIndex ) ); }
SDL_230:694:boolean_trackNull(java.lang.Object): return wasNullValue = o == null;  =>   return true;
SDL_231:694:boolean_trackNull(java.lang.Object): return wasNullValue = o == null;  =>   return false;
SDL_232:717:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): java.lang.Object[] rowData = getCurrent(); com.example.resultset.MockType sourceType; java.lang.Object value; checkColumn( columnIndex ); sourceType = resultMetaData.columnTypes[--columnIndex]; value = rowData[columnIndex]; if (trackNull( value )) {     return null; } if (sourceType.typeCode != targetType.typeCode) {     try {         value = targetType.convertToTypeJDBC( session, value, sourceType );     } catch ( java.lang.Exception e ) {         java.lang.String stringValue = value instanceof java.lang.Number || value instanceof java.lang.String ? value.toString() : \"instance of \" + value.getClass().getName();         java.lang.String msg = \"from SQL type \" + sourceType.getNameString() + \" to \" + targetType.getJDBCClassName() + \", value: \" + stringValue;         MockUtil.throwError( MockError.error( MockErrorCode.X_42561, msg ) );     } } return value;  =>   java.lang.Object[] rowData = getCurrent(); com.example.resultset.MockType sourceType; java.lang.Object value; sourceType = resultMetaData.columnTypes[--columnIndex]; value = rowData[columnIndex]; if (trackNull( value )) {     return null; } if (sourceType.typeCode != targetType.typeCode) {     try {         value = targetType.convertToTypeJDBC( session, value, sourceType );     } catch ( java.lang.Exception e ) {         java.lang.String stringValue = value instanceof java.lang.Number || value instanceof java.lang.String ? value.toString() : \"instance of \" + value.getClass().getName();         java.lang.String msg = \"from SQL type \" + sourceType.getNameString() + \" to \" + targetType.getJDBCClassName() + \", value: \" + stringValue;         MockUtil.throwError( MockError.error( MockErrorCode.X_42561, msg ) );     } } return value;
SDL_233:717:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): java.lang.Object[] rowData = getCurrent(); com.example.resultset.MockType sourceType; java.lang.Object value; checkColumn( columnIndex ); sourceType = resultMetaData.columnTypes[--columnIndex]; value = rowData[columnIndex]; if (trackNull( value )) {     return null; } if (sourceType.typeCode != targetType.typeCode) {     try {         value = targetType.convertToTypeJDBC( session, value, sourceType );     } catch ( java.lang.Exception e ) {         java.lang.String stringValue = value instanceof java.lang.Number || value instanceof java.lang.String ? value.toString() : \"instance of \" + value.getClass().getName();         java.lang.String msg = \"from SQL type \" + sourceType.getNameString() + \" to \" + targetType.getJDBCClassName() + \", value: \" + stringValue;         MockUtil.throwError( MockError.error( MockErrorCode.X_42561, msg ) );     } } return value;  =>   java.lang.Object[] rowData = getCurrent(); com.example.resultset.MockType sourceType; java.lang.Object value; checkColumn( columnIndex ); value = rowData[columnIndex]; if (trackNull( value )) {     return null; } if (sourceType.typeCode != targetType.typeCode) {     try {         value = targetType.convertToTypeJDBC( session, value, sourceType );     } catch ( java.lang.Exception e ) {         java.lang.String stringValue = value instanceof java.lang.Number || value instanceof java.lang.String ? value.toString() : \"instance of \" + value.getClass().getName();         java.lang.String msg = \"from SQL type \" + sourceType.getNameString() + \" to \" + targetType.getJDBCClassName() + \", value: \" + stringValue;         MockUtil.throwError( MockError.error( MockErrorCode.X_42561, msg ) );     } } return value;
SDL_234:717:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): java.lang.Object[] rowData = getCurrent(); com.example.resultset.MockType sourceType; java.lang.Object value; checkColumn( columnIndex ); sourceType = resultMetaData.columnTypes[--columnIndex]; value = rowData[columnIndex]; if (trackNull( value )) {     return null; } if (sourceType.typeCode != targetType.typeCode) {     try {         value = targetType.convertToTypeJDBC( session, value, sourceType );     } catch ( java.lang.Exception e ) {         java.lang.String stringValue = value instanceof java.lang.Number || value instanceof java.lang.String ? value.toString() : \"instance of \" + value.getClass().getName();         java.lang.String msg = \"from SQL type \" + sourceType.getNameString() + \" to \" + targetType.getJDBCClassName() + \", value: \" + stringValue;         MockUtil.throwError( MockError.error( MockErrorCode.X_42561, msg ) );     } } return value;  =>   java.lang.Object[] rowData = getCurrent(); com.example.resultset.MockType sourceType; java.lang.Object value; checkColumn( columnIndex ); sourceType = resultMetaData.columnTypes[--columnIndex]; if (trackNull( value )) {     return null; } if (sourceType.typeCode != targetType.typeCode) {     try {         value = targetType.convertToTypeJDBC( session, value, sourceType );     } catch ( java.lang.Exception e ) {         java.lang.String stringValue = value instanceof java.lang.Number || value instanceof java.lang.String ? value.toString() : \"instance of \" + value.getClass().getName();         java.lang.String msg = \"from SQL type \" + sourceType.getNameString() + \" to \" + targetType.getJDBCClassName() + \", value: \" + stringValue;         MockUtil.throwError( MockError.error( MockErrorCode.X_42561, msg ) );     } } return value;
SDL_235:715:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): java.lang.Object[] rowData = getCurrent(); com.example.resultset.MockType sourceType; java.lang.Object value; checkColumn( columnIndex ); sourceType = resultMetaData.columnTypes[--columnIndex]; value = rowData[columnIndex]; if (trackNull( value )) {     return null; } if (sourceType.typeCode != targetType.typeCode) {     try {         value = targetType.convertToTypeJDBC( session, value, sourceType );     } catch ( java.lang.Exception e ) {         java.lang.String stringValue = value instanceof java.lang.Number || value instanceof java.lang.String ? value.toString() : \"instance of \" + value.getClass().getName();         java.lang.String msg = \"from SQL type \" + sourceType.getNameString() + \" to \" + targetType.getJDBCClassName() + \", value: \" + stringValue;         MockUtil.throwError( MockError.error( MockErrorCode.X_42561, msg ) );     } } return value;  =>   java.lang.Object[] rowData = getCurrent(); com.example.resultset.MockType sourceType; java.lang.Object value; checkColumn( columnIndex ); sourceType = resultMetaData.columnTypes[--columnIndex]; value = rowData[columnIndex]; if (sourceType.typeCode != targetType.typeCode) {     try {         value = targetType.convertToTypeJDBC( session, value, sourceType );     } catch ( java.lang.Exception e ) {         java.lang.String stringValue = value instanceof java.lang.Number || value instanceof java.lang.String ? value.toString() : \"instance of \" + value.getClass().getName();         java.lang.String msg = \"from SQL type \" + sourceType.getNameString() + \" to \" + targetType.getJDBCClassName() + \", value: \" + stringValue;         MockUtil.throwError( MockError.error( MockErrorCode.X_42561, msg ) );     } } return value;
SDL_236:709:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): java.lang.Object[] rowData = getCurrent(); com.example.resultset.MockType sourceType; java.lang.Object value; checkColumn( columnIndex ); sourceType = resultMetaData.columnTypes[--columnIndex]; value = rowData[columnIndex]; if (trackNull( value )) {     return null; } if (sourceType.typeCode != targetType.typeCode) {     try {         value = targetType.convertToTypeJDBC( session, value, sourceType );     } catch ( java.lang.Exception e ) {         java.lang.String stringValue = value instanceof java.lang.Number || value instanceof java.lang.String ? value.toString() : \"instance of \" + value.getClass().getName();         java.lang.String msg = \"from SQL type \" + sourceType.getNameString() + \" to \" + targetType.getJDBCClassName() + \", value: \" + stringValue;         MockUtil.throwError( MockError.error( MockErrorCode.X_42561, msg ) );     } } return value;  =>   java.lang.Object[] rowData = getCurrent(); com.example.resultset.MockType sourceType; java.lang.Object value; checkColumn( columnIndex ); sourceType = resultMetaData.columnTypes[--columnIndex]; value = rowData[columnIndex]; if (trackNull( value )) {     return null; } return value;
SDL_237:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): if (trackNull( value )) {     return null; }  =>   if (true) {     return null; }
SDL_238:717:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): if (sourceType.typeCode != targetType.typeCode) {     try {         value = targetType.convertToTypeJDBC( session, value, sourceType );     } catch ( java.lang.Exception e ) {         java.lang.String stringValue = value instanceof java.lang.Number || value instanceof java.lang.String ? value.toString() : \"instance of \" + value.getClass().getName();         java.lang.String msg = \"from SQL type \" + sourceType.getNameString() + \" to \" + targetType.getJDBCClassName() + \", value: \" + stringValue;         MockUtil.throwError( MockError.error( MockErrorCode.X_42561, msg ) );     } }  =>   if (true) {     try {         value = targetType.convertToTypeJDBC( session, value, sourceType );     } catch ( java.lang.Exception e ) {         java.lang.String stringValue = value instanceof java.lang.Number || value instanceof java.lang.String ? value.toString() : \"instance of \" + value.getClass().getName();         java.lang.String msg = \"from SQL type \" + sourceType.getNameString() + \" to \" + targetType.getJDBCClassName() + \", value: \" + stringValue;         MockUtil.throwError( MockError.error( MockErrorCode.X_42561, msg ) );     } }
SDL_239:711:java.lang.Object_getColumnInType(int,com.example.resultset.MockType): try {     value = targetType.convertToTypeJDBC( session, value, sourceType ); } catch ( java.lang.Exception e ) {     java.lang.String stringValue = value instanceof java.lang.Number || value instanceof java.lang.String ? value.toString() : \"instance of \" + value.getClass().getName();     java.lang.String msg = \"from SQL type \" + sourceType.getNameString() + \" to \" + targetType.getJDBCClassName() + \", value: \" + stringValue;     MockUtil.throwError( MockError.error( MockErrorCode.X_42561, msg ) ); }  =>   try { }
SDL_240:723:void_checkNotForwardOnly(): if (!isScrollable) {     throw MockUtil.notSupported(); }  =>  
SDL_241:724:void_checkNotForwardOnly(): throw MockUtil.notSupported();  =>  
SDL_242:726:void_checkNotForwardOnly(): if (!isScrollable) {     throw MockUtil.notSupported(); }  =>   if (true) {     throw MockUtil.notSupported(); }
SDL_243:742:void_checkUpdatable(): checkClosed(); if (!isUpdatable) {     throw MockUtil.notUpdatableColumn(); }  =>   if (!isUpdatable) {     throw MockUtil.notUpdatableColumn(); }
SDL_244:740:void_checkUpdatable(): checkClosed(); if (!isUpdatable) {     throw MockUtil.notUpdatableColumn(); }  =>   checkClosed();
SDL_245:741:void_checkUpdatable(): throw MockUtil.notUpdatableColumn();  =>  
SDL_246:743:void_checkUpdatable(): if (!isUpdatable) {     throw MockUtil.notUpdatableColumn(); }  =>   if (true) {     throw MockUtil.notUpdatableColumn(); }
SDL_247:758:void_checkUpdatable(int): checkClosed(); checkColumn( columnIndex ); if (!isUpdatable) {     throw MockUtil.notUpdatableColumn(); } if (resultMetaData.colIndexes[--columnIndex] == -1) {     throw MockUtil.notUpdatableColumn(); } if (!resultMetaData.columns[columnIndex].isWriteable()) {     throw MockUtil.notUpdatableColumn(); }  =>   checkColumn( columnIndex ); if (!isUpdatable) {     throw MockUtil.notUpdatableColumn(); } if (resultMetaData.colIndexes[--columnIndex] == -1) {     throw MockUtil.notUpdatableColumn(); } if (!resultMetaData.columns[columnIndex].isWriteable()) {     throw MockUtil.notUpdatableColumn(); }
SDL_248:758:void_checkUpdatable(int): checkClosed(); checkColumn( columnIndex ); if (!isUpdatable) {     throw MockUtil.notUpdatableColumn(); } if (resultMetaData.colIndexes[--columnIndex] == -1) {     throw MockUtil.notUpdatableColumn(); } if (!resultMetaData.columns[columnIndex].isWriteable()) {     throw MockUtil.notUpdatableColumn(); }  =>   checkClosed(); if (!isUpdatable) {     throw MockUtil.notUpdatableColumn(); } if (resultMetaData.colIndexes[--columnIndex] == -1) {     throw MockUtil.notUpdatableColumn(); } if (!resultMetaData.columns[columnIndex].isWriteable()) {     throw MockUtil.notUpdatableColumn(); }
SDL_249:756:void_checkUpdatable(int): checkClosed(); checkColumn( columnIndex ); if (!isUpdatable) {     throw MockUtil.notUpdatableColumn(); } if (resultMetaData.colIndexes[--columnIndex] == -1) {     throw MockUtil.notUpdatableColumn(); } if (!resultMetaData.columns[columnIndex].isWriteable()) {     throw MockUtil.notUpdatableColumn(); }  =>   checkClosed(); checkColumn( columnIndex ); if (resultMetaData.colIndexes[--columnIndex] == -1) {     throw MockUtil.notUpdatableColumn(); } if (!resultMetaData.columns[columnIndex].isWriteable()) {     throw MockUtil.notUpdatableColumn(); }
SDL_250:756:void_checkUpdatable(int): checkClosed(); checkColumn( columnIndex ); if (!isUpdatable) {     throw MockUtil.notUpdatableColumn(); } if (resultMetaData.colIndexes[--columnIndex] == -1) {     throw MockUtil.notUpdatableColumn(); } if (!resultMetaData.columns[columnIndex].isWriteable()) {     throw MockUtil.notUpdatableColumn(); }  =>   checkClosed(); checkColumn( columnIndex ); if (!isUpdatable) {     throw MockUtil.notUpdatableColumn(); } if (!resultMetaData.columns[columnIndex].isWriteable()) {     throw MockUtil.notUpdatableColumn(); }
SDL_251:756:void_checkUpdatable(int): checkClosed(); checkColumn( columnIndex ); if (!isUpdatable) {     throw MockUtil.notUpdatableColumn(); } if (resultMetaData.colIndexes[--columnIndex] == -1) {     throw MockUtil.notUpdatableColumn(); } if (!resultMetaData.columns[columnIndex].isWriteable()) {     throw MockUtil.notUpdatableColumn(); }  =>   checkClosed(); checkColumn( columnIndex ); if (!isUpdatable) {     throw MockUtil.notUpdatableColumn(); } if (resultMetaData.colIndexes[--columnIndex] == -1) {     throw MockUtil.notUpdatableColumn(); }
SDL_252:751:void_checkUpdatable(int): throw MockUtil.notUpdatableColumn();  =>  
SDL_253:753:void_checkUpdatable(int): if (!isUpdatable) {     throw MockUtil.notUpdatableColumn(); }  =>   if (true) {     throw MockUtil.notUpdatableColumn(); }
SDL_254:754:void_checkUpdatable(int): throw MockUtil.notUpdatableColumn();  =>  
SDL_255:756:void_checkUpdatable(int): if (resultMetaData.colIndexes[--columnIndex] == -1) {     throw MockUtil.notUpdatableColumn(); }  =>   if (true) {     throw MockUtil.notUpdatableColumn(); }
SDL_256:757:void_checkUpdatable(int): throw MockUtil.notUpdatableColumn();  =>  
SDL_257:759:void_checkUpdatable(int): if (!resultMetaData.columns[columnIndex].isWriteable()) {     throw MockUtil.notUpdatableColumn(); }  =>   if (true) {     throw MockUtil.notUpdatableColumn(); }
SDL_258:769:void_startUpdate(int): checkUpdatable( columnIndex ); if (currentUpdateRowNumber != navigator.getRowNumber()) {     preparedStatement.clearParameters(); } currentUpdateRowNumber = navigator.getRowNumber(); isRowUpdated = true;  =>   if (currentUpdateRowNumber != navigator.getRowNumber()) {     preparedStatement.clearParameters(); } currentUpdateRowNumber = navigator.getRowNumber(); isRowUpdated = true;
SDL_259:767:void_startUpdate(int): checkUpdatable( columnIndex ); if (currentUpdateRowNumber != navigator.getRowNumber()) {     preparedStatement.clearParameters(); } currentUpdateRowNumber = navigator.getRowNumber(); isRowUpdated = true;  =>   checkUpdatable( columnIndex ); currentUpdateRowNumber = navigator.getRowNumber(); isRowUpdated = true;
SDL_260:769:void_startUpdate(int): checkUpdatable( columnIndex ); if (currentUpdateRowNumber != navigator.getRowNumber()) {     preparedStatement.clearParameters(); } currentUpdateRowNumber = navigator.getRowNumber(); isRowUpdated = true;  =>   checkUpdatable( columnIndex ); if (currentUpdateRowNumber != navigator.getRowNumber()) {     preparedStatement.clearParameters(); } isRowUpdated = true;
SDL_261:769:void_startUpdate(int): checkUpdatable( columnIndex ); if (currentUpdateRowNumber != navigator.getRowNumber()) {     preparedStatement.clearParameters(); } currentUpdateRowNumber = navigator.getRowNumber(); isRowUpdated = true;  =>   checkUpdatable( columnIndex ); if (currentUpdateRowNumber != navigator.getRowNumber()) {     preparedStatement.clearParameters(); } currentUpdateRowNumber = navigator.getRowNumber();
SDL_262:766:void_startUpdate(int): preparedStatement.clearParameters();  =>  
SDL_263:768:void_startUpdate(int): if (currentUpdateRowNumber != navigator.getRowNumber()) {     preparedStatement.clearParameters(); }  =>   if (true) {     preparedStatement.clearParameters(); }
SDL_264:777:void_clearUpdates(): checkUpdatable(); preparedStatement.clearParameters(); isRowUpdated = false;  =>   preparedStatement.clearParameters(); isRowUpdated = false;
SDL_265:777:void_clearUpdates(): checkUpdatable(); preparedStatement.clearParameters(); isRowUpdated = false;  =>   checkUpdatable(); isRowUpdated = false;
SDL_266:777:void_clearUpdates(): checkUpdatable(); preparedStatement.clearParameters(); isRowUpdated = false;  =>   checkUpdatable(); preparedStatement.clearParameters();
SDL_267:784:void_startInsert(): checkUpdatable(); isOnInsertRow = true;  =>   isOnInsertRow = true;
SDL_268:784:void_startInsert(): checkUpdatable(); isOnInsertRow = true;  =>   checkUpdatable();
SDL_269:792:void_endInsert(): checkUpdatable(); preparedStatement.clearParameters(); isOnInsertRow = false;  =>   preparedStatement.clearParameters(); isOnInsertRow = false;
SDL_270:792:void_endInsert(): checkUpdatable(); preparedStatement.clearParameters(); isOnInsertRow = false;  =>   checkUpdatable(); isOnInsertRow = false;
SDL_271:792:void_endInsert(): checkUpdatable(); preparedStatement.clearParameters(); isOnInsertRow = false;  =>   checkUpdatable(); preparedStatement.clearParameters();
SDL_272:808:void_performUpdate(): preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; } preparedStatement.resultOut.setActionType( MockResultConstants.UPDATE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings(); isRowUpdated = false;  =>   for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; } preparedStatement.resultOut.setActionType( MockResultConstants.UPDATE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings(); isRowUpdated = false;
SDL_273:805:void_performUpdate(): preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; } preparedStatement.resultOut.setActionType( MockResultConstants.UPDATE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings(); isRowUpdated = false;  =>   preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; preparedStatement.resultOut.setActionType( MockResultConstants.UPDATE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings(); isRowUpdated = false;
SDL_274:808:void_performUpdate(): preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; } preparedStatement.resultOut.setActionType( MockResultConstants.UPDATE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings(); isRowUpdated = false;  =>   preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; } preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings(); isRowUpdated = false;
SDL_275:808:void_performUpdate(): preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; } preparedStatement.resultOut.setActionType( MockResultConstants.UPDATE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings(); isRowUpdated = false;  =>   preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; } preparedStatement.resultOut.setActionType( MockResultConstants.UPDATE_CURSOR ); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings(); isRowUpdated = false;
SDL_276:808:void_performUpdate(): preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; } preparedStatement.resultOut.setActionType( MockResultConstants.UPDATE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings(); isRowUpdated = false;  =>   preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; } preparedStatement.resultOut.setActionType( MockResultConstants.UPDATE_CURSOR ); preparedStatement.fetchResult(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings(); isRowUpdated = false;
SDL_277:808:void_performUpdate(): preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; } preparedStatement.resultOut.setActionType( MockResultConstants.UPDATE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings(); isRowUpdated = false;  =>   preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; } preparedStatement.resultOut.setActionType( MockResultConstants.UPDATE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); preparedStatement.clearWarnings(); isRowUpdated = false;
SDL_278:808:void_performUpdate(): preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; } preparedStatement.resultOut.setActionType( MockResultConstants.UPDATE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings(); isRowUpdated = false;  =>   preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; } preparedStatement.resultOut.setActionType( MockResultConstants.UPDATE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); isRowUpdated = false;
SDL_279:808:void_performUpdate(): preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; } preparedStatement.resultOut.setActionType( MockResultConstants.UPDATE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings(); isRowUpdated = false;  =>   preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; } preparedStatement.resultOut.setActionType( MockResultConstants.UPDATE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();
SDL_280:801:void_performUpdate(): boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i]; preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES;  =>   boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];
SDL_281:803:void_performUpdate(): for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; }  =>   for (int i = 0;; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; }
SDL_282:803:void_performUpdate(): for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; }  =>   for (int i = 0; i < columnCount;) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     preparedStatement.resultOut.metaData.columnTypes[i] = set ? preparedStatement.parameterTypes[i] : MockType.SQL_ALL_TYPES; }
SDL_283:826:void_performInsert(): checkUpdatable(); for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; } preparedStatement.resultOut.setActionType( MockResultConstants.INSERT_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();  =>   for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; } preparedStatement.resultOut.setActionType( MockResultConstants.INSERT_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();
SDL_284:820:void_performInsert(): checkUpdatable(); for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; } preparedStatement.resultOut.setActionType( MockResultConstants.INSERT_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();  =>   checkUpdatable(); preparedStatement.resultOut.setActionType( MockResultConstants.INSERT_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();
SDL_285:826:void_performInsert(): checkUpdatable(); for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; } preparedStatement.resultOut.setActionType( MockResultConstants.INSERT_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();  =>   checkUpdatable(); for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; } preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();
SDL_286:826:void_performInsert(): checkUpdatable(); for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; } preparedStatement.resultOut.setActionType( MockResultConstants.INSERT_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();  =>   checkUpdatable(); for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; } preparedStatement.resultOut.setActionType( MockResultConstants.INSERT_CURSOR ); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();
SDL_287:826:void_performInsert(): checkUpdatable(); for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; } preparedStatement.resultOut.setActionType( MockResultConstants.INSERT_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();  =>   checkUpdatable(); for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; } preparedStatement.resultOut.setActionType( MockResultConstants.INSERT_CURSOR ); preparedStatement.fetchResult(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();
SDL_288:826:void_performInsert(): checkUpdatable(); for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; } preparedStatement.resultOut.setActionType( MockResultConstants.INSERT_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();  =>   checkUpdatable(); for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; } preparedStatement.resultOut.setActionType( MockResultConstants.INSERT_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); preparedStatement.clearWarnings();
SDL_289:826:void_performInsert(): checkUpdatable(); for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; } preparedStatement.resultOut.setActionType( MockResultConstants.INSERT_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();  =>   checkUpdatable(); for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; } preparedStatement.resultOut.setActionType( MockResultConstants.INSERT_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings();
SDL_290:818:void_performInsert(): boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i]; if (!set) {     throw MockUtil.sqlException( MockErrorCode.X_24515 ); } preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i];  =>   boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i]; preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i];
SDL_291:820:void_performInsert(): boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i]; if (!set) {     throw MockUtil.sqlException( MockErrorCode.X_24515 ); } preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i];  =>   boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i]; if (!set) {     throw MockUtil.sqlException( MockErrorCode.X_24515 ); }
SDL_292:822:void_performInsert(): for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; }  =>   for (int i = 0;; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; }
SDL_293:822:void_performInsert(): for (int i = 0; i < columnCount; i++) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; }  =>   for (int i = 0; i < columnCount;) {     boolean set = preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i];     if (!set) {         throw MockUtil.sqlException( MockErrorCode.X_24515 );     }     preparedStatement.resultOut.metaData.columnTypes[i] = preparedStatement.parameterTypes[i]; }
SDL_294:818:void_performInsert(): throw MockUtil.sqlException( MockErrorCode.X_24515 );  =>  
SDL_295:820:void_performInsert(): if (!set) {     throw MockUtil.sqlException( MockErrorCode.X_24515 ); }  =>   if (true) {     throw MockUtil.sqlException( MockErrorCode.X_24515 ); }
SDL_296:839:void_performDelete(): checkUpdatable(); preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; preparedStatement.resultOut.metaData.columnTypes[columnCount] = resultMetaData.columnTypes[columnCount]; preparedStatement.resultOut.setActionType( MockResultConstants.DELETE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();  =>   preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; preparedStatement.resultOut.metaData.columnTypes[columnCount] = resultMetaData.columnTypes[columnCount]; preparedStatement.resultOut.setActionType( MockResultConstants.DELETE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();
SDL_297:839:void_performDelete(): checkUpdatable(); preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; preparedStatement.resultOut.metaData.columnTypes[columnCount] = resultMetaData.columnTypes[columnCount]; preparedStatement.resultOut.setActionType( MockResultConstants.DELETE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();  =>   checkUpdatable(); preparedStatement.resultOut.metaData.columnTypes[columnCount] = resultMetaData.columnTypes[columnCount]; preparedStatement.resultOut.setActionType( MockResultConstants.DELETE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();
SDL_298:839:void_performDelete(): checkUpdatable(); preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; preparedStatement.resultOut.metaData.columnTypes[columnCount] = resultMetaData.columnTypes[columnCount]; preparedStatement.resultOut.setActionType( MockResultConstants.DELETE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();  =>   checkUpdatable(); preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; preparedStatement.resultOut.setActionType( MockResultConstants.DELETE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();
SDL_299:839:void_performDelete(): checkUpdatable(); preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; preparedStatement.resultOut.metaData.columnTypes[columnCount] = resultMetaData.columnTypes[columnCount]; preparedStatement.resultOut.setActionType( MockResultConstants.DELETE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();  =>   checkUpdatable(); preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; preparedStatement.resultOut.metaData.columnTypes[columnCount] = resultMetaData.columnTypes[columnCount]; preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();
SDL_300:839:void_performDelete(): checkUpdatable(); preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; preparedStatement.resultOut.metaData.columnTypes[columnCount] = resultMetaData.columnTypes[columnCount]; preparedStatement.resultOut.setActionType( MockResultConstants.DELETE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();  =>   checkUpdatable(); preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; preparedStatement.resultOut.metaData.columnTypes[columnCount] = resultMetaData.columnTypes[columnCount]; preparedStatement.resultOut.setActionType( MockResultConstants.DELETE_CURSOR ); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();
SDL_301:839:void_performDelete(): checkUpdatable(); preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; preparedStatement.resultOut.metaData.columnTypes[columnCount] = resultMetaData.columnTypes[columnCount]; preparedStatement.resultOut.setActionType( MockResultConstants.DELETE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();  =>   checkUpdatable(); preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; preparedStatement.resultOut.metaData.columnTypes[columnCount] = resultMetaData.columnTypes[columnCount]; preparedStatement.resultOut.setActionType( MockResultConstants.DELETE_CURSOR ); preparedStatement.fetchResult(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();
SDL_302:839:void_performDelete(): checkUpdatable(); preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; preparedStatement.resultOut.metaData.columnTypes[columnCount] = resultMetaData.columnTypes[columnCount]; preparedStatement.resultOut.setActionType( MockResultConstants.DELETE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();  =>   checkUpdatable(); preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; preparedStatement.resultOut.metaData.columnTypes[columnCount] = resultMetaData.columnTypes[columnCount]; preparedStatement.resultOut.setActionType( MockResultConstants.DELETE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); preparedStatement.clearWarnings();
SDL_303:839:void_performDelete(): checkUpdatable(); preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; preparedStatement.resultOut.metaData.columnTypes[columnCount] = resultMetaData.columnTypes[columnCount]; preparedStatement.resultOut.setActionType( MockResultConstants.DELETE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings(); preparedStatement.clearWarnings();  =>   checkUpdatable(); preparedStatement.parameterValues[columnCount] = getCurrent()[columnCount]; preparedStatement.resultOut.metaData.columnTypes[columnCount] = resultMetaData.columnTypes[columnCount]; preparedStatement.resultOut.setActionType( MockResultConstants.DELETE_CURSOR ); preparedStatement.fetchResult(); preparedStatement.clearParameters(); rootWarning = preparedStatement.getWarnings();
SDL_304:864:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_305:864:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = conn.sessionProxy; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_306:864:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = conn.sessionProxy; this.statement = s; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_307:864:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = conn.sessionProxy; this.statement = s; this.result = r; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_308:864:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = conn.sessionProxy; this.statement = s; this.result = r; this.connection = conn; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_309:864:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = conn.sessionProxy; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_310:864:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = conn.sessionProxy; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_311:864:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = conn.sessionProxy; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_312:864:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = conn.sessionProxy; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_313:854:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = conn.sessionProxy; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties );
SDL_314:863:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): isUpdatable = true; isInsertable = true; for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } } preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result );  =>   isInsertable = true; for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } } preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result );
SDL_315:863:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): isUpdatable = true; isInsertable = true; for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } } preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result );  =>   isUpdatable = true; for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } } preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result );
SDL_316:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): isUpdatable = true; isInsertable = true; for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } } preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result );  =>   isUpdatable = true; isInsertable = true; preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result );
SDL_317:863:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): isUpdatable = true; isInsertable = true; for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } } preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result );  =>   isUpdatable = true; isInsertable = true; for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } }
SDL_318:865:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   if (true) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_319:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): if (metaData.colIndexes[i] < 0) {     isInsertable = false;     break; }  =>  
SDL_320:863:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } }  =>   for (int i = 0;; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } }
SDL_321:863:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } }  =>   for (int i = 0; i < metaData.colIndexes.length;) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } }
SDL_322:860:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): isInsertable = false; break;  =>   break;
SDL_323:860:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): isInsertable = false; break;  =>   isInsertable = false;
SDL_324:862:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): if (metaData.colIndexes[i] < 0) {     isInsertable = false;     break; }  =>   if (true) {     isInsertable = false;     break; }
SDL_325:876:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.result = r; this.connection = conn; rsProperties = 0; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount();  =>   this.result = r; this.connection = conn; rsProperties = 0; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount();
SDL_326:876:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.result = r; this.connection = conn; rsProperties = 0; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount();  =>   this.session = conn.sessionProxy; this.connection = conn; rsProperties = 0; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount();
SDL_327:876:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.result = r; this.connection = conn; rsProperties = 0; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount();  =>   this.session = conn.sessionProxy; this.result = r; rsProperties = 0; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount();
SDL_328:876:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.result = r; this.connection = conn; rsProperties = 0; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount();  =>   this.session = conn.sessionProxy; this.result = r; this.connection = conn; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount();
SDL_329:876:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.result = r; this.connection = conn; rsProperties = 0; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount();  =>   this.session = conn.sessionProxy; this.result = r; this.connection = conn; rsProperties = 0; resultMetaData = metaData; columnCount = resultMetaData.getColumnCount();
SDL_330:876:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.result = r; this.connection = conn; rsProperties = 0; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount();  =>   this.session = conn.sessionProxy; this.result = r; this.connection = conn; rsProperties = 0; navigator = r.getNavigator(); columnCount = resultMetaData.getColumnCount();
SDL_331:876:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData): this.session = conn.sessionProxy; this.result = r; this.connection = conn; rsProperties = 0; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount();  =>   this.session = conn.sessionProxy; this.result = r; this.connection = conn; rsProperties = 0; navigator = r.getNavigator(); resultMetaData = metaData;
SDL_332:903:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): if (columnsCount < 1) {     throw new java.lang.IllegalArgumentException( \"column labels has to be greater than zero\" ); } if (columnsCount > 5) {     throw new java.lang.IllegalArgumentException( \"Too many columns\" ); } if (rows < 0) {     throw new java.lang.IllegalArgumentException( \"Invalid row number\" ); } java.lang.String[] columnLabels = new java.lang.String[columnsCount]; for (int i = 0; i < columnsCount; i++) {     columnLabels[i] = \"columnLabel\" + i; } int[][] table = new int[rows][]; for (int i = 0; i < rows; i++) {     table[i] = new int[columnsCount]; } return buildNewJDBCResultSet0( columnLabels, table );  =>   if (columnsCount > 5) {     throw new java.lang.IllegalArgumentException( \"Too many columns\" ); } if (rows < 0) {     throw new java.lang.IllegalArgumentException( \"Invalid row number\" ); } java.lang.String[] columnLabels = new java.lang.String[columnsCount]; for (int i = 0; i < columnsCount; i++) {     columnLabels[i] = \"columnLabel\" + i; } int[][] table = new int[rows][]; for (int i = 0; i < rows; i++) {     table[i] = new int[columnsCount]; } return buildNewJDBCResultSet0( columnLabels, table );
SDL_333:903:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): if (columnsCount < 1) {     throw new java.lang.IllegalArgumentException( \"column labels has to be greater than zero\" ); } if (columnsCount > 5) {     throw new java.lang.IllegalArgumentException( \"Too many columns\" ); } if (rows < 0) {     throw new java.lang.IllegalArgumentException( \"Invalid row number\" ); } java.lang.String[] columnLabels = new java.lang.String[columnsCount]; for (int i = 0; i < columnsCount; i++) {     columnLabels[i] = \"columnLabel\" + i; } int[][] table = new int[rows][]; for (int i = 0; i < rows; i++) {     table[i] = new int[columnsCount]; } return buildNewJDBCResultSet0( columnLabels, table );  =>   if (columnsCount < 1) {     throw new java.lang.IllegalArgumentException( \"column labels has to be greater than zero\" ); } if (rows < 0) {     throw new java.lang.IllegalArgumentException( \"Invalid row number\" ); } java.lang.String[] columnLabels = new java.lang.String[columnsCount]; for (int i = 0; i < columnsCount; i++) {     columnLabels[i] = \"columnLabel\" + i; } int[][] table = new int[rows][]; for (int i = 0; i < rows; i++) {     table[i] = new int[columnsCount]; } return buildNewJDBCResultSet0( columnLabels, table );
SDL_334:903:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): if (columnsCount < 1) {     throw new java.lang.IllegalArgumentException( \"column labels has to be greater than zero\" ); } if (columnsCount > 5) {     throw new java.lang.IllegalArgumentException( \"Too many columns\" ); } if (rows < 0) {     throw new java.lang.IllegalArgumentException( \"Invalid row number\" ); } java.lang.String[] columnLabels = new java.lang.String[columnsCount]; for (int i = 0; i < columnsCount; i++) {     columnLabels[i] = \"columnLabel\" + i; } int[][] table = new int[rows][]; for (int i = 0; i < rows; i++) {     table[i] = new int[columnsCount]; } return buildNewJDBCResultSet0( columnLabels, table );  =>   if (columnsCount < 1) {     throw new java.lang.IllegalArgumentException( \"column labels has to be greater than zero\" ); } if (columnsCount > 5) {     throw new java.lang.IllegalArgumentException( \"Too many columns\" ); } java.lang.String[] columnLabels = new java.lang.String[columnsCount]; for (int i = 0; i < columnsCount; i++) {     columnLabels[i] = \"columnLabel\" + i; } int[][] table = new int[rows][]; for (int i = 0; i < rows; i++) {     table[i] = new int[columnsCount]; } return buildNewJDBCResultSet0( columnLabels, table );
SDL_335:903:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): if (columnsCount < 1) {     throw new java.lang.IllegalArgumentException( \"column labels has to be greater than zero\" ); } if (columnsCount > 5) {     throw new java.lang.IllegalArgumentException( \"Too many columns\" ); } if (rows < 0) {     throw new java.lang.IllegalArgumentException( \"Invalid row number\" ); } java.lang.String[] columnLabels = new java.lang.String[columnsCount]; for (int i = 0; i < columnsCount; i++) {     columnLabels[i] = \"columnLabel\" + i; } int[][] table = new int[rows][]; for (int i = 0; i < rows; i++) {     table[i] = new int[columnsCount]; } return buildNewJDBCResultSet0( columnLabels, table );  =>   if (columnsCount < 1) {     throw new java.lang.IllegalArgumentException( \"column labels has to be greater than zero\" ); } if (columnsCount > 5) {     throw new java.lang.IllegalArgumentException( \"Too many columns\" ); } if (rows < 0) {     throw new java.lang.IllegalArgumentException( \"Invalid row number\" ); } java.lang.String[] columnLabels = new java.lang.String[columnsCount]; int[][] table = new int[rows][]; for (int i = 0; i < rows; i++) {     table[i] = new int[columnsCount]; } return buildNewJDBCResultSet0( columnLabels, table );
SDL_336:903:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): if (columnsCount < 1) {     throw new java.lang.IllegalArgumentException( \"column labels has to be greater than zero\" ); } if (columnsCount > 5) {     throw new java.lang.IllegalArgumentException( \"Too many columns\" ); } if (rows < 0) {     throw new java.lang.IllegalArgumentException( \"Invalid row number\" ); } java.lang.String[] columnLabels = new java.lang.String[columnsCount]; for (int i = 0; i < columnsCount; i++) {     columnLabels[i] = \"columnLabel\" + i; } int[][] table = new int[rows][]; for (int i = 0; i < rows; i++) {     table[i] = new int[columnsCount]; } return buildNewJDBCResultSet0( columnLabels, table );  =>   if (columnsCount < 1) {     throw new java.lang.IllegalArgumentException( \"column labels has to be greater than zero\" ); } if (columnsCount > 5) {     throw new java.lang.IllegalArgumentException( \"Too many columns\" ); } if (rows < 0) {     throw new java.lang.IllegalArgumentException( \"Invalid row number\" ); } java.lang.String[] columnLabels = new java.lang.String[columnsCount]; for (int i = 0; i < columnsCount; i++) {     columnLabels[i] = \"columnLabel\" + i; } int[][] table = new int[rows][]; return buildNewJDBCResultSet0( columnLabels, table );
SDL_337:889:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): throw new java.lang.IllegalArgumentException( \"column labels has to be greater than zero\" );  =>  
SDL_338:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): if (columnsCount < 1) {     throw new java.lang.IllegalArgumentException( \"column labels has to be greater than zero\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"column labels has to be greater than zero\" ); }
SDL_339:892:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): throw new java.lang.IllegalArgumentException( \"Too many columns\" );  =>  
SDL_340:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): if (columnsCount > 5) {     throw new java.lang.IllegalArgumentException( \"Too many columns\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Too many columns\" ); }
SDL_341:895:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): throw new java.lang.IllegalArgumentException( \"Invalid row number\" );  =>  
SDL_342:897:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): if (rows < 0) {     throw new java.lang.IllegalArgumentException( \"Invalid row number\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Invalid row number\" ); }
SDL_343:899:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): columnLabels[i] = \"columnLabel\" + i;  =>  
SDL_344:901:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): for (int i = 0; i < columnsCount; i++) {     columnLabels[i] = \"columnLabel\" + i; }  =>   for (int i = 0;; i++) {     columnLabels[i] = \"columnLabel\" + i; }
SDL_345:901:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): for (int i = 0; i < columnsCount; i++) {     columnLabels[i] = \"columnLabel\" + i; }  =>   for (int i = 0; i < columnsCount;) {     columnLabels[i] = \"columnLabel\" + i; }
SDL_346:903:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): table[i] = new int[columnsCount];  =>  
SDL_347:905:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): for (int i = 0; i < rows; i++) {     table[i] = new int[columnsCount]; }  =>   for (int i = 0;; i++) {     table[i] = new int[columnsCount]; }
SDL_348:905:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int): for (int i = 0; i < rows; i++) {     table[i] = new int[columnsCount]; }  =>   for (int i = 0; i < rows;) {     table[i] = new int[columnsCount]; }
SDL_349:931:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_350:931:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = session; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_351:931:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = session; this.statement = s; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_352:931:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = session; this.statement = s; this.result = r; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_353:931:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = session; this.statement = s; this.result = r; this.connection = conn; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_354:931:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_355:931:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_356:931:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_357:931:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_358:931:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_359:921:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties ); if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   this.session = session; this.statement = s; this.result = r; this.connection = conn; rsProperties = r.rsProperties; navigator = r.getNavigator(); resultMetaData = metaData; r.metaData = metaData; columnCount = resultMetaData.getColumnCount(); isScrollable = MockResultProperties.isScrollable( rsProperties );
SDL_360:930:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): isUpdatable = true; isInsertable = true; for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } } preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result );  =>   isInsertable = true; for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } } preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result );
SDL_361:930:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): isUpdatable = true; isInsertable = true; for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } } preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result );  =>   isUpdatable = true; for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } } preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result );
SDL_362:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): isUpdatable = true; isInsertable = true; for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } } preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result );  =>   isUpdatable = true; isInsertable = true; preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result );
SDL_363:930:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): isUpdatable = true; isInsertable = true; for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } } preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result );  =>   isUpdatable = true; isInsertable = true; for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } }
SDL_364:932:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): if (MockResultProperties.isUpdatable( rsProperties )) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }  =>   if (true) {     isUpdatable = true;     isInsertable = true;     for (int i = 0; i < metaData.colIndexes.length; i++) {         if (metaData.colIndexes[i] < 0) {             isInsertable = false;             break;         }     }     preparedStatement = new com.example.resultset.MockJDBCPreparedStatement( s.connection, result ); }
SDL_365:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): if (metaData.colIndexes[i] < 0) {     isInsertable = false;     break; }  =>  
SDL_366:930:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } }  =>   for (int i = 0;; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } }
SDL_367:930:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): for (int i = 0; i < metaData.colIndexes.length; i++) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } }  =>   for (int i = 0; i < metaData.colIndexes.length;) {     if (metaData.colIndexes[i] < 0) {         isInsertable = false;         break;     } }
SDL_368:927:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): isInsertable = false; break;  =>   break;
SDL_369:927:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): isInsertable = false; break;  =>   isInsertable = false;
SDL_370:929:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection): if (metaData.colIndexes[i] < 0) {     isInsertable = false;     break; }  =>   if (true) {     isInsertable = false;     break; }
SDL_371:964:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;  =>   java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;
SDL_372:961:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;  =>   if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;
SDL_373:966:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;  =>   if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;
SDL_374:966:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;  =>   if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;
SDL_375:966:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;  =>   if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;
SDL_376:966:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;  =>   if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;
SDL_377:964:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;  =>   if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;
SDL_378:966:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;  =>   if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;
SDL_379:966:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;  =>   if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;
SDL_380:966:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;  =>   if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;
SDL_381:966:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); stmt.connection = sessionInterface; com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;  =>   if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); } java.lang.String query = \"select \"; for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; } query += \" from TABLE\"; com.example.resultset.MockRowSetNavigator navigator = new com.example.resultset.MockRowSetNavigator( columnLabels, table ); com.example.resultset.MockResult r = new com.example.resultset.MockResult( query, navigator ); r.rsProperties = 0; r.rsProperties = MockResultProperties.addScrollable( r.rsProperties, true ); r.rsProperties = MockResultProperties.addUpdatable( r.rsProperties, true ); int[] colIndexes = new int[columnLabels.length + 1]; for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; } colIndexes[columnLabels.length] = -1; com.example.resultset.MockResultMetaData metaData = new com.example.resultset.MockResultMetaData( columnLabels, colIndexes, columnLabels.length, columnLabels.length + 1 ); metaData.columnLabels = columnLabels; r.metaData = metaData; com.example.resultset.MockJDBCConnection conn = new com.example.resultset.MockJDBCConnection(); com.example.resultset.MockSessionInterface sessionInterface = new com.example.resultset.MockSessionInterface(); com.example.resultset.MockJDBCStatementBase stmt = new com.example.resultset.MockJDBCStatementBase(); com.example.resultset.JDBCResultSet rs = new com.example.resultset.JDBCResultSet( sessionInterface, stmt, r, metaData, conn ); return rs;
SDL_382:938:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): throw new java.lang.IllegalArgumentException( \"column label cannot be null\" );  =>  
SDL_383:940:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): if (columnLabels == null) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"column label cannot be null\" ); }
SDL_384:943:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): if (i > 0) {     query += \",\"; } query += columnLabels[i];  =>   query += columnLabels[i];
SDL_385:945:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): if (i > 0) {     query += \",\"; } query += columnLabels[i];  =>   if (i > 0) {     query += \",\"; }
SDL_386:947:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; }  =>   for (int i = 0;; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; }
SDL_387:947:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): for (int i = 0; i < columnLabels.length; i++) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; }  =>   for (int i = 0; i < columnLabels.length;) {     if (i > 0) {         query += \",\";     }     query += columnLabels[i]; }
SDL_388:943:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): query += \",\";  =>  
SDL_389:945:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): if (i > 0) {     query += \",\"; }  =>   if (true) {     query += \",\"; }
SDL_390:955:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): colIndexes[i] = i + 1;  =>  
SDL_391:957:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; }  =>   for (int i = 0;; i++) {     colIndexes[i] = i + 1; }
SDL_392:957:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int): for (int i = 0; i < columnLabels.length; i++) {     colIndexes[i] = i + 1; }  =>   for (int i = 0; i < columnLabels.length;) {     colIndexes[i] = i + 1; }
SDL_393:977:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int): final java.lang.String columnLabel = COLUMN_LABEL_0; int[][] table = new int[values.length][]; for (int i = 0; i < values.length; i++) {     table[i] = new int[]{ values[i] }; } java.lang.String[] label = new java.lang.String[1]; label[0] = columnLabel; return buildNewJDBCResultSet0( label, table );  =>   final java.lang.String columnLabel = COLUMN_LABEL_0; int[][] table = new int[values.length][]; java.lang.String[] label = new java.lang.String[1]; label[0] = columnLabel; return buildNewJDBCResultSet0( label, table );
SDL_394:979:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int): final java.lang.String columnLabel = COLUMN_LABEL_0; int[][] table = new int[values.length][]; for (int i = 0; i < values.length; i++) {     table[i] = new int[]{ values[i] }; } java.lang.String[] label = new java.lang.String[1]; label[0] = columnLabel; return buildNewJDBCResultSet0( label, table );  =>   final java.lang.String columnLabel = COLUMN_LABEL_0; int[][] table = new int[values.length][]; for (int i = 0; i < values.length; i++) {     table[i] = new int[]{ values[i] }; } java.lang.String[] label = new java.lang.String[1]; return buildNewJDBCResultSet0( label, table );
SDL_395:975:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int): table[i] = new int[]{ values[i] };  =>  
SDL_396:977:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int): for (int i = 0; i < values.length; i++) {     table[i] = new int[]{ values[i] }; }  =>   for (int i = 0;; i++) {     table[i] = new int[]{ values[i] }; }
SDL_397:977:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int): for (int i = 0; i < values.length; i++) {     table[i] = new int[]{ values[i] }; }  =>   for (int i = 0; i < values.length;) {     table[i] = new int[]{ values[i] }; }
VDL_1:42:void_close0():navigator == null => null
VDL_2:47:void_close0():statement != null => null
VDL_3:47:void_close0():autoClose && statement != null => statement != null
VDL_4:85:int_getInt0(int):o == null => null
VDL_5:120:int_findColumn0(java.lang.String):columnLabel == null => null
VDL_6:124:int_findColumn0(java.lang.String):columnMap != null => null
VDL_7:126:int_findColumn0(java.lang.String):columnIndex != -1 => -1
VDL_8:132:int_findColumn0(java.lang.String):i < columnCount => columnCount
VDL_9:132:int_findColumn0(java.lang.String):i < columnCount => i
VDL_10:132:int_findColumn0(java.lang.String):i++ =>  
VDL_11:139:int_findColumn0(java.lang.String):columnIndex < 0 => 0
VDL_12:140:int_findColumn0(java.lang.String):i < columnCount => columnCount
VDL_13:140:int_findColumn0(java.lang.String):i < columnCount => i
VDL_14:140:int_findColumn0(java.lang.String):i++ =>  
VDL_15:147:int_findColumn0(java.lang.String):columnIndex < 0 => 0
VDL_16:149:int_findColumn0(java.lang.String):position < 0 => 0
VDL_17:152:int_findColumn0(java.lang.String):i < columnCount => columnCount
VDL_18:152:int_findColumn0(java.lang.String):i < columnCount => i
VDL_19:152:int_findColumn0(java.lang.String):i++ =>  
VDL_20:154:int_findColumn0(java.lang.String):tabName == null => null
VDL_21:158:int_findColumn0(java.lang.String):tabName + '.' => '.'
VDL_22:158:int_findColumn0(java.lang.String):tabName + '.' + colName => tabName + '.'
VDL_23:163:int_findColumn0(java.lang.String):schemName == null => null
VDL_24:173:int_findColumn0(java.lang.String):columnIndex < 0 => 0
VDL_25:176:int_findColumn0(java.lang.String):columnIndex++ =>  
VDL_26:177:int_findColumn0(java.lang.String):columnMap == null => null
VDL_27:283:void_beforeFirst0():isOnInsertRow || isRowUpdated => isRowUpdated
VDL_28:283:void_beforeFirst0():isOnInsertRow || isRowUpdated => isOnInsertRow
VDL_29:304:void_afterLast0():isOnInsertRow || isRowUpdated => isRowUpdated
VDL_30:304:void_afterLast0():isOnInsertRow || isRowUpdated => isOnInsertRow
VDL_31:326:boolean_first0():isOnInsertRow || isRowUpdated => isRowUpdated
VDL_32:326:boolean_first0():isOnInsertRow || isRowUpdated => isOnInsertRow
VDL_33:348:boolean_last0():isOnInsertRow || isRowUpdated => isRowUpdated
VDL_34:348:boolean_last0():isOnInsertRow || isRowUpdated => isOnInsertRow
VDL_35:391:boolean_absolute0(int):isOnInsertRow || isRowUpdated => isRowUpdated
VDL_36:391:boolean_absolute0(int):isOnInsertRow || isRowUpdated => isOnInsertRow
VDL_37:394:boolean_absolute0(int):row > 0 => 0
VDL_38:395:boolean_absolute0(int):row-- =>  
VDL_39:397:boolean_absolute0(int):row == 0 => 0
VDL_40:420:boolean_relative0(int):isOnInsertRow || isRowUpdated => isRowUpdated
VDL_41:420:boolean_relative0(int):isOnInsertRow || isRowUpdated => isOnInsertRow
VDL_42:442:boolean_previous0():isOnInsertRow || isRowUpdated => isRowUpdated
VDL_43:442:boolean_previous0():isOnInsertRow || isRowUpdated => isOnInsertRow
VDL_44:650:java.lang.Object[]_getCurrent():lnavigator == null => null
VDL_45:666:java.lang.Object[]_getCurrent():data == null => null
VDL_46:675:void_checkClosed():navigator == null => null
VDL_47:683:void_checkColumn(int):navigator == null => null
VDL_48:686:void_checkColumn(int):columnIndex < 1 => 1
VDL_49:686:void_checkColumn(int):columnIndex > columnCount => columnCount
VDL_50:686:void_checkColumn(int):columnIndex > columnCount => columnIndex
VDL_51:693:boolean_trackNull(java.lang.Object):o == null => null
VDL_52:703:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):--columnIndex =>  
VDL_53:713:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"from SQL type " + sourceType.getNameString() + " to " + targetType.getJDBCClassName() + ", value: " + stringValue => "from SQL type " + sourceType.getNameString() + " to " + targetType.getJDBCClassName() + ", value: "
VDL_54:723:void_checkNotForwardOnly():!isScrollable =>  
VDL_55:740:void_checkUpdatable():!isUpdatable =>  
VDL_56:750:void_checkUpdatable(int):!isUpdatable =>  
VDL_57:753:void_checkUpdatable(int):--columnIndex =>  
VDL_58:753:void_checkUpdatable(int):resultMetaData.colIndexes[--columnIndex] == -1 => -1
VDL_59:765:void_startUpdate(int):currentUpdateRowNumber != navigator.getRowNumber() => navigator.getRowNumber()
VDL_60:799:void_performUpdate():i < columnCount => columnCount
VDL_61:799:void_performUpdate():i < columnCount => i
VDL_62:799:void_performUpdate():i++ =>  
VDL_63:800:void_performUpdate():preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i] => preparedStatement.parameterStream[i]
VDL_64:800:void_performUpdate():preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i] => preparedStatement.parameterSet[i]
VDL_65:815:void_performInsert():i < columnCount => columnCount
VDL_66:815:void_performInsert():i < columnCount => i
VDL_67:815:void_performInsert():i++ =>  
VDL_68:816:void_performInsert():preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i] => preparedStatement.parameterStream[i]
VDL_69:816:void_performInsert():preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i] => preparedStatement.parameterSet[i]
VDL_70:817:void_performInsert():!set =>  
VDL_71:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i < metaData.colIndexes.length => metaData.colIndexes.length
VDL_72:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i++ =>  
VDL_73:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):metaData.colIndexes[i] < 0 => 0
VDL_74:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount < 1 => 1
VDL_75:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount > 5 => 5
VDL_76:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows < 0 => 0
VDL_77:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i < columnsCount => columnsCount
VDL_78:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i < columnsCount => i
VDL_79:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i++ =>  
VDL_80:899:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):"columnLabel" + i => "columnLabel"
VDL_81:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i < rows => rows
VDL_82:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i < rows => i
VDL_83:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i++ =>  
VDL_84:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i < metaData.colIndexes.length => metaData.colIndexes.length
VDL_85:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i++ =>  
VDL_86:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):metaData.colIndexes[i] < 0 => 0
VDL_87:937:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels == null => null
VDL_88:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i < columnLabels.length => columnLabels.length
VDL_89:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i++ =>  
VDL_90:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i > 0 => 0
VDL_91:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i < columnLabels.length => columnLabels.length
VDL_92:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i++ =>  
VDL_93:955:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i + 1 => 1
VDL_94:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i < values.length => values.length
VDL_95:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i++ =>  
ODL_1:42:void_close0():navigator == null => navigator
ODL_2:42:void_close0():navigator == null => null
ODL_3:47:void_close0():statement != null => statement
ODL_4:47:void_close0():statement != null => null
ODL_5:47:void_close0():autoClose && statement != null => autoClose
ODL_6:47:void_close0():autoClose && statement != null => statement != null
ODL_7:85:int_getInt0(int):o == null => o
ODL_8:85:int_getInt0(int):o == null => null
ODL_9:120:int_findColumn0(java.lang.String):columnLabel == null => columnLabel
ODL_10:120:int_findColumn0(java.lang.String):columnLabel == null => null
ODL_11:124:int_findColumn0(java.lang.String):columnMap != null => columnMap
ODL_12:124:int_findColumn0(java.lang.String):columnMap != null => null
ODL_13:125:int_findColumn0(java.lang.String):-1 => 1
ODL_14:126:int_findColumn0(java.lang.String):-1 => 1
ODL_15:126:int_findColumn0(java.lang.String):columnIndex != -1 => columnIndex
ODL_16:126:int_findColumn0(java.lang.String):columnIndex != -1 => -1
ODL_17:131:int_findColumn0(java.lang.String):-1 => 1
ODL_18:132:int_findColumn0(java.lang.String):i < columnCount => i
ODL_19:132:int_findColumn0(java.lang.String):i < columnCount => columnCount
ODL_20:132:int_findColumn0(java.lang.String):i++ => i
ODL_21:139:int_findColumn0(java.lang.String):columnIndex < 0 => columnIndex
ODL_22:139:int_findColumn0(java.lang.String):columnIndex < 0 => 0
ODL_23:140:int_findColumn0(java.lang.String):i < columnCount => i
ODL_24:140:int_findColumn0(java.lang.String):i < columnCount => columnCount
ODL_25:140:int_findColumn0(java.lang.String):i++ => i
ODL_26:147:int_findColumn0(java.lang.String):columnIndex < 0 => columnIndex
ODL_27:147:int_findColumn0(java.lang.String):columnIndex < 0 => 0
ODL_28:149:int_findColumn0(java.lang.String):position < 0 => position
ODL_29:149:int_findColumn0(java.lang.String):position < 0 => 0
ODL_30:152:int_findColumn0(java.lang.String):i < columnCount => i
ODL_31:152:int_findColumn0(java.lang.String):i < columnCount => columnCount
ODL_32:152:int_findColumn0(java.lang.String):i++ => i
ODL_33:154:int_findColumn0(java.lang.String):tabName == null => tabName
ODL_34:154:int_findColumn0(java.lang.String):tabName == null => null
ODL_35:154:int_findColumn0(java.lang.String):tabName.length() == 0 => tabName.length()
ODL_36:154:int_findColumn0(java.lang.String):tabName.length() == 0 => 0
ODL_37:154:int_findColumn0(java.lang.String):tabName == null || tabName.length() == 0 => tabName == null
ODL_38:154:int_findColumn0(java.lang.String):tabName == null || tabName.length() == 0 => tabName.length() == 0
ODL_39:158:int_findColumn0(java.lang.String):tabName + '.' => tabName
ODL_40:158:int_findColumn0(java.lang.String):tabName + '.' => '.'
ODL_41:158:int_findColumn0(java.lang.String):tabName + '.' + colName => tabName + '.'
ODL_42:158:int_findColumn0(java.lang.String):tabName + '.' + colName => colName
ODL_43:163:int_findColumn0(java.lang.String):schemName == null => schemName
ODL_44:163:int_findColumn0(java.lang.String):schemName == null => null
ODL_45:163:int_findColumn0(java.lang.String):schemName.length() == 0 => schemName.length()
ODL_46:163:int_findColumn0(java.lang.String):schemName.length() == 0 => 0
ODL_47:163:int_findColumn0(java.lang.String):schemName == null || schemName.length() == 0 => schemName == null
ODL_48:163:int_findColumn0(java.lang.String):schemName == null || schemName.length() == 0 => schemName.length() == 0
ODL_49:173:int_findColumn0(java.lang.String):columnIndex < 0 => columnIndex
ODL_50:173:int_findColumn0(java.lang.String):columnIndex < 0 => 0
ODL_51:176:int_findColumn0(java.lang.String):columnIndex++ => columnIndex
ODL_52:177:int_findColumn0(java.lang.String):columnMap == null => columnMap
ODL_53:177:int_findColumn0(java.lang.String):columnMap == null => null
ODL_54:283:void_beforeFirst0():isOnInsertRow || isRowUpdated => isOnInsertRow
ODL_55:283:void_beforeFirst0():isOnInsertRow || isRowUpdated => isRowUpdated
ODL_56:304:void_afterLast0():isOnInsertRow || isRowUpdated => isOnInsertRow
ODL_57:304:void_afterLast0():isOnInsertRow || isRowUpdated => isRowUpdated
ODL_58:326:boolean_first0():isOnInsertRow || isRowUpdated => isOnInsertRow
ODL_59:326:boolean_first0():isOnInsertRow || isRowUpdated => isRowUpdated
ODL_60:348:boolean_last0():isOnInsertRow || isRowUpdated => isOnInsertRow
ODL_61:348:boolean_last0():isOnInsertRow || isRowUpdated => isRowUpdated
ODL_62:372:int_getRow0():navigator.getRowNumber() + 1 => navigator.getRowNumber()
ODL_63:372:int_getRow0():navigator.getRowNumber() + 1 => 1
ODL_64:391:boolean_absolute0(int):isOnInsertRow || isRowUpdated => isOnInsertRow
ODL_65:391:boolean_absolute0(int):isOnInsertRow || isRowUpdated => isRowUpdated
ODL_66:394:boolean_absolute0(int):row > 0 => row
ODL_67:394:boolean_absolute0(int):row > 0 => 0
ODL_68:395:boolean_absolute0(int):row-- => row
ODL_69:397:boolean_absolute0(int):row == 0 => row
ODL_70:397:boolean_absolute0(int):row == 0 => 0
ODL_71:420:boolean_relative0(int):isOnInsertRow || isRowUpdated => isOnInsertRow
ODL_72:420:boolean_relative0(int):isOnInsertRow || isRowUpdated => isRowUpdated
ODL_73:442:boolean_previous0():isOnInsertRow || isRowUpdated => isOnInsertRow
ODL_74:442:boolean_previous0():isOnInsertRow || isRowUpdated => isRowUpdated
ODL_75:650:java.lang.Object[]_getCurrent():lnavigator == null => lnavigator
ODL_76:650:java.lang.Object[]_getCurrent():lnavigator == null => null
ODL_77:666:java.lang.Object[]_getCurrent():data == null => data
ODL_78:666:java.lang.Object[]_getCurrent():data == null => null
ODL_79:675:void_checkClosed():navigator == null => navigator
ODL_80:675:void_checkClosed():navigator == null => null
ODL_81:683:void_checkColumn(int):navigator == null => navigator
ODL_82:683:void_checkColumn(int):navigator == null => null
ODL_83:686:void_checkColumn(int):columnIndex < 1 => columnIndex
ODL_84:686:void_checkColumn(int):columnIndex < 1 => 1
ODL_85:686:void_checkColumn(int):columnIndex > columnCount => columnIndex
ODL_86:686:void_checkColumn(int):columnIndex > columnCount => columnCount
ODL_87:686:void_checkColumn(int):columnIndex < 1 || columnIndex > columnCount => columnIndex < 1
ODL_88:686:void_checkColumn(int):columnIndex < 1 || columnIndex > columnCount => columnIndex > columnCount
ODL_89:693:boolean_trackNull(java.lang.Object):o == null => o
ODL_90:693:boolean_trackNull(java.lang.Object):o == null => null
ODL_91:703:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):--columnIndex => columnIndex
ODL_92:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):sourceType.typeCode != targetType.typeCode => sourceType.typeCode
ODL_93:708:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):sourceType.typeCode != targetType.typeCode => targetType.typeCode
ODL_94:712:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):value instanceof java.lang.Number || value instanceof java.lang.String => value instanceof java.lang.Number
ODL_95:712:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):value instanceof java.lang.Number || value instanceof java.lang.String => value instanceof java.lang.String
ODL_96:712:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"instance of " + value.getClass().getName() => "instance of "
ODL_97:712:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"instance of " + value.getClass().getName() => value.getClass().getName()
ODL_98:713:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"from SQL type " + sourceType.getNameString() => "from SQL type "
ODL_99:713:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"from SQL type " + sourceType.getNameString() => sourceType.getNameString()
ODL_100:713:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"from SQL type " + sourceType.getNameString() + " to " => "from SQL type " + sourceType.getNameString()
ODL_101:713:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"from SQL type " + sourceType.getNameString() + " to " => " to "
ODL_102:713:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"from SQL type " + sourceType.getNameString() + " to " + targetType.getJDBCClassName() => "from SQL type " + sourceType.getNameString() + " to "
ODL_103:713:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"from SQL type " + sourceType.getNameString() + " to " + targetType.getJDBCClassName() => targetType.getJDBCClassName()
ODL_104:713:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"from SQL type " + sourceType.getNameString() + " to " + targetType.getJDBCClassName() + ", value: " => "from SQL type " + sourceType.getNameString() + " to " + targetType.getJDBCClassName()
ODL_105:713:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"from SQL type " + sourceType.getNameString() + " to " + targetType.getJDBCClassName() + ", value: " => ", value: "
ODL_106:713:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"from SQL type " + sourceType.getNameString() + " to " + targetType.getJDBCClassName() + ", value: " + stringValue => "from SQL type " + sourceType.getNameString() + " to " + targetType.getJDBCClassName() + ", value: "
ODL_107:713:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"from SQL type " + sourceType.getNameString() + " to " + targetType.getJDBCClassName() + ", value: " + stringValue => stringValue
ODL_108:723:void_checkNotForwardOnly():!isScrollable => isScrollable
ODL_109:740:void_checkUpdatable():!isUpdatable => isUpdatable
ODL_110:750:void_checkUpdatable(int):!isUpdatable => isUpdatable
ODL_111:753:void_checkUpdatable(int):--columnIndex => columnIndex
ODL_112:753:void_checkUpdatable(int):-1 => 1
ODL_113:753:void_checkUpdatable(int):resultMetaData.colIndexes[--columnIndex] == -1 => resultMetaData.colIndexes[--columnIndex]
ODL_114:753:void_checkUpdatable(int):resultMetaData.colIndexes[--columnIndex] == -1 => -1
ODL_115:756:void_checkUpdatable(int):!resultMetaData.columns[columnIndex].isWriteable() => resultMetaData.columns[columnIndex].isWriteable()
ODL_116:765:void_startUpdate(int):currentUpdateRowNumber != navigator.getRowNumber() => currentUpdateRowNumber
ODL_117:765:void_startUpdate(int):currentUpdateRowNumber != navigator.getRowNumber() => navigator.getRowNumber()
ODL_118:799:void_performUpdate():i < columnCount => i
ODL_119:799:void_performUpdate():i < columnCount => columnCount
ODL_120:799:void_performUpdate():i++ => i
ODL_121:800:void_performUpdate():preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i] => preparedStatement.parameterSet[i]
ODL_122:800:void_performUpdate():preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i] => preparedStatement.parameterStream[i]
ODL_123:815:void_performInsert():i < columnCount => i
ODL_124:815:void_performInsert():i < columnCount => columnCount
ODL_125:815:void_performInsert():i++ => i
ODL_126:816:void_performInsert():preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i] => preparedStatement.parameterSet[i]
ODL_127:816:void_performInsert():preparedStatement.parameterSet[i] || preparedStatement.parameterStream[i] => preparedStatement.parameterStream[i]
ODL_128:817:void_performInsert():!set => set
ODL_129:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i < metaData.colIndexes.length => i
ODL_130:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i < metaData.colIndexes.length => metaData.colIndexes.length
ODL_131:857:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):i++ => i
ODL_132:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):metaData.colIndexes[i] < 0 => metaData.colIndexes[i]
ODL_133:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):metaData.colIndexes[i] < 0 => 0
ODL_134:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount < 1 => columnsCount
ODL_135:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount < 1 => 1
ODL_136:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount > 5 => columnsCount
ODL_137:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount > 5 => 5
ODL_138:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows < 0 => rows
ODL_139:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows < 0 => 0
ODL_140:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i < columnsCount => i
ODL_141:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i < columnsCount => columnsCount
ODL_142:898:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i++ => i
ODL_143:899:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):"columnLabel" + i => "columnLabel"
ODL_144:899:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):"columnLabel" + i => i
ODL_145:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i < rows => i
ODL_146:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i < rows => rows
ODL_147:902:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):i++ => i
ODL_148:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i < metaData.colIndexes.length => i
ODL_149:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i < metaData.colIndexes.length => metaData.colIndexes.length
ODL_150:924:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):i++ => i
ODL_151:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):metaData.colIndexes[i] < 0 => metaData.colIndexes[i]
ODL_152:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):metaData.colIndexes[i] < 0 => 0
ODL_153:937:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels == null => columnLabels
ODL_154:937:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels == null => null
ODL_155:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i < columnLabels.length => i
ODL_156:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i < columnLabels.length => columnLabels.length
ODL_157:941:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i++ => i
ODL_158:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i > 0 => i
ODL_159:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i > 0 => 0
ODL_160:943:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):query += "," => query = ","
ODL_161:945:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):query += columnLabels[i] => query = columnLabels[i]
ODL_162:947:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):query += " from TABLE" => query = " from TABLE"
ODL_163:953:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length + 1 => columnLabels.length
ODL_164:953:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length + 1 => 1
ODL_165:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i < columnLabels.length => i
ODL_166:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i < columnLabels.length => columnLabels.length
ODL_167:954:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i++ => i
ODL_168:955:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i + 1 => i
ODL_169:955:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i + 1 => 1
ODL_170:957:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):-1 => 1
ODL_171:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length + 1 => columnLabels.length
ODL_172:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length + 1 => 1
ODL_173:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i < values.length => i
ODL_174:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i < values.length => values.length
ODL_175:974:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet(int):i++ => i
CDL_1:42:void_close0():navigator == null => navigator
CDL_2:47:void_close0():statement != null => statement
CDL_3:85:int_getInt0(int):o == null => o
CDL_4:120:int_findColumn0(java.lang.String):columnLabel == null => columnLabel
CDL_5:124:int_findColumn0(java.lang.String):columnMap != null => columnMap
CDL_6:125:int_findColumn0(java.lang.String):-1 =>  
CDL_7:126:int_findColumn0(java.lang.String):-1 =>  
CDL_8:131:int_findColumn0(java.lang.String):-1 =>  
CDL_9:139:int_findColumn0(java.lang.String):columnIndex < 0 => columnIndex
CDL_10:147:int_findColumn0(java.lang.String):columnIndex < 0 => columnIndex
CDL_11:149:int_findColumn0(java.lang.String):position < 0 => position
CDL_12:154:int_findColumn0(java.lang.String):tabName == null => tabName
CDL_13:154:int_findColumn0(java.lang.String):tabName.length() == 0 => tabName.length()
CDL_14:158:int_findColumn0(java.lang.String):tabName + '.' => tabName
CDL_15:163:int_findColumn0(java.lang.String):schemName == null => schemName
CDL_16:163:int_findColumn0(java.lang.String):schemName.length() == 0 => schemName.length()
CDL_17:173:int_findColumn0(java.lang.String):columnIndex < 0 => columnIndex
CDL_18:177:int_findColumn0(java.lang.String):columnMap == null => columnMap
CDL_19:372:int_getRow0():navigator.getRowNumber() + 1 => navigator.getRowNumber()
CDL_20:394:boolean_absolute0(int):row > 0 => row
CDL_21:397:boolean_absolute0(int):row == 0 => row
CDL_22:650:java.lang.Object[]_getCurrent():lnavigator == null => lnavigator
CDL_23:666:java.lang.Object[]_getCurrent():data == null => data
CDL_24:675:void_checkClosed():navigator == null => navigator
CDL_25:683:void_checkColumn(int):navigator == null => navigator
CDL_26:686:void_checkColumn(int):columnIndex < 1 => columnIndex
CDL_27:693:boolean_trackNull(java.lang.Object):o == null => o
CDL_28:712:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):value instanceof java.lang.Number || value instanceof java.lang.String => value instanceof java.lang.String
CDL_29:712:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):value instanceof java.lang.Number || value instanceof java.lang.String => value instanceof java.lang.Number
CDL_30:712:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"instance of " + value.getClass().getName() => value.getClass().getName()
CDL_31:713:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"from SQL type " + sourceType.getNameString() => sourceType.getNameString()
CDL_32:713:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"from SQL type " + sourceType.getNameString() + " to " => "from SQL type " + sourceType.getNameString()
CDL_33:713:java.lang.Object_getColumnInType(int,com.example.resultset.MockType):"from SQL type " + sourceType.getNameString() + " to " + targetType.getJDBCClassName() + ", value: " => "from SQL type " + sourceType.getNameString() + " to " + targetType.getJDBCClassName()
CDL_34:753:void_checkUpdatable(int):-1 =>  
CDL_35:858:JDBCResultSet(com.example.resultset.MockJDBCConnection,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData):metaData.colIndexes[i] < 0 => metaData.colIndexes[i]
CDL_36:888:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount < 1 => columnsCount
CDL_37:891:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):columnsCount > 5 => columnsCount
CDL_38:894:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):rows < 0 => rows
CDL_39:899:com.example.resultset.JDBCResultSet_buildNewMJDBCResultSet(int,int):"columnLabel" + i => i
CDL_40:925:JDBCResultSet(com.example.resultset.MockSessionInterface,com.example.resultset.MockJDBCStatementBase,com.example.resultset.MockResult,com.example.resultset.MockResultMetaData,com.example.resultset.MockJDBCConnection):metaData.colIndexes[i] < 0 => metaData.colIndexes[i]
CDL_41:937:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels == null => columnLabels
CDL_42:942:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i > 0 => i
CDL_43:953:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length + 1 => columnLabels.length
CDL_44:955:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):i + 1 => i
CDL_45:957:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):-1 =>  
CDL_46:958:com.example.resultset.JDBCResultSet_buildNewJDBCResultSet0(java.lang.String[],int):columnLabels.length + 1 => columnLabels.length
