/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 22 20:31:59 GMT 2018
 */

package com.example.zipoutputstream;

import org.junit.Test;
import static org.junit.Assert.*;
import com.example.zipoutputstream.MockOutputStream;
import com.example.zipoutputstream.ZipOutputStream;
import java.util.zip.ZipException;

public class ZipOutputStream_ESTest_2 {

  @Test(timeout = 1300)
  public void test0()  throws Throwable  {
      ZipOutputStream zipOutputStream0 = new ZipOutputStream();
      byte[] byteArray0 = new byte[0];
      zipOutputStream0.write(byteArray0);
      zipOutputStream0.write(byteArray0);
      assertEquals(0L, zipOutputStream0.deflater_getBytesWritten());
  }

  @Test(timeout = 1300)
  public void test1()  throws Throwable  {
      ZipOutputStream zipOutputStream0 = new ZipOutputStream();
      byte[] byteArray0 = new byte[0];
      zipOutputStream0.write(byteArray0);
      zipOutputStream0.closeEntry();
      assertEquals(0, ZipOutputStream.STORED);
  }

  @Test(timeout = 1300)
  public void test2()  throws Throwable  {
      ZipOutputStream zipOutputStream0 = new ZipOutputStream();
      byte[] byteArray0 = new byte[0];
      zipOutputStream0.write(byteArray0);
      zipOutputStream0.close();
      assertEquals(0, ZipOutputStream.STORED);
  }

  @Test(timeout = 1300)
  public void test3()  throws Throwable  {
      ZipOutputStream zipOutputStream0 = new ZipOutputStream();
      byte[] byteArray0 = new byte[0];
      zipOutputStream0.closeEntry();
      zipOutputStream0.write(byteArray0);
      assertEquals(0L, zipOutputStream0.deflater_getBytesRead());
  }

  @Test(timeout = 1300)
  public void test4()  throws Throwable  {
      ZipOutputStream zipOutputStream0 = new ZipOutputStream();
      zipOutputStream0.closeEntry();
      zipOutputStream0.closeEntry();
      assertEquals(0, ZipOutputStream.STORED);
  }

  @Test(timeout = 1300)
  public void test5()  throws Throwable  {
      ZipOutputStream zipOutputStream0 = new ZipOutputStream();
      zipOutputStream0.closeEntry();
      zipOutputStream0.close();
      assertEquals(8, ZipOutputStream.DEFLATED);
  }

  @Test(timeout = 1300)
  public void test6()  throws Throwable  {
      ZipOutputStream zipOutputStream0 = new ZipOutputStream();
      byte[] byteArray0 = new byte[0];
      zipOutputStream0.write(byteArray0);
      zipOutputStream0.out = (MockOutputStream) zipOutputStream0;
      try { 
        zipOutputStream0.close();
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // no current ZIP entry
         //
      }
  }

  @Test(timeout = 1300)
  public void test7()  throws Throwable  {
      ZipOutputStream zipOutputStream0 = new ZipOutputStream();
      zipOutputStream0.close();
      zipOutputStream0.close();
      zipOutputStream0.close();
      assertEquals(0, ZipOutputStream.STORED);
  }

  @Test(timeout = 1300)
  public void test8()  throws Throwable  {
      ZipOutputStream zipOutputStream0 = new ZipOutputStream();
      try { 
        zipOutputStream0.write(19);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // no current ZIP entry
         //
      }
  }
}
