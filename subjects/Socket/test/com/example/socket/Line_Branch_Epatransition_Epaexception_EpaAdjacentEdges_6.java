/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 23 13:37:39 GMT 2018
 */

package com.example.socket;

import org.junit.Test;
import static org.junit.Assert.*;
import com.example.socket.MockEnvironment;
import com.example.socket.MockInet4Address;
import com.example.socket.MockInet6Address;
import com.example.socket.MockInetAddress;
import com.example.socket.MockInetSocketAddress;
import com.example.socket.MockSocketAddress;
import com.example.socket.Socket;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.net.SocketException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class Line_Branch_Epatransition_Epaexception_EpaAdjacentEdges_6 {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      mockEnvironment0.pushIOException(true);
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(false);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("sL", 0);
      mockEnvironment0.isBlackListed(mockInetSocketAddress0);
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress("", 0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
      socket0.shutdownInput();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress1, 0);
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.anyLocalAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, (-1276));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      socket0.shutdownOutput();
      socket0.getInputStream();
      socket0.getInputStream();
      MockInet6Address mockInet6Address1 = (MockInet6Address)MockInetAddress.anyLocalAddress();
      mockEnvironment0.isBlackListed((MockInetAddress) mockInet6Address1, 1);
      socket0.shutdownOutput();
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress(0);
      Socket socket1 = new Socket(mockEnvironment0);
      assertFalse(socket1.equals((Object)socket0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.shouldThrowIOException();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(true);
      MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 1155);
      mockEnvironment0.isBlackListed(mockInetSocketAddress0);
      MockInetAddress.getLocalHost();
      mockEnvironment0.shouldThrowIOException();
      mockEnvironment0.isBlackListed((MockInetAddress) mockInet6Address0, (-3230));
      mockEnvironment0.isBlackListed(mockInetSocketAddress0);
      Socket socket1 = new Socket(mockEnvironment0);
      Socket socket2 = new Socket(mockEnvironment0);
      socket1.bind(mockInetSocketAddress0);
      try {
        socket1.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      mockEnvironment0.isBlackListed((MockInetSocketAddress) null);
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind((MockSocketAddress) null);
      Socket socket1 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("zYv&x%wMqi@q", 1);
      socket0.close();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1632);
      MockInetAddress.anyLocalAddress();
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1632);
      MockInetAddress.anyLocalAddress();
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      MockInetAddress.getLocalHost();
      mockEnvironment0.addToBlackList(mockInetSocketAddress0);
      mockEnvironment0.addToBlackList(mockInetSocketAddress0);
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Socket socket0 = new Socket();
      socket0.bind((MockSocketAddress) null);
      socket0.close();
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Socket socket0 = new Socket();
      int int0 = (-1148);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-1148));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.close();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      mockEnvironment0.shouldThrowIOException();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet4Address mockInet4Address0 = new MockInet4Address("T6al*3//W=s89V=Lb|");
      int int0 = 65535;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet4Address0, 65535);
      socket0.bind(mockInetSocketAddress0);
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress((MockInetAddress) mockInet4Address0, 65535);
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-1181));
      mockEnvironment0.setDelayToConnect(mockInetSocketAddress0, 0);
      mockEnvironment0.isBlackListed((MockInetAddress) null, (-1028));
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress((MockInetAddress) null, 65535);
      mockEnvironment0.isBlackListed(mockInetSocketAddress1);
      MockInetSocketAddress mockInetSocketAddress2 = new MockInetSocketAddress((MockInetAddress) null, 5038);
      socket0.connect((MockSocketAddress) mockInetSocketAddress2);
      socket0.getOutputStream();
      int int0 = 256;
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress2, 23);
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("com.example.socket.MockIOException", 31);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      mockEnvironment0.shouldThrowIOException();
      socket0.getOutputStream();
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress(31);
      try {
        socket0.bind(mockInetSocketAddress1);
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      int int0 = 1;
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.anyLocalAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 442);
      socket0.bind(mockInetSocketAddress0);
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress(",Y%lll7b", 1);
      mockEnvironment0.setDelayToConnect(mockInetSocketAddress1, 1);
      MockInetSocketAddress mockInetSocketAddress2 = new MockInetSocketAddress(",Y%lll7b", 1);
      socket0.connect((MockSocketAddress) mockInetSocketAddress2);
      mockEnvironment0.pushIOException(true);
      socket0.shutdownOutput();
      MockSocketAddress mockSocketAddress0 = null;
      try {
        socket0.connect((MockSocketAddress) null, 1);
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // connect: The address can't be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLoopbackAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 282);
      mockEnvironment0.shouldThrowIOException();
      mockEnvironment0.isBlackListed(mockInetSocketAddress0);
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 282);
      socket0.shutdownOutput();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket output is shutdown
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = new MockInet6Address("connect");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 1155);
      socket0.getInputStream();
      try {
        socket0.bind(mockInetSocketAddress1);
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet6Address mockInet6Address0 = new MockInet6Address("Socket output is already shutdown");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 311);
      socket0.bind(mockInetSocketAddress0);
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      int int0 = 4910;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 4910);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownInput();
      MockInetAddress.getLoopbackAddress();
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket input is already shutdown
         //
      }
  }

//  @Test(timeout = 4000)
//  public void test15()  throws Throwable  {
//    Future<?> future = executor.submit(new Runnable(){
//            @Override public void run() {
//        try {
//          MockEnvironment mockEnvironment0 = new MockEnvironment();
//          Socket socket0 = new Socket(mockEnvironment0);
//          MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(256);
//          socket0.connect((MockSocketAddress) mockInetSocketAddress0, 256);
//          MockInet6Address mockInet6Address0 = new MockInet6Address("@:1arv`_~]W$U]Pn");
//          MockInetAddress.getLoopbackAddress();
//          socket0.shutdownInput();
//          mockEnvironment0.isBlackListed((MockInetAddress) mockInet6Address0, (-284));
//          MockInet6Address mockInet6Address1 = (MockInet6Address)MockInetAddress.anyLocalAddress();
//          MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress((MockInetAddress) mockInet6Address1, (-2065));
//          try {
//            socket0.connect((MockSocketAddress) mockInetSocketAddress1, (-2065));
//            fail("Expecting exception: IllegalArgumentException");
//
//          } catch(IllegalArgumentException e) {
//             //
//             // connect: timeout can't be negative
//             //
//          }
//        } catch(Throwable t) {
//            // Need to catch declared exceptions
//        }
//      }
//    });
//    future.get(4000, TimeUnit.MILLISECONDS);
//  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("TNax", 5038);
      mockEnvironment0.addToBlackList(mockInetSocketAddress0);
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress(1139);
      mockEnvironment0.isBlackListed(mockInetSocketAddress1);
      Socket socket0 = new Socket(mockEnvironment0);
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, 5038);
        fail("Expecting exception: IOException");

      } catch(IOException e) {
         //
         // Connection refused
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.close();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) null, 0);
      mockEnvironment0.pushIOException(true);
      mockEnvironment0.pushIOException(false);
      mockEnvironment0.addToBlackList(mockInetSocketAddress0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 0);
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress(23);
      socket0.connect((MockSocketAddress) mockInetSocketAddress1);
      socket0.close();
      mockEnvironment0.shouldThrowIOException();
      socket0.close();
      socket0.close();
      Socket socket1 = new Socket(mockEnvironment0);
      MockEnvironment mockEnvironment1 = new MockEnvironment();
      Socket socket2 = new Socket(mockEnvironment1);
      Socket socket3 = new Socket(mockEnvironment1);
      mockEnvironment1.addToBlackList(mockInetSocketAddress1);
      socket3.close();
      Socket socket4 = new Socket(mockEnvironment1);
      Socket socket5 = new Socket(mockEnvironment1);
      Socket socket6 = new Socket(mockEnvironment0);
      assertFalse(socket6.equals((Object)socket5));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("Lq{", 0);
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.close();
      socket0.close();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      mockEnvironment0.shouldThrowIOException();
      mockEnvironment0.pushIOException(true);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(65535);
      mockEnvironment0.pushIOException(false);
      Socket socket0 = new Socket(mockEnvironment0);
      socket0.bind(mockInetSocketAddress0);
      MockEnvironment mockEnvironment1 = new MockEnvironment();
      Socket socket1 = new Socket(mockEnvironment1);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      socket0.close();
      mockEnvironment0.setDelayToConnect(mockInetSocketAddress0, 65535);
      // Undeclared exception!
      try {
        mockEnvironment0.setDelayToConnect(mockInetSocketAddress0, (-1));
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // Delay should be non negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2401);
      mockEnvironment0.addToBlackList(mockInetSocketAddress0);
      Socket socket0 = new Socket(mockEnvironment0);
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: IOException");

      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      mockEnvironment0.pushIOException(true);
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      socket0.bind((MockSocketAddress) null);
      int int0 = ObjectStreamConstants.baseWireHandle;
      socket0.close();
      socket0.close();
      Socket socket1 = new Socket(mockEnvironment0);
      Socket socket2 = new Socket(mockEnvironment0);
      assertFalse(socket2.equals((Object)socket1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.pushIOException(true);
      String string0 = null;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((String) null, 3625);
      socket0.bind(mockInetSocketAddress0);
      socket0.close();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Socket socket0 = new Socket();
      socket0.bind((MockSocketAddress) null);
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      int int0 = 7;
      MockInetAddress mockInetAddress0 = new MockInetAddress("Socket output is already shutdown");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(mockInetAddress0, 7);
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // bind: invalid address type
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("com.example.socket.MockIOException", 549);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      mockEnvironment0.pushIOException(true);
      socket0.close();
      socket0.shutdownOutput();
      MockEnvironment mockEnvironment1 = new MockEnvironment();
      Socket socket1 = new Socket(mockEnvironment1);
      socket1.close();
      socket0.close();
      socket1.close();
      socket0.close();
      Socket socket2 = new Socket(mockEnvironment0);
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1861);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownInput();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket input is shutdown
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 1);
      socket0.bind(mockInetSocketAddress0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1);
      socket0.getOutputStream();
      socket0.close();
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket1 = new Socket();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1861);
      socket0.bind(mockInetSocketAddress0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.getInputStream();
      socket0.close();
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, (-3237));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.shutdownOutput();
      mockEnvironment0.isBlackListed((MockInetAddress) mockInet6Address0, 0);
      Socket socket1 = new Socket(mockEnvironment0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      mockEnvironment0.pushIOException(true);
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetAddress.anyLocalAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
      socket0.bind(mockInetSocketAddress0);
      socket0.bind((MockSocketAddress) null);
      try {
        socket0.bind((MockSocketAddress) null);
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Socket socket0 = new Socket();
      socket0.close();
      socket0.close();
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      mockEnvironment0.shouldThrowIOException();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("X)b{L[lQ[jtoyV_", 1272);
      Socket socket0 = new Socket(mockEnvironment0);
      mockEnvironment0.isBlackListed(mockInetSocketAddress0);
      socket0.bind(mockInetSocketAddress0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 1272);
      socket0.close();
      Socket socket1 = new Socket(mockEnvironment0);
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, (-2331));
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // connect: timeout can't be negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      Socket socket1 = new Socket(mockEnvironment0);
      socket0.close();
      Socket socket2 = new Socket(mockEnvironment0);
      socket2.close();
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockEnvironment mockEnvironment0 = null;
      Socket socket0 = new Socket((MockEnvironment) null);
      socket0.close();
      MockSocketAddress mockSocketAddress0 = null;
      try {
        socket0.bind((MockSocketAddress) null);
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      try {
        socket0.connect((MockSocketAddress) null, 1527);
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // connect: The address can't be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(":D~S~qg$@x4", 1);
      socket0.bind(mockInetSocketAddress0);
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Socket socket0 = new Socket();
      socket0.close();
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockEnvironment mockEnvironment0 = null;
      Socket socket0 = new Socket((MockEnvironment) null);
      int int0 = (-1);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-1));
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Socket socket0 = new Socket((MockEnvironment) null);
      try {
        socket0.bind((MockSocketAddress) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1523);
      socket0.close();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-4));
      socket0.bind((MockSocketAddress) null);
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, (-4));
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // connect: timeout can't be negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Socket socket0 = new Socket();
      try {
        socket0.shutdownInput();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-8));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.getOutputStream();
      socket0.getOutputStream();
      socket0.getInputStream();
      socket0.getInputStream();
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress0, (-1156));
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // connect: timeout can't be negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Socket socket0 = new Socket();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLocalHost();
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      socket0.bind(mockInetSocketAddress0);
      socket0.close();
      socket0.close();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("Socket is not connected", 0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress(0);
      try {
        socket0.connect((MockSocketAddress) mockInetSocketAddress1, 0);
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // already connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", (-305));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress((-305));
      socket0.getInputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      socket0.getOutputStream();
      socket0.shutdownOutput();
      socket0.getInputStream();
      socket0.getInputStream();
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket output is already shutdown
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", (-305));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress((-305));
      Integer integer0 = new Integer((-305));
      socket0.shutdownOutput();
      socket0.shutdownInput();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket input is shutdown
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1746);
      socket0.bind(mockInetSocketAddress0);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 23);
      socket0.shutdownOutput();
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      MockInet6Address mockInet6Address0 = (MockInet6Address)MockInetAddress.getLoopbackAddress();
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress((MockInetAddress) mockInet6Address0, 5038);
      try {
        socket0.bind(mockInetSocketAddress1);
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1968);
      MockInetSocketAddress mockInetSocketAddress1 = new MockInetSocketAddress(1968);
      Socket socket0 = new Socket();
      socket0.connect((MockSocketAddress) mockInetSocketAddress1, 1968);
      socket0.getOutputStream();
      socket0.shutdownInput();
      socket0.close();
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      socket0.close();
      try {
        socket0.shutdownOutput();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockEnvironment mockEnvironment0 = new MockEnvironment();
      MockInet4Address mockInet4Address0 = new MockInet4Address("&NoZKqMu,V");
      mockEnvironment0.isBlackListed((MockInetAddress) mockInet4Address0, 841);
      Socket socket0 = new Socket(mockEnvironment0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(841);
      MockInetAddress.getLoopbackAddress();
      mockEnvironment0.pushIOException(true);
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.close();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is closed
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((-4428));
      socket0.connect((MockSocketAddress) mockInetSocketAddress0);
      socket0.getInputStream();
      socket0.shutdownInput();
      try {
        socket0.bind(mockInetSocketAddress0);
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Already bound
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Socket socket0 = new Socket((MockEnvironment) null);
      try {
        socket0.getOutputStream();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is not connected
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Socket socket0 = new Socket();
      MockInet4Address mockInet4Address0 = new MockInet4Address("hostname");
      int int0 = 1654;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((MockInetAddress) mockInet4Address0, 1654);
      socket0.bind(mockInetSocketAddress0);
      MockInet6Address mockInet6Address0 = new MockInet6Address("hostname");
      socket0.connect((MockSocketAddress) mockInetSocketAddress0, 2245);
      socket0.shutdownInput();
      socket0.getOutputStream();
      socket0.shutdownOutput();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket input is shutdown
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Socket socket0 = new Socket();
      try {
        socket0.getInputStream();
        fail("Expecting exception: SocketException");

      } catch(SocketException e) {
         //
         // Socket is not connected
         //
      }
  }
}