/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 20 17:20:56 GMT 2018
 */

package com.example.nfst;

import org.junit.Test;
import static org.junit.Assert.*;
import com.example.nfst.NumberFormatStringTokenizer;
import java.util.NoSuchElementException;

public class NumberFormatStringTokenizer_ESTest {

  @Test(timeout = 1300)
  public void test00()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("<D");
      numberFormatStringTokenizer0.nextToken();
      numberFormatStringTokenizer0.nextToken();
      numberFormatStringTokenizer0.isLetterOrDigitAhead();
      boolean boolean0 = numberFormatStringTokenizer0.isLetterOrDigitAhead();
      assertFalse(numberFormatStringTokenizer0.hasMoreTokens());
      assertFalse(boolean0);
  }

  @Test(timeout = 1300)
  public void test01()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("<D");
      numberFormatStringTokenizer0.nextToken();
      numberFormatStringTokenizer0.nextToken();
      numberFormatStringTokenizer0.isLetterOrDigitAhead();
      // Undeclared exception!
      try { 
        numberFormatStringTokenizer0.nextToken();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test02()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("L");
      numberFormatStringTokenizer0.nextToken();
      numberFormatStringTokenizer0.hasMoreTokens();
      boolean boolean0 = numberFormatStringTokenizer0.isLetterOrDigitAhead();
      assertFalse(numberFormatStringTokenizer0.hasMoreTokens());
      assertFalse(boolean0);
  }

  @Test(timeout = 1300)
  public void test03()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("L");
      numberFormatStringTokenizer0.nextToken();
      numberFormatStringTokenizer0.hasMoreTokens();
      boolean boolean0 = numberFormatStringTokenizer0.hasMoreTokens();
      assertFalse(numberFormatStringTokenizer0.isLetterOrDigitAhead());
      assertFalse(boolean0);
  }

  @Test(timeout = 1300)
  public void test04()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("nM~");
      numberFormatStringTokenizer0.nextToken();
      numberFormatStringTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        numberFormatStringTokenizer0.nextToken();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test05()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("<D");
      numberFormatStringTokenizer0.nextToken();
      numberFormatStringTokenizer0.nextIsSep();
      numberFormatStringTokenizer0.nextToken();
      assertFalse(numberFormatStringTokenizer0.isLetterOrDigitAhead());
  }

  @Test(timeout = 1300)
  public void test06()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("nM~");
      numberFormatStringTokenizer0.nextIsSep();
      numberFormatStringTokenizer0.nextToken();
      assertFalse(numberFormatStringTokenizer0.isLetterOrDigitAhead());
  }

  @Test(timeout = 1300)
  public void test07()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("wCjaFEQcXBJ`DUM$m3");
      numberFormatStringTokenizer0.nextIsSep();
      boolean boolean0 = numberFormatStringTokenizer0.nextIsSep();
      assertFalse(boolean0);
  }

  @Test(timeout = 1300)
  public void test08()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer(")ChCS(~caw$");
      boolean boolean0 = numberFormatStringTokenizer0.nextIsSep();
      boolean boolean1 = numberFormatStringTokenizer0.hasMoreTokens();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 1300)
  public void test09()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("nM~");
      numberFormatStringTokenizer0.nextToken();
      numberFormatStringTokenizer0.isLetterOrDigitAhead();
      numberFormatStringTokenizer0.nextToken();
      assertFalse(numberFormatStringTokenizer0.hasMoreTokens());
  }

  @Test(timeout = 1300)
  public void test10()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("$eS");
      numberFormatStringTokenizer0.isLetterOrDigitAhead();
      numberFormatStringTokenizer0.nextToken();
      assertFalse(numberFormatStringTokenizer0.nextIsSep());
  }

  @Test(timeout = 1300)
  public void test11()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("wCjaFEQcXBJ`DUM$m3");
      boolean boolean0 = numberFormatStringTokenizer0.isLetterOrDigitAhead();
      boolean boolean1 = numberFormatStringTokenizer0.nextIsSep();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 1300)
  public void test12()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("wCjaFEQcXBJ`DUM$m3");
      numberFormatStringTokenizer0.isLetterOrDigitAhead();
      boolean boolean0 = numberFormatStringTokenizer0.isLetterOrDigitAhead();
      assertTrue(boolean0);
  }

  @Test(timeout = 1300)
  public void test13()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("$eS");
      numberFormatStringTokenizer0.nextToken();
      numberFormatStringTokenizer0.hasMoreTokens();
      numberFormatStringTokenizer0.nextToken();
      assertFalse(numberFormatStringTokenizer0.isLetterOrDigitAhead());
  }

  @Test(timeout = 1300)
  public void test14()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer(")ChCS(~caw$");
      numberFormatStringTokenizer0.hasMoreTokens();
      numberFormatStringTokenizer0.nextToken();
      assertFalse(numberFormatStringTokenizer0.nextIsSep());
  }

  @Test(timeout = 1300)
  public void test15()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer(")ChCS(~caw$");
      boolean boolean0 = numberFormatStringTokenizer0.hasMoreTokens();
      boolean boolean1 = numberFormatStringTokenizer0.nextIsSep();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 1300)
  public void test16()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("$eS");
      boolean boolean0 = numberFormatStringTokenizer0.hasMoreTokens();
      boolean boolean1 = numberFormatStringTokenizer0.isLetterOrDigitAhead();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 1300)
  public void test17()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("");
      boolean boolean0 = numberFormatStringTokenizer0.isLetterOrDigitAhead();
      assertFalse(boolean0);
  }

  @Test(timeout = 1300)
  public void test18()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("");
      boolean boolean0 = numberFormatStringTokenizer0.hasMoreTokens();
      assertFalse(boolean0);
  }

  @Test(timeout = 1300)
  public void test19()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("");
      // Undeclared exception!
      try { 
        numberFormatStringTokenizer0.nextToken();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test20()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("L");
      numberFormatStringTokenizer0.nextToken();
      numberFormatStringTokenizer0.isLetterOrDigitAhead();
      boolean boolean0 = numberFormatStringTokenizer0.hasMoreTokens();
      assertFalse(numberFormatStringTokenizer0.isLetterOrDigitAhead());
      assertFalse(boolean0);
  }

  @Test(timeout = 1300)
  public void test21()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("2EQze3L6~qaoUS");
      numberFormatStringTokenizer0.nextToken();
      numberFormatStringTokenizer0.nextToken();
      numberFormatStringTokenizer0.nextToken();
      numberFormatStringTokenizer0.hasMoreTokens();
      // Undeclared exception!
      try { 
        numberFormatStringTokenizer0.nextToken();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1300)
  public void test22()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("wCjaFEQcXBJ`DUM$m3");
      boolean boolean0 = numberFormatStringTokenizer0.nextIsSep();
      boolean boolean1 = numberFormatStringTokenizer0.isLetterOrDigitAhead();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 1300)
  public void test23()  throws Throwable  {
      NumberFormatStringTokenizer numberFormatStringTokenizer0 = new NumberFormatStringTokenizer("$eS");
      boolean boolean0 = numberFormatStringTokenizer0.isLetterOrDigitAhead();
      boolean boolean1 = numberFormatStringTokenizer0.hasMoreTokens();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

}
